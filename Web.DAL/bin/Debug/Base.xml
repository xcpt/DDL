<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Base</name>
    </assembly>
    <members>
        <member name="T:Base.Cache.Cache">
            <summary>
            缓存 
            </summary>
        </member>
        <member name="F:Base.Cache.Cache.isCache">
            <summary>
            是否缓存数据
            </summary>
        </member>
        <member name="M:Base.Cache.Cache.GetCacheName(System.String)">
            <summary>
            获得获取名称
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Base.Cache.Cache.GetCacheValue(System.String)">
            <summary>
            取
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Base.Cache.Cache.AddCacheValue(System.Object,System.Int32)">
            <summary>
            对缓存赋值/方法
            </summary>
            <param name="cache"></param>
            <param name="varExpireTime"></param>
        </member>
        <member name="M:Base.Cache.Cache.clean">
            <summary>
            释放缓存/方法
            </summary>
        </member>
        <member name="M:Base.Cache.Cache.RemoveAllCache">
            <summary>
            删除所有缓存
            </summary>
        </member>
        <member name="M:Base.Cache.Cache.RemoveAllCache(System.String)">
            <summary>
            删除指定开头的所有缓存
            </summary>
        </member>
        <member name="M:Base.Cache.Cache.Dispose">
            <summary>
            请除定义的DATATABLE变量
            </summary>
        </member>
        <member name="M:Base.Cache.Cache.clear(System.String)">
            <summary>
            传入一个全局变量的值，把其在全局变量中删除
            </summary>
            <param name="str">要删除的全局变量的名称</param>
        </member>
        <member name="M:Base.Cache.Cache.GetValue(System.String,System.String,System.Int32)">
            <summary>
            设置字符串
            </summary>
            <param name="Cachename">要保存的全局变量的名称</param>
            <param name="strsql">要执行的SQL语句</param>
            <param name="ntime">保存全局变量的时间</param>
            <returns></returns>
        </member>
        <member name="M:Base.Cache.Cache.GetValue(System.String,System.String,System.Int32,System.String)">
            <summary>
            设置字符串
            </summary>
            <param name="Cachename">要保存的全局变量的名称</param>
            <param name="strsql">要执行的SQL语句</param>
            <param name="ntime">保存全局变量的时间</param>
            <param name="sqllink">要链接的数据库</param>
            <returns></returns>
        </member>
        <member name="M:Base.Cache.Cache.GetValue(System.String,System.String,System.Int32,System.String,System.Data.Common.DbParameter[])">
            <summary>
            设置字符串
            </summary>
            <param name="Cachename">要保存的全局变量的名称</param>
            <param name="strsql">要执行的SQL语句</param>
            <param name="ntime">保存全局变量的时间</param>
            <param name="sqllink">要链接的数据库</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Cache.Cache.GetValue(System.String,System.String,System.Int32,Base.Conn.Database,System.Data.Common.DbParameter[])">
            <summary>
            设置字符串
            </summary>
            <param name="Cachename">要保存的全局变量的名称</param>
            <param name="strsql">要执行的SQL语句</param>
            <param name="ntime">保存全局变量的时间</param>
            <param name="db">数据库连接对象</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Cache.Cache.GetTextFile(System.String,System.String)">
            <summary>
            返回DataTable 根据文件  (容易被移除）
            </summary>
            <param name="Cachename">缓存名称</param>
            <param name="filename">文件绝对地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Cache.Cache.GetFile(System.String,System.String,System.String)">
            <summary>
            返回DataTable 根据文件  (不容易移除）
            </summary>
            <param name="Cachename">缓存名称</param>
            <param name="filenameJG">DataTable xml结构地址</param>
            <param name="filename">DataTable xml地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Cache.Cache.GetObject(System.String,System.Object,System.String)">
            <summary>
            把字符跟文件关联  (不容易移除）
            </summary>
            <param name="Cachename">缓存名称</param>
            <param name="str">要存储的字段串</param>
            <param name="FileName">要关联的文件名(为空取，不为空保存）</param>
            <returns>string</returns>
        </member>
        <member name="M:Base.Cache.Cache.GetObject(System.String,System.Object,System.Int32)">
             <summary>
             把字符跟文件关联  (不容易移除）
             </summary>
             <param name="Cachename">缓存名称</param>
             <param name="str">要存储的字段串(为null时取）</param>
            <param name="ntime">保存的时间</param>
             <returns>string</returns>
        </member>
        <member name="M:Base.Cache.Cache.GetFile(System.String,System.String)">
            <summary>
            返回string 根据文件  (不容易移除）
            </summary>
            <param name="Cachename">缓存名称</param>
            <param name="filename">文件绝对地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Cache.Cache.GetModel``1(System.String,System.String,System.Int32)">
            <summary>
            读取
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Cachename"></param>
            <param name="strsql"></param>
            <param name="ntime"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Cache.Cache.GetModel``1(System.String,System.String,System.Int32,System.String)">
            <summary>
            读取
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Cachename"></param>
            <param name="strsql"></param>
            <param name="ntime"></param>
            <param name="sqllink"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Cache.Cache.GetModelList``1(System.String,System.String,System.Int32)">
            <summary>
            读取集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Cachename"></param>
            <param name="strsql"></param>
            <param name="ntime"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Cache.Cache.GetModelList``1(System.String,System.String,System.Int32,System.String)">
            <summary>
            读取集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Cachename"></param>
            <param name="strsql"></param>
            <param name="ntime"></param>
            <param name="sqllink"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Cache.Cache.getrows(System.String,System.String,System.Int32)">
            <summary>
            支持SQL语句。并且根据NTIME的设置保存到全局变量里
            </summary>
            <param name="Cachename">要保存的全局变量的名称</param>
            <param name="strsql">要执行的SQL语句</param>
            <param name="ntime">保存全局变量的时间</param>
            <returns>返回一个DATATABLE 有可能返回null</returns>
        </member>
        <member name="M:Base.Cache.Cache.getrows(System.String,System.String,System.Int32,System.String)">
            <summary>
            支持SQL语句。并且根据NTIME的设置保存到全局变量里
            </summary>
            <param name="Cachename">要保存的全局变量的名称</param>
            <param name="strsql">要执行的SQL语句</param>
            <param name="ntime">保存全局变量的时间</param>
            <param name="sqllink">要链接的数据库</param>
            <returns>返回一个DATATABLE 有可能返回null</returns>
        </member>
        <member name="P:Base.Cache.Cache.IsCache">
            <summary>
            获得是否缓存内数据
            </summary>
        </member>
        <member name="T:Base.Conn.DbHelper">
            <summary>
            数据库连接方式操作类
            </summary>
        </member>
        <member name="F:Base.Conn.DbHelper.providerName">
            <summary>
            连接类型
            </summary>
        </member>
        <member name="F:Base.Conn.DbHelper.connectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="M:Base.Conn.DbHelper.#ctor">
            <summary>
            初始化函数
            </summary>
        </member>
        <member name="M:Base.Conn.DbHelper.#ctor(System.String)">
            <summary>
            初始化函数
            </summary>
            <param name="SqlLinkStr">连接地址，可以是字符串，</param>
        </member>
        <member name="M:Base.Conn.DbHelper.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="SqlLinkStr">连接地址，可以是字符串，</param>
            <param name="SqlDataBaseType">连接数据库引擎的</param>
        </member>
        <member name="M:Base.Conn.DbHelper.DbHelperCreate(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="SqlLinkStr">连接地址，可以是字符串，</param>
            <param name="SqlDataBaseType">连接数据库引擎的</param>
        </member>
        <member name="M:Base.Conn.DbHelper.CreateConnection">
            <summary>
            建立连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.DbHelper.CreateCommand">
            <summary>
            建立Command
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.DbHelper.CreateSqlsCommand(System.String)">
            <summary>
            建立SqlsCommand
            </summary>
            <param name="sqls">语句</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.DbHelper.CreateProcCommand(System.String)">
            <summary>
            建立ProcCommand
            </summary>
            <param name="proc">命令</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.DbHelper.CreateParameter">
            <summary>
            建立Parameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.DbHelper.ParNameOnMySql(System.String)">
            <summary>
            如果是mysql的参数类型为?开头
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.DbHelper.CreateParameter(System.String,System.Object)">
            <summary>
            建立Parameter
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.DbHelper.CreateParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            建立Parameter
            </summary>
            <param name="name">名额</param>
            <param name="value">值</param>
            <param name="dbType">类型</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.DbHelper.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            建立Parameter
            </summary>
            <param name="name">名字</param>
            <param name="value">值</param>
            <param name="dbType">类型</param>
            <param name="size">大小</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.DbHelper.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            建立Parameter
            </summary>
            <param name="name">名字</param>
            <param name="value">值</param>
            <param name="dbType">类型</param>
            <param name="size">大小</param>
            <param name="Direction">输入输出属性</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.DbHelper.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            执行DbCommand
            </summary>
            <param name="cmd">DbCommand</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:Base.Conn.DbHelper.ExecuteDataTable(System.Data.Common.DbCommand)">
            <summary>
            执行DbCommand
            </summary>
            <param name="cmd">DbCommand</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:Base.Conn.DbHelper.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            执行DbCommand
            </summary>
            <param name="cmd">DbCommand</param>
            <returns>DbDataReader</returns>
        </member>
        <member name="M:Base.Conn.DbHelper.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            执行返回行数
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.DbHelper.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            执行返回结果第一行第一列
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.DbHelper.returnID(System.Data.Common.DbCommand,System.String@)">
            <summary>
            执行返回新增ID（适用于access，不适合97)
            </summary>
            <param name="cmd"></param>
            <param name="ErrMessage">返回错误</param>
            <returns></returns>
        </member>
        <member name="P:Base.Conn.DbHelper.ConnectionString">
            <summary>
            连接数据库的代码
            </summary>
        </member>
        <member name="P:Base.Conn.DbHelper.SqlLinkStr">
            <summary>
            获取连接字符串
            </summary>
        </member>
        <member name="P:Base.Conn.DbHelper.ProviderName">
            <summary>
            获取连接类型
            </summary>
        </member>
        <member name="T:Base.DataBase.FullText">
            <summary>
            全文检索(mssql)
            </summary>
        </member>
        <member name="M:Base.DataBase.FullText.ProviderName">
            <summary>
            获得连接类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.FullText.IsOpen">
            <summary>
            判断全文检索是否开启
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.FullText.Enable">
            <summary>
            打开全文检索
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.FullText.Disable">
            <summary>
            关闭全文检索
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.FullText.Create">
            <summary>
            建立唯一全文检索标识（name)字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.FullText.Rebulid">
            <summary>
            重建全文检索
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.FullText.Start_Full">
            <summary>
            启动全文目录填充
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.FullText.Stop">
            <summary>
            停止全文检索的填充
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.FullText.Drop">
            <summary>
            删除全文检索
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.FullText.TableCreate">
            <summary>
            建立唯一索引TableName必须填写
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.FullText.TableDrop">
            <summary>
            删除表索引TableName
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.FullText.TableAddColumn">
            <summary>
            为全文检索添加列TableName,ColumnName
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.FullText.TableDropColumn">
            <summary>
            删除全文检索列TableName,ColumnName
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.FullText.TableActivate">
            <summary>
            激活全文检索TableName
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.FullText.ListColumn">
            <summary>
            返回表的全文检索列
            </summary>
            <returns></returns>
        </member>
        <member name="P:Base.DataBase.FullText.SqlStr">
            <summary>
            设置DB连接字符串
            </summary>
        </member>
        <member name="P:Base.DataBase.FullText.ColumnName">
            <summary>
            列名字
            </summary>
        </member>
        <member name="P:Base.DataBase.FullText.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="T:Base.DataBase.Index">
            <summary>
            数据库索引
            </summary>
        </member>
        <member name="M:Base.DataBase.Index.Del(Base.Conn.Database,System.String,System.String)">
            <summary>
            删除索引
            </summary>
            <param name="db"></param>
            <param name="TableName"></param>
            <param name="IndexName"></param>
        </member>
        <member name="M:Base.DataBase.Index.Add(Base.Conn.Database,System.String,System.String,System.String,System.String)">
            <summary>
            添加索引
            </summary>
            <param name="db"></param>
            <param name="TableName">表名</param>
            <param name="IndexName">索引名称</param>
            <param name="Column1">参加</param>
            <param name="Column2">选项列</param>
        </member>
        <member name="T:Base.Conn.Json">
            <summary>
            JSON数据结构
            </summary>
        </member>
        <member name="M:Base.Conn.Json.DataTable2Json(System.Int32,System.Int32,System.Data.DataTable)">
            <summary>
            DataTable转Json
            </summary>
            <param name="page">当前第几页</param>
            <param name="total">总记录数</param>
            <param name="dt">DataTable</param>
        </member>
        <member name="M:Base.Conn.Json.DataTable2Json(System.Int32,System.Int32,System.Data.DataTable,Base.Conn.Json.ColumnsType)">
            <summary>
            DataTable转Json
            </summary>
            <param name="page">当前第几页</param>
            <param name="total">总记录数</param>
            <param name="dt">DataTable</param>
            <param name="ColumnsFun">委托函数(int 列位置,string 列名,string 列值)</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:Base.Conn.Json.DataTable2Json(System.Int32,System.Int32,System.Data.DataTable,Base.Conn.Json.ColumnsType,System.String)">
            <summary>
            DataTable转Json
            </summary>
            <param name="page">当前第几页</param>
            <param name="total">总记录数</param>
            <param name="dt">DataTable</param>
            <param name="ColumnsFun">委托函数(int 列位置,string 列名,string 列值)</param>
            <param name="SqlLinkStr">数据库连接</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:Base.Conn.Json.DataTable2Json(System.Int32,System.Int32,System.Data.DataTable,Base.Conn.Json.ColumnsType,System.String,System.Object[])">
            <summary>
            DataTable转Json
            </summary>
            <param name="page">当前第几页</param>
            <param name="total">总记录数</param>
            <param name="dt">DataTable</param>
            <param name="ColumnsFun">委托函数(int 列位置,string 列名,string 列值)</param>
            <param name="SqlLinkStr">数据库连接</param>
            <param name="obj">附加信息</param>
            <returns>返回字符串</returns>
        </member>
        <member name="T:Base.Conn.Json.ColumnsType">
            <summary>
            委托事件ColumnsType(int ColumnIndex, string ColumnName, string ColumnValue, Base.Conn.Database db,params object[] obj)
            </summary>
            <param name="ColumnIndex">列位置（从零开始)</param>
            <param name="dr"></param>
            <param name="ColumnName">列名</param>
            <param name="ColumnValue">列值</param>
            <param name="db">连接</param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Base.DataBase.MySql.FullText">
            <summary>
            全文检索
            </summary>
        </member>
        <member name="M:Base.DataBase.MySql.FullText.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="sqlstr"></param>
        </member>
        <member name="M:Base.DataBase.MySql.FullText.GetName(Base.Conn.Database)">
            <summary>
            创建的索引的名称
            </summary>
        </member>
        <member name="M:Base.DataBase.MySql.FullText.IsOpen">
            <summary>
            判断全文检索是否开启
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.FullText.Enable">
            <summary>
            打开全文检索
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.FullText.Disable">
            <summary>
            关闭全文检索
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.FullText.Create">
            <summary>
            建立唯一全文检索标识（name)字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.FullText.Rebulid">
            <summary>
            重建全文检索
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.FullText.Start_Full">
            <summary>
            启动全文目录填充
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.FullText.Stop">
            <summary>
            停止全文检索的填充
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.FullText.Drop">
            <summary>
            删除全文检索 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.FullText.TableCreate">
            <summary>
            建立唯一索引 alter table all_users add unique (username);
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.FullText.TableDrop">
            <summary>
            删除表索引
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.FullText.TableAddColumn">
            <summary>
            为全文检索添加列
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.FullText.TableDropColumn">
            <summary>
            删除全文检索列
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.FullText.TableActivate">
            <summary>
            激活全文检索
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.FullText.ListColumn">
            <summary>
            返回表的全文检索列
            </summary>
            <returns></returns>
        </member>
        <member name="P:Base.DataBase.MySql.FullText.SqlStr">
            <summary>
            设置DB连接字符串
            </summary>
        </member>
        <member name="P:Base.DataBase.MySql.FullText.ColumnName">
            <summary>
            列名字
            </summary>
        </member>
        <member name="P:Base.DataBase.MySql.FullText.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="T:Base.DataBase.MySql.Index">
            <summary>
            索引
            </summary>
        </member>
        <member name="M:Base.DataBase.MySql.Index.Del(Base.Conn.Database,System.String,System.String)">
            <summary>
            删除索引
            </summary>
            <param name="db"></param>
            <param name="TableName"></param>
            <param name="IndexName"></param>
        </member>
        <member name="M:Base.DataBase.MySql.Index.Add(Base.Conn.Database,System.String,System.String,System.String,System.String)">
            <summary>
            添加索引
            </summary>
            <param name="db"></param>
            <param name="TableName">表名</param>
            <param name="IndexName">索引名称</param>
            <param name="Column1">参加</param>
            <param name="Column2">选项列</param>
        </member>
        <member name="T:Base.DataBase.DataBaseInterface">
            <summary>
            接口
            </summary>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.GetMdbDbo">
            <summary>
            判断dbo返回还是用户ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.CreateDataBase(System.String)">
            <summary>
            建立数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.MdbIndex(System.String)">
            <summary>
            判断有没有自增例
            </summary>
            <param name="TableName"></param>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.CreateMdb(System.String)">
            <summary>
            建立数据表
            </summary>
            <param name="mname">表名</param>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.CreateMdbID(System.String)">
            <summary>
            建立数据表名（带ID自增例）
            </summary>
            <param name="mname">表名</param>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.DeleteMdb(System.String)">
            <summary>
            删除数据表
            </summary>
            <param name="mname">数据库名</param>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ModiMdbName(System.String,System.String)">
            <summary>
            数据表改名
            </summary>
            <param name="OldName">原表名</param>
            <param name="NewName">新表名</param>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ModiWordName(System.String,System.String,System.String)">
            <summary>
            修改数据表内字段名
            </summary>
            <param name="TableName">表名</param>
            <param name="OldWordName">原字段表名</param>
            <param name="NewWordName">新字段表名</param>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.CreateWordDefault(System.String,System.String,System.String)">
            <summary>
            修改字段的默认值
            </summary>
            <param name="tableName">表名</param>
            <param name="fieldName">字段名</param>
            <param name="DefaultValue">默认值</param>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.RestoreDataBase(System.String,System.String,System.String@,System.Boolean)">
            <summary>
            恢复数据库，可选择是否可以强制还原（即在其他人在用的时候，依然可以还原）(sqlserver)
            </summary>
            <param name="databasename">待还原的数据库名称</param>
            <param name="databasefile">带还原的备份文件的完全路径</param>
            <param name="errormessage">恢复数据库失败的信息</param>
            <param name="forceRestore">是否强制还原（恢复），如果为TRUE，则exec killspid '数据库名' 结束此数据库的进程，这样才能还原数据库</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.CopyDataTable(System.String,System.Data.DataTable)">
            <summary>
            把DataTable 值插入数据库(只适用于sqlserver)
            </summary>
            <param name="TableName"></param>
            <param name="dt"></param>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ExistsMdb(System.String)">
            <summary>
            判断表是否存在。
            </summary>
            <param name="Mname"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ReadName">
            <summary>
            获得库名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.BackupDatabase(System.String,System.String)">
            <summary>
            备份数据库
            </summary>
            <param name="TableName">数据表名</param>
            <param name="filename">文件名（绝对路径）</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.CreateWord(System.String,System.String,System.String,System.String)">
            <summary>
            建立字段
            </summary>
            <param name="mname"></param>
            <param name="wid"></param>
            <param name="dataType"></param>
            <param name="Default"></param>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.DeleteWord(System.String,System.String)">
            <summary>
            删除字段
            </summary>
            <param name="mname">表名</param>
            <param name="wid">字段名称</param>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.LengthWord(System.String,System.String,System.String)">
            <summary>
            修改字符串类型
            </summary>
            <param name="mname">表名</param>
            <param name="wid">字段名称</param>
            <param name="wtype">类型</param>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ReadDataBaseOption(System.String)">
            <summary>
            数据用户所有表
            </summary>
            <param name="s">选择项</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ReadDataBase">
            <summary>
            获得所有的表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ReadDataItem(System.String,System.String)">
            <summary>
            数据表中各字段组成下拉框
            </summary>
            <param name="DataBase">表名</param>
            <param name="s">选择项</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ReadDataBase(System.String)">
            <summary>
            获得库中所有字段
            </summary>
            <param name="TableName">数据库名称</param>
            <returns>名称,主键,类型,小数位置,全文,长度,默认值，默认值约束键，是否为空</returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ReadDataDescription(System.String,System.String)">
            <summary>
            获得字段的说明
            </summary>
            <param name="DataBase">表名</param>
            <param name="Wid">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ReadDataDescription(System.String)">
            <summary>
            获得所有的字段说明
            </summary>
            <param name="DataBase">表名</param>
            <returns>ObjType,objName,Name,Value</returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.AddDataDescription(System.String,System.String,System.String)">
            <summary>
            添加字段说明
            </summary>
            <param name="DataBase">数据库</param>
            <param name="Wid">字段</param>
            <param name="Des">说明</param>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.DelConstraint(System.String,System.String)">
            <summary>
            删除表内字段的约束
            </summary>
            <param name="DataBase">数据库</param>
            <param name="Wid">字段</param>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ModiyDataDescription(System.String,System.String,System.String)">
            <summary>
            修改字段说明
            </summary>
            <param name="DataBase">数据库</param>
            <param name="Wid">字段</param>
            <param name="Des">说明</param>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.DelDataDescription(System.String,System.String)">
            <summary>
            删除字段说明
            </summary>
            <param name="DataBase"></param>
            <param name="Wid"></param>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.DelDataDescription(System.String)">
            <summary>
            删除所有字段说明
            </summary>
            <param name="DataBase"></param>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ReadMdbMessage">
            <summary>
            读取数据库MDB的信息，返回名字，文件地址，大写，占用空间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ReadLogMessage">
            <summary>
            读取数据库Log的信息，返回名字，文件地址，大写，占用空间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.Compression">
            <summary>
            压缩数据库日志及MDB
            </summary>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ReadIndex(System.String)">
            <summary>
            读取某个表的索引记录(适用于2005)
            </summary>
            <param name="TableName">返回DataTable</param>
            <returns>name</returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ReadIndexRow(System.String,System.String)">
            <summary>
            读取某个表索引的记录信息(适用于2005)
            </summary>
            <param name="TableName">表名</param>
            <param name="IndexName">索引名</param>
            <returns>Id,Name,IsComputed,Descending(0升1降),IsIncluded(0是排序1包括列)</returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.DeleteIndex(System.String,System.String)">
            <summary>
            删除某个表的索引
            </summary>
            <param name="TableName">表名</param>
            <param name="IndexName">索引名</param>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ReadTableValuedFunction">
            <summary>
            读取所有的的表值函数
            </summary>
            <returns>Name,Urn,Schema,Function Type,CreateData</returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ReadScalarValuedFunction">
            <summary>
            获得所有标题值函数
            </summary>
            <returns>Name,Urn,Schema,Function Type,CreateData</returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ReadAggregateFunction">
            <summary>
            获得所有的的聚合函数
            </summary>
            <returns>Name,Urn,Schema,Function Type,CreateData</returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ReadStoredProcedure">
            <summary>
            获得所有的存储过程
            </summary>
            <returns>Name,Urn,Schema,CreateDate</returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ReadStoreFunctionContent(System.String)">
            <summary>
            读取存储过程或函数内容
            </summary>
            <returns>Text</returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.ReadAllStoreFunction">
            <summary>
            读取所有存储过程及函数内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.DelStore(System.String)">
            <summary>
            删除存储过程
            </summary>
            <param name="StoreName"></param>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.DelFunction(System.String)">
            <summary>
            删除函数
            </summary>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.GetVersion">
            <summary>
            获得版本8为2000 9为2005 10为2008
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.GetVersionMess">
            <summary>
            返回版本信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.DataTable2SQL(System.Data.DataTable,System.String,System.Collections.Hashtable)">
            <summary>
            全部把DataTable里数据（除主键外。转为插入语句）
            </summary>
            <param name="dt">DataTable</param>
            <param name="TableName">表名字</param>
            <param name="TableValue">已存在的Table表名</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.DataTable2SQLOne(System.Data.DataTable,System.String,System.Int32,System.Collections.Hashtable)">
            <summary>
            全部把DataTable里数据（除主键外。转为插入语句）
            </summary>
            <param name="dt">DataTable</param>
            <param name="TableName">表名字</param>
            <param name="DataRow_i">顺利</param>
            <param name="TableValue">已存在的Table表名</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBaseInterface.DataTable2SQL(System.Data.DataTable,System.String,System.Int32,System.Collections.Hashtable)">
            <summary>
            把DataTable里数据（除主键外。转为插入语句）
            </summary>
            <param name="dt">DataTable</param>
            <param name="TableName">表名字</param>
            <param name="DataRow_i">顺利</param>
            <param name="TableValue">已存在的Table表名</param>
        </member>
        <member name="T:Base.DataBase.DataWordType">
            <summary>
            数据库字符类型
            </summary>
        </member>
        <member name="M:Base.DataBase.DataWordType.#ctor(System.String)">
            <summary>
            实例
            </summary>
            <param name="SqlLink"></param>
        </member>
        <member name="M:Base.DataBase.DataWordType.#ctor(Base.DataBase.Difference.DataBaseType)">
            <summary>
            实例
            </summary>
            <param name="DbType"></param>
        </member>
        <member name="M:Base.DataBase.DataWordType.GetDataWordType(Base.DataBase.DataWordType.WordType)">
            <summary>
            根据类型获得字符串
            </summary>
            <param name="Wordtype"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataWordType.GetDataWordType(Base.DataBase.DataWordType.WordType,System.Int32)">
            <summary>
            根据类型获得字符串
            </summary>
            <param name="Wordtype"></param>
            <param name="Length"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataWordType.WordTypeString(System.String)">
            <summary>
            类型字符串转成类型
            </summary>
            <param name="String"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataWordType.SqlType(System.String,System.Int32)">
            <summary>
            Sql类型转换
            </summary>
            <param name="Type">字符串值</param>
            <param name="xscale">小数位置</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataWordType.GetDataWordTypeName(System.String)">
            <summary>
            返回名称
            </summary>
            <param name="TypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataWordType.GetDataWordTypeName(Base.DataBase.DataWordType.WordType)">
            <summary>
            返回名称
            </summary>
            <param name="WordType"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataWordType.GetDataWordType(Base.DataBase.DataWordType.WordType,System.Int32,System.Int32)">
            <summary>
            根据上面的类型返回相应的数据库类型
            </summary>
            <param name="Wordtype"></param>
            <param name="Length"></param>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataWordType.DataBaseToXml(System.String,System.String)">
            <summary>
            表结构生成XML文档
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataWordType.GetTimeType(System.String)">
            <summary>
            返回不同数据库时间
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataWordType.XmlToDataBaseValue(System.String,System.String)">
            <summary>
            读取XML结构生成数据表数据
            </summary>
            <param name="SqlLink"></param>
            <param name="XmlContent"></param>
            <returns>返回数据库名及后面跟着的记录信息（数据库名小写）</returns>
        </member>
        <member name="M:Base.DataBase.DataWordType.XmlToDataBaseValue(System.String,System.String,System.String)">
            <summary>
            读取XML结构生成数据表数据
            </summary>
            <param name="SqlLink"></param>
            <param name="XmlContent"></param>
            <returns>返回数据库名及后面跟着的记录信息（数据库名小写）</returns>
        </member>
        <member name="M:Base.DataBase.DataWordType.XmlToDataBase(System.String,System.String)">
            <summary>
            读取XML结构生成数据库
            </summary>
            <param name="SqlLink"></param>
            <param name="XmlContent"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataWordType.XmlToDataBase(System.String,System.String,System.String)">
            <summary>
            读取XML结构生成数据库
            </summary>
            <param name="SqlLink"></param>
            <param name="providerName">链接格式</param>
            <param name="XmlContent"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataWordType.ReadAttributesValue(System.Xml.XmlNode,System.String)">
            <summary>
            获得属性
            </summary>
            <param name="Node"></param>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="T:Base.DataBase.DataWordType.WordType">
            <summary>
            字符串类型
            </summary>
        </member>
        <member name="F:Base.DataBase.DataWordType.WordType.AutoID">
            <summary>
            自动编号_0
            </summary>
        </member>
        <member name="F:Base.DataBase.DataWordType.WordType.Int">
            <summary>
            数值类型_1
            </summary>
        </member>
        <member name="F:Base.DataBase.DataWordType.WordType.String">
            <summary>
            字符串_2
            </summary>
        </member>
        <member name="F:Base.DataBase.DataWordType.WordType.DateTime">
            <summary>
            时间_3
            </summary>
        </member>
        <member name="F:Base.DataBase.DataWordType.WordType.Ntext">
            <summary>
            字符集_4
            </summary>
        </member>
        <member name="F:Base.DataBase.DataWordType.WordType.Decimal">
            <summary>
            小数_5
            </summary>
        </member>
        <member name="F:Base.DataBase.DataWordType.WordType.Bool">
            <summary>
            布尔_6
            </summary>
        </member>
        <member name="F:Base.DataBase.DataWordType.WordType.Images">
            <summary>
            图片_7
            </summary>
        </member>
        <member name="T:Base.DataBase.Difference">
            <summary>
            差异
            </summary>
        </member>
        <member name="M:Base.DataBase.Difference.BigN(System.String)">
            <summary>
            判断返回是否带N
            </summary>
            <param name="SqlLink"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.Difference.CharIndex(System.String,System.String,System.String)">
            <summary>
            返回，位置信息，数量，>0后面
            </summary>
            <param name="SqlLink"></param>
            <param name="str1">字符串时，加''单引号</param>
            <param name="str2">字符串时，加''单引号</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.Difference.FullText(System.String,System.String,System.String,System.Boolean)">
            <summary>
            全文检索使用
            </summary>
            <param name="FieldName"></param>
            <param name="FiledValue"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.Difference.SelectTop(System.String,System.String)">
            <summary>
            不同数据库之间的TOP不同,单Select语句。按top 方式写即可。
            </summary>
            <param name="SqlLink"></param>
            <param name="SqlString"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.Difference.GetDataBaseType(System.String)">
            <summary>
            返回数据类型
            </summary>
            <param name="SqlLink"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.Difference.Ntext_IsNull(System.String,System.String,System.Boolean)">
            <summary>
            备注，Ntext字段 判断是否为空
            </summary>
            <param name="SqlLink">字符串连接</param>
            <param name="FieldName">字段名</param>
            <param name="IsNull">是否为空</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.Difference.RanDowID(System.String,System.String)">
            <summary>
            获得随机ID信息值
            </summary>
            <param name="SqlLink"></param>
            <param name="IdName"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.Difference.Time_GetTimeFormat(System.String)">
            <summary>
            返回不同数据库时间
            </summary>
            <param name="SqlLink"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.Difference.Time_GetTimeFormat(System.String,System.Boolean)">
            <summary>
            返回不同数据库时间
            </summary>
            <param name="SqlLink"></param>
            <param name="IsTime"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.Difference.Time_GetTimeFormat(Base.DataBase.Difference.DataBaseType,System.Boolean)">
            <summary>
            返回不同数据库时间
            </summary>
            <param name="DbType"></param>
            <param name="IsTime">IsTime</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.Difference.Time_GetDatediff(System.String,Base.DataBase.Difference.Time_DateDiffParameter,System.String,System.String)">
            <summary>
            返回Datediff不同数据库的比较方式
            </summary>
            <param name="SqlLink">数据库连接</param>
            <param name="Parameter1">参数1，d,y,m</param>
            <param name="Parameter2">参数2，比较</param>
            <param name="Parameter3">参数3，比较</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.Difference.Time_Format(System.String,System.String)">
            <summary>
            输出年月日（sql)
            </summary>
            <param name="SqlLink"></param>
            <param name="FieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.Difference.ToString(System.String,System.String)">
            <summary>
            把数字转成字符串
            </summary>
            <param name="SqlLink"></param>
            <param name="FieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.Difference.SplitJointString(System.String,System.String[])">
            <summary>
            拼接字符串
            </summary>
            <param name="SqlLink"></param>
            <param name="Str">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.Difference.GetProviderName(System.String)">
            <summary>
            获得返回
            </summary>
            <param name="SqlLink"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.Difference.DateDiffParameter1(Base.DataBase.Difference.DataBaseType,Base.DataBase.Difference.Time_DateDiffParameter)">
            <summary>
            转换
            </summary>
            <param name="dbt"></param>
            <param name="Parameter"></param>
            <returns></returns>
        </member>
        <member name="T:Base.DataBase.Difference.DataBaseType">
            <summary>
            数据库字符串值
            </summary>
        </member>
        <member name="F:Base.DataBase.Difference.DataBaseType.SqlServer">
            <summary>
            sqlserver
            </summary>
        </member>
        <member name="F:Base.DataBase.Difference.DataBaseType.Access">
            <summary>
            access
            </summary>
        </member>
        <member name="F:Base.DataBase.Difference.DataBaseType.SqLite">
            <summary>
            sqlite
            </summary>
        </member>
        <member name="F:Base.DataBase.Difference.DataBaseType.MySql">
            <summary>
            mysql
            </summary>
        </member>
        <member name="F:Base.DataBase.Difference.DataBaseType.Oracle">
            <summary>
            oracle
            </summary>
        </member>
        <member name="T:Base.DataBase.Difference.Time_DateDiffParameter">
            <summary>
            参数
            </summary>
        </member>
        <member name="F:Base.DataBase.Difference.Time_DateDiffParameter.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="F:Base.DataBase.Difference.Time_DateDiffParameter.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:Base.DataBase.Difference.Time_DateDiffParameter.Week">
            <summary>
            周
            </summary>
        </member>
        <member name="F:Base.DataBase.Difference.Time_DateDiffParameter.Day">
            <summary>
            日
            </summary>
        </member>
        <member name="F:Base.DataBase.Difference.Time_DateDiffParameter.Hour">
            <summary>
            小时
            </summary>
        </member>
        <member name="F:Base.DataBase.Difference.Time_DateDiffParameter.Minute">
            <summary>
            分钟
            </summary>
        </member>
        <member name="F:Base.DataBase.Difference.Time_DateDiffParameter.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="T:Base.DataBase.Model.FunMessage">
            <summary>
            函数，方法，
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.FunMessage.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.FunMessage.Urn">
            <summary>
            urn
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.FunMessage.Schema">
            <summary>
            Schema
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.FunMessage.FunType">
            <summary>
            Function Type
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.FunMessage.CreateData">
            <summary>
            建立时间
            </summary>
        </member>
        <member name="T:Base.DataBase.Model.FunText">
            <summary>
            函数文本
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.FunText.Text">
            <summary>
            内容
            </summary>
        </member>
        <member name="T:Base.DataBase.Model.IndexWord">
            <summary>
            索引字段
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.IndexWord.Name">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.IndexWord.Descending">
            <summary>
            排序方式(0升1降)
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.IndexWord.IsIncluded">
            <summary>
            (1是排序0包括列)
            </summary>
        </member>
        <member name="T:Base.DataBase.Model.MdbMessage">
            <summary>
            数据库信息
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.MdbMessage.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.MdbMessage.FileName">
            <summary>
            文件地址
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.MdbMessage.Size">
            <summary>
            大小
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.MdbMessage.UsedSpace">
            <summary>
            使用的空间大小
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.MdbMessage.FileID">
            <summary>
            1为mdb，2为log
            </summary>
        </member>
        <member name="T:Base.DataBase.Model.Table">
            <summary>
            数据表
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.Table.Name">
            <summary>
            表名称
            </summary>
        </member>
        <member name="T:Base.DataBase.Model.TableIndex">
            <summary>
            表索引名称
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.TableIndex.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Base.DataBase.Model.Word">
            <summary>
            字段类型信息
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.Word.ColName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.Word.ColStat">
            <summary>
            是否主健
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.Word.TypeName">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.Word.Xscale">
            <summary>
            小数位数
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.Word.IsFulltextindexed">
            <summary>
            是否全文检索字段
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.Word.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.Word.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.Word.DefaultKeyName">
            <summary>
            默认值键名
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.Word.IsNullable">
            <summary>
            是否可为空
            </summary>
        </member>
        <member name="T:Base.DataBase.Model.WordDes">
            <summary>
            字段说明
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.WordDes.ObjType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.WordDes.ObjName">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.WordDes.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Base.DataBase.Model.WordDes.Value">
            <summary>
            说明文字
            </summary>
        </member>
        <member name="T:Base.DataBase.MsSql.DataBase">
            <summary>
            mssql数据库表操作
            </summary>
        </member>
        <member name="F:Base.DataBase.MsSql.DataBase.db">
            <summary>
            定义一个连接
            </summary>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.#ctor(Base.Conn.Database)">
            <summary>
            DataBase
            </summary>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.CreateDataBase(System.String)">
            <summary>
            建立数据库
            </summary>
            <param name="DataBaseName"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.GetMdbDbo">
            <summary>
            判断dbo返回还是用户ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.MdbIndex(System.String)">
            <summary>
            判断有没有自增例
            </summary>
            <param name="TableName"></param>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.RestoreDataBase(System.String,System.String,System.String@,System.Boolean)">
            <summary>
            恢复数据库，可选择是否可以强制还原（即在其他人在用的时候，依然可以还原）(sqlserver)
            </summary>
            <param name="databasename">待还原的数据库名称</param>
            <param name="databasefile">带还原的备份文件的完全路径</param>
            <param name="errormessage">恢复数据库失败的信息</param>
            <param name="forceRestore">是否强制还原（恢复），如果为TRUE，则exec killspid '数据库名' 结束此数据库的进程，这样才能还原数据库</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.CopyDataTable(System.String,System.Data.DataTable)">
            <summary>
            把DataTable 值插入数据库(只适用于sqlserver)
            </summary>
            <param name="TableName"></param>
            <param name="dt"></param>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.CreateMdb(System.String)">
            <summary>
            建立数据表
            </summary>
            <param name="mname">表名</param>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.CreateMdbID(System.String)">
            <summary>
            建立数据表(带ID主键）
            </summary>
            <param name="tableName">表名</param>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.DeleteMdb(System.String)">
            <summary>
            删除数据表
            </summary>
            <param name="mname">数据库名</param>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ModiMdbName(System.String,System.String)">
            <summary>
            修改数据表名
            </summary>
            <param name="OldName">原表名</param>
            <param name="NewName">新表名</param>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ModiWordName(System.String,System.String,System.String)">
            <summary>
            修改数据表内字段名
            </summary>
            <param name="TableName">表名</param>
            <param name="OldWordName">原字段表名</param>
            <param name="NewWordName">新字段表名</param>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.CreateWordDefault(System.String,System.String,System.String)">
            <summary>
            修改字段的默认值
            </summary>
            <param name="tableName">表名</param>
            <param name="fieldName">字段名</param>
            <param name="DefaultValue">默认值</param>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ExistsMdb(System.String)">
            <summary>
            判断表是否存在。
            </summary>
            <param name="Mname"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ReadName">
            <summary>
            获得库名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.BackupDatabase(System.String,System.String)">
            <summary>
            备份数据库
            </summary>
            <param name="TableName">数据表名</param>
            <param name="filename">文件名（绝对路径）</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.CreateWord(System.String,System.String,System.String,System.String)">
            <summary>
            建立字段
            </summary>
            <param name="mname"></param>
            <param name="wid"></param>
            <param name="dataType"></param>
            <param name="Default"></param>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.DeleteWord(System.String,System.String)">
            <summary>
            删除字段
            </summary>
            <param name="mname">表名</param>
            <param name="wid">字段名称</param>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.LengthWord(System.String,System.String,System.String)">
            <summary>
            修改字符串类型
            </summary>
            <param name="mname">表名</param>
            <param name="wid">字段名称</param>
            <param name="wtype">类型</param>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ReadDataBaseOption(System.String)">
            <summary>
            数据用户所有表
            </summary>
            <param name="s">选择项</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ReadDataBase">
            <summary>
            获得所有的表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ReadDataItem(System.String,System.String)">
            <summary>
            数据表中各字段组成下拉框
            </summary>
            <param name="DataBase">表名</param>
            <param name="s">选择项</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ReadDataBase(System.String)">
            <summary>
            获得库中所有字段
            </summary>
            <param name="TableName">数据库名称</param>
            <returns>名称,主键,类型,小数位置,全文,长度,默认值，默认值约束键，是否为空</returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ReadDataDescription(System.String,System.String)">
            <summary>
            获得字段的说明
            </summary>
            <param name="DataBase">表名</param>
            <param name="Wid">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ReadDataDescription(System.String)">
            <summary>
            获得所有的字段说明
            </summary>
            <param name="TableName">表名</param>
            <returns>ObjType,objName,Name,Value</returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.DataDescriptionExist(System.String,System.String)">
            <summary>
            判断一个字段的说明是否存在，不存在为真
            </summary>
            <param name="DataBase">表名</param>
            <param name="Wid">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.AddDataDescription(System.String,System.String,System.String)">
            <summary>
            添加字段说明
            </summary>
            <param name="DataBase">数据库</param>
            <param name="Wid">字段</param>
            <param name="Des">说明</param>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.DelConstraint(System.String,System.String)">
            <summary>
            删除字段的约束信息
            </summary>
            <param name="tableName">表名</param>
            <param name="fieldName">字段名</param>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ModiyDataDescription(System.String,System.String,System.String)">
            <summary>
            修改字段说明
            </summary>
            <param name="DataBase">数据库</param>
            <param name="Wid">字段</param>
            <param name="Des">说明</param>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.DelDataDescription(System.String,System.String)">
            <summary>
            删除字段说明
            </summary>
            <param name="DataBase"></param>
            <param name="Wid"></param>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.DelDataDescription(System.String)">
            <summary>
            删除所有字段说明
            </summary>
            <param name="DataBase"></param>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ReadMdbMessage">
            <summary>
            读取数据库MDB的信息，返回名字，文件地址，大写，占用空间
            </summary>
            <returns>无时Model为空</returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ReadLogMessage">
            <summary>
            读取数据库Log的信息，返回名字，文件地址，大写，占用空间
            </summary>
            <returns>无时返回null</returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.Compression">
            <summary>
            压缩数据库日志及MDB
            </summary>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ReadIndex(System.String)">
            <summary>
            读取某个表的索引记录(适用于2005)
            </summary>
            <param name="TableName">返回DataTable</param>
            <returns>name</returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ReadIndexRow(System.String,System.String)">
            <summary>
            读取某个表索引的记录信息（只返回非聚焦索引信息）
            </summary>
            <param name="TableName">表名</param>
            <param name="IndexName">索引名</param>
            <returns>Name,Descending(0升1降),IsIncluded(1是排序0包括列)</returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.DeleteIndex(System.String,System.String)">
            <summary>
            删除某个表的索引
            </summary>
            <param name="TableName">表名</param>
            <param name="IndexName">索引名</param>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ReadType(System.String,System.String,System.String)">
            <summary>
            根据字符返回类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ReadTableValuedFunction">
            <summary>
            读取所有的的表值函数
            </summary>
            <returns>Name,Urn,Schema,Function Type,CreateData</returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ReadScalarValuedFunction">
            <summary>
            获得所有标题值函数
            </summary>
            <returns>Name,Urn,Schema,Function Type,CreateData</returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ReadAggregateFunction">
            <summary>
            获得所有的的聚合函数
            </summary>
            <returns>Name,Urn,Schema,Function Type,CreateData</returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ReadStoredProcedure">
            <summary>
            获得所有的存储过程
            </summary>
            <returns>Name,Urn,Schema,CreateDate</returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ReadStoreFunctionContent(System.String)">
            <summary>
            读取存储过程或函数内容
            </summary>
            <returns>Text</returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.ReadAllStoreFunction">
            <summary>
            读取所有存储过程及函数内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.DelStore(System.String)">
            <summary>
            删除存储过程
            </summary>
            <param name="StoreName"></param>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.DelFunction(System.String)">
            <summary>
            删除函数
            </summary>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.GetVersion">
            <summary>
            获得版本8为2000 9为2005 10为2008
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.GetVersionMess">
            <summary>
            返回版本信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.DataTable2SQL(System.Data.DataTable,System.String,System.Collections.Hashtable)">
            <summary>
            全部把DataTable里数据（除主键外。转为插入语句）
            </summary>
            <param name="dt">DataTable</param>
            <param name="TableName">表名字</param>
            <param name="TableValue">已存在的Table表名</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.DataTable2SQLOne(System.Data.DataTable,System.String,System.Int32,System.Collections.Hashtable)">
            <summary>
            全部把DataTable里数据（除主键外。转为插入语句）
            </summary>
            <param name="dt">DataTable</param>
            <param name="TableName">表名字</param>
            <param name="DataRow_i">顺利</param>
            <param name="TableValue">已存在的Table表名</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.DataBase.DataTable2SQL(System.Data.DataTable,System.String,System.Int32,System.Collections.Hashtable)">
            <summary>
            把DataTable里数据（除主键外。转为插入语句）
            </summary>
            <param name="dt">DataTable</param>
            <param name="TableName">表名字</param>
            <param name="DataRow_i">顺利</param>
            <param name="TableValue">已存在的Table表名</param>
        </member>
        <member name="T:Base.DataBase.MsSql.FullText">
            <summary>
            msqql的全文检索
            </summary>
        </member>
        <member name="M:Base.DataBase.MsSql.FullText.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="sqlstr"></param>
        </member>
        <member name="M:Base.DataBase.MsSql.FullText.GetName(Base.Conn.Database)">
            <summary>
            创建的索引的名称
            </summary>
        </member>
        <member name="M:Base.DataBase.MsSql.FullText.IsOpen">
            <summary>
            判断全文检索是否开启
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.FullText.Enable">
            <summary>
            打开全文检索
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.FullText.Disable">
            <summary>
            关闭全文检索
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.FullText.Create">
            <summary>
            建立唯一全文检索标识（name)字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.FullText.Rebulid">
            <summary>
            重建全文检索
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.FullText.Start_Full">
            <summary>
            启动全文目录填充
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.FullText.Stop">
            <summary>
            停止全文检索的填充
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.FullText.Drop">
            <summary>
            删除全文检索
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.FullText.TableCreate">
            <summary>
            建立唯一索引
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.FullText.TableDrop">
            <summary>
            删除表索引
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.FullText.TableAddColumn">
            <summary>
            为全文检索添加列
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.FullText.TableDropColumn">
            <summary>
            删除全文检索列
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.FullText.TableActivate">
            <summary>
            激活全文检索
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MsSql.FullText.ListColumn">
            <summary>
            返回表的全文检索列
            </summary>
            <returns></returns>
        </member>
        <member name="P:Base.DataBase.MsSql.FullText.SqlStr">
            <summary>
            设置DB连接字符串
            </summary>
        </member>
        <member name="P:Base.DataBase.MsSql.FullText.ColumnName">
            <summary>
            列名字
            </summary>
        </member>
        <member name="P:Base.DataBase.MsSql.FullText.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="T:Base.DataBase.MsSql.Index">
            <summary>
            数据库索引（非聚集 mssql）
            </summary>
        </member>
        <member name="M:Base.DataBase.MsSql.Index.Del(Base.Conn.Database,System.String,System.String)">
            <summary>
            删除索引
            </summary>
            <param name="db"></param>
            <param name="TableName"></param>
            <param name="IndexName"></param>
        </member>
        <member name="M:Base.DataBase.MsSql.Index.Add(Base.Conn.Database,System.String,System.String,System.String,System.String)">
            <summary>
            添加索引
            </summary>
            <param name="db"></param>
            <param name="TableName">表名</param>
            <param name="IndexName">索引名称</param>
            <param name="Column1">参加</param>
            <param name="Column2">选项列</param>
        </member>
        <member name="T:Base.DataBase.DataBase">
             <summary>
            DataBase
             </summary>
        </member>
        <member name="F:Base.DataBase.DataBase.db">
            <summary>
            定义一个连接
            </summary>
        </member>
        <member name="M:Base.DataBase.DataBase.DataBaseSet">
            <summary>
            加载参数信息
            </summary>
        </member>
        <member name="M:Base.DataBase.DataBase.#ctor">
            <summary>
            DataBase
            </summary>
        </member>
        <member name="M:Base.DataBase.DataBase.#ctor(System.String)">
            <summary>
            DataBase
            </summary>
            <param name="SqlLink">数据库连接字符串</param>
        </member>
        <member name="M:Base.DataBase.DataBase.#ctor(System.String,System.String)">
            <summary>
            DataBase
            </summary>
            <param name="SqlLink">数据库连接字符串</param>
            <param name="providerName">providerName</param>
        </member>
        <member name="M:Base.DataBase.DataBase.GetMdbDbo">
            <summary>
            判断dbo返回还是用户ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBase.CreateDataBase(System.String)">
            <summary>
            建立数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBase.MdbIndex(System.String)">
            <summary>
            判断有没有自增例
            </summary>
            <param name="TableName"></param>
        </member>
        <member name="M:Base.DataBase.DataBase.CreateMdb(System.String)">
            <summary>
            建立数据表
            </summary>
            <param name="mname">表名</param>
        </member>
        <member name="M:Base.DataBase.DataBase.CreateMdbID(System.String)">
            <summary>
            建立数据表名（带ID自增例）
            </summary>
            <param name="mname">表名</param>
        </member>
        <member name="M:Base.DataBase.DataBase.DeleteMdb(System.String)">
            <summary>
            删除数据表
            </summary>
            <param name="mname">数据库名</param>
        </member>
        <member name="M:Base.DataBase.DataBase.ModiMdbName(System.String,System.String)">
            <summary>
            数据表改名
            </summary>
            <param name="OldName">原表名</param>
            <param name="NewName">新表名</param>
        </member>
        <member name="M:Base.DataBase.DataBase.ModiWordName(System.String,System.String,System.String)">
            <summary>
            修改数据表内字段名
            </summary>
            <param name="TableName">表名</param>
            <param name="OldWordName">原字段表名</param>
            <param name="NewWordName">新字段表名</param>
        </member>
        <member name="M:Base.DataBase.DataBase.CreateWordDefault(System.String,System.String,System.String)">
            <summary>
            修改字段的默认值
            </summary>
            <param name="tableName">表名</param>
            <param name="fieldName">字段名</param>
            <param name="DefaultValue">默认值</param>
        </member>
        <member name="M:Base.DataBase.DataBase.RestoreDataBase(System.String,System.String,System.String@,System.Boolean)">
            <summary>
            恢复数据库，可选择是否可以强制还原（即在其他人在用的时候，依然可以还原）(sqlserver)
            </summary>
            <param name="databasename">待还原的数据库名称</param>
            <param name="databasefile">带还原的备份文件的完全路径</param>
            <param name="errormessage">恢复数据库失败的信息</param>
            <param name="forceRestore">是否强制还原（恢复），如果为TRUE，则exec killspid '数据库名' 结束此数据库的进程，这样才能还原数据库</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBase.CopyDataTable(System.String,System.Data.DataTable)">
            <summary>
            把DataTable 值插入数据库(只适用于sqlserver)
            </summary>
            <param name="TableName"></param>
            <param name="dt"></param>
        </member>
        <member name="M:Base.DataBase.DataBase.ExistsMdb(System.String)">
            <summary>
            判断表是否存在。
            </summary>
            <param name="Mname"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBase.ReadName">
            <summary>
            获得库名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBase.BackupDatabase(System.String,System.String)">
            <summary>
            备份数据库
            </summary>
            <param name="TableName">数据表名</param>
            <param name="filename">文件名（绝对路径）</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBase.CreateWord(System.String,System.String,System.String,System.String)">
            <summary>
            建立字段
            </summary>
            <param name="mname"></param>
            <param name="wid"></param>
            <param name="dataType"></param>
            <param name="Default"></param>
        </member>
        <member name="M:Base.DataBase.DataBase.DeleteWord(System.String,System.String)">
            <summary>
            删除字段
            </summary>
            <param name="mname">表名</param>
            <param name="wid">字段名称</param>
        </member>
        <member name="M:Base.DataBase.DataBase.LengthWord(System.String,System.String,System.String)">
            <summary>
            修改字符串类型
            </summary>
            <param name="mname">表名</param>
            <param name="wid">字段名称</param>
            <param name="wtype">类型</param>
        </member>
        <member name="M:Base.DataBase.DataBase.ReadDataBaseOption(System.String)">
            <summary>
            数据用户所有表
            </summary>
            <param name="s">选择项</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBase.ReadDataBase">
            <summary>
            获得所有的表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBase.ReadDataItem(System.String,System.String)">
            <summary>
            数据表中各字段组成下拉框
            </summary>
            <param name="DataBase">表名</param>
            <param name="s">选择项</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBase.ReadDataBase(System.String)">
            <summary>
            获得库中所有字段
            </summary>
            <param name="TableName">数据库名称</param>
            <returns>名称,主键,类型,小数位置,全文,长度,默认值，默认值约束键，是否为空</returns>
        </member>
        <member name="M:Base.DataBase.DataBase.ReadDataDescription(System.String,System.String)">
            <summary>
            获得字段的说明
            </summary>
            <param name="DataBase">表名</param>
            <param name="Wid">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBase.ReadDataDescription(System.String)">
            <summary>
            获得所有的字段说明
            </summary>
            <param name="DataBase">表名</param>
            <returns>ObjType,objName,Name,Value</returns>
        </member>
        <member name="M:Base.DataBase.DataBase.AddDataDescription(System.String,System.String,System.String)">
            <summary>
            添加字段说明
            </summary>
            <param name="DataBase">数据库</param>
            <param name="Wid">字段</param>
            <param name="Des">说明</param>
        </member>
        <member name="M:Base.DataBase.DataBase.DelConstraint(System.String,System.String)">
            <summary>
            删除表内字段的约束
            </summary>
            <param name="DataBase">数据库</param>
            <param name="Wid">字段</param>
        </member>
        <member name="M:Base.DataBase.DataBase.ModiyDataDescription(System.String,System.String,System.String)">
            <summary>
            修改字段说明
            </summary>
            <param name="DataBase">数据库</param>
            <param name="Wid">字段</param>
            <param name="Des">说明</param>
        </member>
        <member name="M:Base.DataBase.DataBase.DelDataDescription(System.String,System.String)">
            <summary>
            删除字段说明
            </summary>
            <param name="DataBase"></param>
            <param name="Wid"></param>
        </member>
        <member name="M:Base.DataBase.DataBase.DelDataDescription(System.String)">
            <summary>
            删除所有字段说明
            </summary>
            <param name="DataBase"></param>
        </member>
        <member name="M:Base.DataBase.DataBase.ReadMdbMessage">
            <summary>
            读取数据库MDB的信息，返回名字，文件地址，大写，占用空间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBase.ReadLogMessage">
            <summary>
            读取数据库Log的信息，返回名字，文件地址，大写，占用空间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBase.Compression">
            <summary>
            压缩数据库日志及MDB
            </summary>
        </member>
        <member name="M:Base.DataBase.DataBase.ReadIndex(System.String)">
            <summary>
            读取某个表的索引记录(适用于2005)
            </summary>
            <param name="TableName">返回DataTable</param>
            <returns>name</returns>
        </member>
        <member name="M:Base.DataBase.DataBase.ReadIndexRow(System.String,System.String)">
            <summary>
            读取某个表索引的记录信息(适用于2005)
            </summary>
            <param name="TableName">表名</param>
            <param name="IndexName">索引名</param>
            <returns>Id,Name,IsComputed,Descending(0升1降),IsIncluded(0是排序1包括列)</returns>
        </member>
        <member name="M:Base.DataBase.DataBase.DeleteIndex(System.String,System.String)">
            <summary>
            删除某个表的索引
            </summary>
            <param name="TableName">表名</param>
            <param name="IndexName">索引名</param>
        </member>
        <member name="M:Base.DataBase.DataBase.ReadTableValuedFunction">
            <summary>
            读取所有的的表值函数
            </summary>
            <returns>Name,Urn,Schema,Function Type,CreateData</returns>
        </member>
        <member name="M:Base.DataBase.DataBase.ReadScalarValuedFunction">
            <summary>
            获得所有标题值函数
            </summary>
            <returns>Name,Urn,Schema,Function Type,CreateData</returns>
        </member>
        <member name="M:Base.DataBase.DataBase.ReadAggregateFunction">
            <summary>
            获得所有的的聚合函数
            </summary>
            <returns>Name,Urn,Schema,Function Type,CreateData</returns>
        </member>
        <member name="M:Base.DataBase.DataBase.ReadStoredProcedure">
            <summary>
            获得所有的存储过程
            </summary>
            <returns>Name,Urn,Schema,CreateDate</returns>
        </member>
        <member name="M:Base.DataBase.DataBase.ReadStoreFunctionContent(System.String)">
            <summary>
            读取存储过程或函数内容
            </summary>
            <returns>Text</returns>
        </member>
        <member name="M:Base.DataBase.DataBase.ReadAllStoreFunction">
            <summary>
            读取所有存储过程及函数内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBase.DelStore(System.String)">
            <summary>
            删除存储过程
            </summary>
            <param name="StoreName"></param>
        </member>
        <member name="M:Base.DataBase.DataBase.DelFunction(System.String)">
            <summary>
            删除函数
            </summary>
        </member>
        <member name="M:Base.DataBase.DataBase.GetVersion">
            <summary>
            获得版本8为2000 9为2005 10为2008
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBase.GetVersionMess">
            <summary>
            返回版本信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBase.DataTable2SQL(System.Data.DataTable,System.String,System.Collections.Hashtable)">
            <summary>
            全部把DataTable里数据（除主键外。转为插入语句）
            </summary>
            <param name="dt">DataTable</param>
            <param name="TableName">表名字</param>
            <param name="TableValue">已存在的Table表名</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBase.DataTable2SQLOne(System.Data.DataTable,System.String,System.Int32,System.Collections.Hashtable)">
            <summary>
            全部把DataTable里数据（除主键外。转为插入语句）
            </summary>
            <param name="dt">DataTable</param>
            <param name="TableName">表名字</param>
            <param name="DataRow_i">顺利</param>
            <param name="TableValue">已存在的Table表名</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.DataBase.DataTable2SQL(System.Data.DataTable,System.String,System.Int32,System.Collections.Hashtable)">
            <summary>
            把DataTable里数据（除主键外。转为插入语句）
            </summary>
            <param name="dt">DataTable</param>
            <param name="TableName">表名字</param>
            <param name="DataRow_i">顺利</param>
            <param name="TableValue">已存在的Table表名</param>
        </member>
        <member name="M:Base.DataBase.DataBase.Dispose">
            <summary>
            注销事件
            </summary>
        </member>
        <member name="M:Base.DataBase.DataBase.System#IDisposable#Dispose">
            <summary>
            注销事件
            </summary>
        </member>
        <member name="T:Base.Conn.Database">
             <summary>
            SQLHelper 的摘要说明
             </summary>
        </member>
        <member name="F:Base.Conn.Database.ErrMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="M:Base.Conn.Database.ModiySQL(System.String)">
            <summary>
            修改连接字符串
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Base.Conn.Database.ViewSQL">
            <summary>
            获得连接字符串
            </summary>
        </member>
        <member name="M:Base.Conn.Database.ViewSQLConnectionString">
            <summary>
            获得连接字符串代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetSQL">
            <summary>
            获得连接字符串的数据库类型
            </summary>
        </member>
        <member name="M:Base.Conn.Database.#ctor">
            <summary>
            默认连接
            </summary>
        </member>
        <member name="M:Base.Conn.Database.#ctor(System.String)">
            <summary>
            连接字符串
            </summary>
            <param name="SqlLinkStr">连接字符串</param>
        </member>
        <member name="M:Base.Conn.Database.#ctor(System.String,System.String)">
            <summary>
            连接字符串
            </summary>
            <param name="SqlLinkStr">连接字符串</param>
            <param name="SqlDataBaseType">连接数据库的类型</param>
        </member>
        <member name="M:Base.Conn.Database.#ctor(System.String,System.String,System.String)">
            <summary>
            连接字符串
            </summary>
            <param name="SqlLinkStr">连接字符串</param>
            <param name="SqlDataBaseType">连接数据库的类型</param>
        </member>
        <member name="M:Base.Conn.Database.SetWebPath(System.String)">
            <summary>
            修改错误保存路径
            </summary>
            <param name="WebPath"></param>
        </member>
        <member name="M:Base.Conn.Database.OpenConn">
            <summary>
            判断是否打开连接了
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.Open">
            <summary>
            打开连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.Close">
            <summary>
            关闭数据库连接
            </summary>
        </member>
        <member name="M:Base.Conn.Database.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Base.Conn.Database.RunSql(System.String)">
            <summary>
            运行一个SQL 
            </summary>
            <param name="sql">SQL语句</param>
        </member>
        <member name="M:Base.Conn.Database.RunSql(System.String,System.Data.Common.DbParameter[])">
            <summary>
            运行一个SQL 
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Base.Conn.Database.RunSql_List(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            运行一个SQL 
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">参数</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Base.Conn.Database.RunProcToDataTable(System.String)">
            <summary>
            执行带参数的存储过程,返回datatable
            </summary>
            <param name="procName">存储过程的名称</param>
        </member>
        <member name="M:Base.Conn.Database.RunProcToDataTable(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行带参数的存储过程,返回datatable
            </summary>
            <param name="procName">存储过程的名称</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.RunProcToDataTable_List(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行带参数的存储过程,返回datatable
            </summary>
            <param name="procName">存储过程的名称</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.RunProc(System.String)">
            <summary>
            执行带参数的存储过程
            </summary>
            <param name="procName">存储过程的名称</param>
        </member>
        <member name="M:Base.Conn.Database.RunProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行带参数的存储过程
            </summary>
            <param name="procName">存储过程的名称</param>
            <param name="ps">参数</param>
        </member>
        <member name="M:Base.Conn.Database.RunProc_List(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行带参数的存储过程
            </summary>
            <param name="procName">存储过程的名称</param>
            <param name="ps">参数</param>
        </member>
        <member name="M:Base.Conn.Database.RunProcForObject(System.String)">
            <summary>
            执行带参数的存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.RunProcForObject(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行带参数的存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.RunProcForObject_List(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行带参数的存储过程
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.RunProcToReader(System.String)">
            <summary>
            执行带参数的存储过程,返回datareader
            </summary>
            <param name="procName">存储过程名称</param>
        </member>
        <member name="M:Base.Conn.Database.RunProcToReader(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行带参数的存储过程,返回datareader
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="ps">参数</param>
        </member>
        <member name="M:Base.Conn.Database.RunProcToReader_List(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行带参数的存储过程,返回datareader
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="ps">参数</param>
        </member>
        <member name="M:Base.Conn.Database.CreateProc(System.String)">
            <summary>
            构造SqlCommand
            </summary>
            <param name="procName">存储过程名称</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.CreateProc(System.String,System.Data.Common.DbParameter[])">
            <summary>
            构造SqlCommand
            </summary>
            <param name="procName">存储过程名称</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.CreateSql(System.String@)">
            <summary>
            构造SqlCommand
            </summary>
            <param name="procName">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.CreateSql(System.String@,System.Data.Common.DbParameter[])">
            <summary>
            构造SqlCommand
            </summary>
            <param name="procName">SQL语句</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetRow(System.String)">
            <summary>
            获得一行数据
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetRow(System.String,System.Data.Common.DbParameter[])">
            <summary>
            获得一行数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetRow_List(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            获得一行数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetNewID(System.String)">
            <summary>
            插入一条数据
            </summary>
            <param name="sql">SQL语句</param>
            <returns>返回自动产生的标识</returns>
        </member>
        <member name="M:Base.Conn.Database.GetNewID(System.String,System.Data.Common.DbParameter[])">
            <summary>
            插入一条数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">参数</param>
            <returns>返回自动产生的标识</returns>
        </member>
        <member name="M:Base.Conn.Database.GetNewID_List(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            插入一条数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">参数</param>
            <returns>返回自动产生的标识</returns>
        </member>
        <member name="M:Base.Conn.Database.ExeSql(System.String)">
             <summary>
            执行SQL语句不返回任何值
             </summary>
             <param name="sql">传入SQL语句</param>
        </member>
        <member name="M:Base.Conn.Database.ExeSql(System.String,System.Data.Common.DbParameter[])">
             <summary>
            执行SQL语句不返回任何值
             </summary>
             <param name="sql">传入SQL语句</param>
             <param name="ps">sql参数</param>
        </member>
        <member name="M:Base.Conn.Database.ExeSql_List(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
             <summary>
            执行SQL语句不返回任何值
             </summary>
             <param name="sql">传入SQL语句</param>
             <param name="ps">sql参数</param>
        </member>
        <member name="M:Base.Conn.Database.GetData(System.String)">
            <summary>
            执行select 操作
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetData(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行select 操作
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetData_List(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行select 操作
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetModelList``1(System.String)">
            <summary>
            执行select 操作返回List Model
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetModelList``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行select 操作返回List Model
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetModelList``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行select 操作返回List Model
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetModel``1(System.String)">
            <summary>
            执行select 操作返回Model
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetModel``1(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行select 操作返回List Model
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetModel``1(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行select 操作返回List Model
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetDr(System.String)">
            <summary>
            返回DataReader
            </summary>
            <param name="sql">传入一个SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetDr(System.String,System.Data.Common.DbParameter[])">
            <summary>
            返回DataReader
            </summary>
            <param name="sql">传入一个SQL语句</param>
            <param name="ps">执行参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetDr_List(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            返回DataReader
            </summary>
            <param name="sql">传入一个SQL语句</param>
            <param name="ps">执行参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetValue(System.String)">
            <summary>
            获得一个字段的值
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetValue(System.String,System.Data.Common.DbParameter[])">
            <summary>
            获得一个字段的值
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetValue_List(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            获得一个字段的值
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetRowCount(System.String)">
            <summary>
            返回受影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetRowCount(System.String,System.Data.Common.DbParameter[])">
            <summary>
            返回受影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">sql参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.GetRowCount_List(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            返回受影响的行数
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">sql参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.ExecuteReader(System.String)">
            <summary>
            执行SQL 一行一行地读取
            </summary>
            <param name="sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.ExecuteReader(System.String,System.Data.Common.DbParameter[])">
            <summary>
            执行SQL 一行一行地读取
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.ExecuteReader_List(System.String,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            执行SQL 一行一行地读取
            </summary>
            <param name="sql">SQL语句</param>
            <param name="ps">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.CreateParameter">
            <summary>
            建立参数（输入）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.CreateParameter(System.String,System.Object)">
            <summary>
            建立参数（输入）
            </summary>
            <param name="name">名字</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.CreateParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            建立参数（输入）
            </summary>
            <param name="name">名字</param>
            <param name="value">值</param>
            <param name="dbType">类型</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.CreateParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            建立参数（输出）
            </summary>
            <param name="name">名称</param>
            <param name="dbType">类型</param>
            <param name="size">大小</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.CreateParameter(System.String,System.String,System.Data.DbType,System.Int32)">
            <summary>
            建立参数（输入）
            </summary>
            <param name="name">名字</param>
            <param name="value">值</param>
            <param name="dbType">类型</param>
            <param name="size">大小</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            建立参数（输入）
            </summary>
            <param name="name">名字</param>
            <param name="value">值</param>
            <param name="dbType">类型</param>
            <param name="size">大小</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            建立参数（输入）
            </summary>
            <param name="name">名字</param>
            <param name="value">值</param>
            <param name="dbType">类型</param>
            <param name="size">大小</param>
            <param name="Direction">参数输入输出类型</param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.DataTable2Model``1(System.Data.DataTable)">
            <summary>
            把Data转成Model
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.DataRow2Model``1(System.Data.DataRow)">
            <summary>  
            通过DataRow 填充实体  
            </summary>  
            <typeparam name="T"></typeparam>  
            <param name="dr"></param>  
            <returns></returns>  
        </member>
        <member name="M:Base.Conn.Database.ErrMessageAdd(System.String,System.Data.Common.DbParameter[])">
            <summary>
            追加错误信息
            </summary>
            <param name="Sql"></param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Conn.Database.System#IDisposable#Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="F:Base.DataBase.MySql.DataBase.db">
            <summary>
            定义一个连接
            </summary>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.#ctor(Base.Conn.Database)">
            <summary>
            DataBase
            </summary>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.CreateDataBase(System.String)">
            <summary>
            建立数据库
            </summary>
            <param name="DataBaseName"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.GetMdbDbo">
            <summary>
            判断dbo返回还是用户ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.MdbIndex(System.String)">
            <summary>
            判断有没有自增例
            </summary>
            <param name="TableName"></param>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.RestoreDataBase(System.String,System.String,System.String@,System.Boolean)">
            <summary>
            恢复数据库，可选择是否可以强制还原（即在其他人在用的时候，依然可以还原）(sqlserver)
            </summary>
            <param name="databasename">待还原的数据库名称</param>
            <param name="databasefile">带还原的备份文件的完全路径</param>
            <param name="errormessage">恢复数据库失败的信息</param>
            <param name="forceRestore">是否强制还原（恢复），如果为TRUE，则exec killspid '数据库名' 结束此数据库的进程，这样才能还原数据库</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.CopyDataTable(System.String,System.Data.DataTable)">
            <summary>
            把DataTable 值插入数据库(只适用于sqlserver)
            </summary>
            <param name="TableName"></param>
            <param name="dt"></param>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.CreateMdb(System.String)">
            <summary>
            建立数据表
            </summary>
            <param name="mname">表名</param>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.CreateMdbID(System.String)">
            <summary>
            建立数据表(带ID主键）
            </summary>
            <param name="tableName">表名</param>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.DeleteMdb(System.String)">
            <summary>
            删除数据表
            </summary>
            <param name="mname">数据库名</param>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ModiMdbName(System.String,System.String)">
            <summary>
            修改数据表名
            </summary>
            <param name="OldName">原表名</param>
            <param name="NewName">新表名</param>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ModiWordName(System.String,System.String,System.String)">
            <summary>
            修改数据表内字段名
            </summary>
            <param name="TableName">表名</param>
            <param name="OldWordName">原字段表名</param>
            <param name="NewWordName">新字段表名</param>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.CreateWordDefault(System.String,System.String,System.String)">
            <summary>
            修改字段的默认值
            </summary>
            <param name="tableName">表名</param>
            <param name="fieldName">字段名</param>
            <param name="DefaultValue">默认值</param>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ExistsMdb(System.String)">
            <summary>
            判断表是否存在。
            </summary>
            <param name="Mname"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ReadName">
            <summary>
            获得库名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.BackupDatabase(System.String,System.String)">
            <summary>
            备份数据库
            </summary>
            <param name="TableName">数据表名</param>
            <param name="filename">文件名（绝对路径）</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.CreateWord(System.String,System.String,System.String,System.String)">
            <summary>
            建立字段
            </summary>
            <param name="mname"></param>
            <param name="wid"></param>
            <param name="dataType"></param>
            <param name="Default"></param>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.DeleteWord(System.String,System.String)">
            <summary>
            删除字段
            </summary>
            <param name="mname">表名</param>
            <param name="wid">字段名称</param>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.LengthWord(System.String,System.String,System.String)">
            <summary>
            修改字符串类型
            </summary>
            <param name="mname">表名</param>
            <param name="wid">字段名称</param>
            <param name="wtype">类型</param>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ReadDataBaseOption(System.String)">
            <summary>
            数据用户所有表
            </summary>
            <param name="s">选择项</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ReadDataBase">
            <summary>
            获得所有的表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ReadDataItem(System.String,System.String)">
            <summary>
            数据表中各字段组成下拉框
            </summary>
            <param name="DataBase">表名</param>
            <param name="s">选择项</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ReadDataBase(System.String)">
            <summary>
            获得表中所有字段
            </summary>
            <param name="TableName">数据库名称</param>
            <returns>名称,主键,类型,小数位置,全文,长度,默认值，默认值约束键，是否为空</returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ReadDataDescription(System.String,System.String)">
            <summary>
            获得字段的说明
            </summary>
            <param name="DataBase">表名</param>
            <param name="Wid">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ReadDataDescription(System.String)">
            <summary>
            获得所有的字段说明
            </summary>
            <param name="TableName">表名</param>
            <returns>ObjType,objName,Name,Value</returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.DataDescriptionExist(System.String,System.String)">
            <summary>
            判断一个字段的说明是否存在，不存在为真
            </summary>
            <param name="DataBase">表名</param>
            <param name="Wid">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.AddDataDescription(System.String,System.String,System.String)">
            <summary>
            添加字段说明
            </summary>
            <param name="DataBase">数据库</param>
            <param name="Wid">字段</param>
            <param name="Des">说明</param>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.DelConstraint(System.String,System.String)">
            <summary>
            删除字段的约束信息
            </summary>
            <param name="tableName">表名</param>
            <param name="fieldName">字段名</param>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ModiyDataDescription(System.String,System.String,System.String)">
            <summary>
            修改字段说明
            </summary>
            <param name="DataBase">数据库</param>
            <param name="Wid">字段</param>
            <param name="Des">说明</param>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.DelDataDescription(System.String,System.String)">
            <summary>
            删除字段说明
            </summary>
            <param name="DataBase"></param>
            <param name="Wid"></param>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.DelDataDescription(System.String)">
            <summary>
            删除所有字段说明
            </summary>
            <param name="DataBase"></param>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ReadMdbMessage">
            <summary>
            读取数据库MDB的信息，返回名字，文件地址，大写，占用空间
            </summary>
            <returns>无时Model为空</returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ReadLogMessage">
            <summary>
            读取数据库Log的信息，返回名字，文件地址，大写，占用空间
            </summary>
            <returns>无时返回null</returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.Compression">
            <summary>
            压缩数据库日志及MDB
            </summary>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ReadIndex(System.String)">
            <summary>
            读取某个表的索引记录(适用于2005)
            </summary>
            <param name="TableName">返回DataTable</param>
            <returns>name</returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ReadIndexRow(System.String,System.String)">
            <summary>
            读取某个表索引的记录信息（只返回非聚焦索引信息）
            </summary>
            <param name="TableName">表名</param>
            <param name="IndexName">索引名</param>
            <returns>Name,Descending(0升1降),IsIncluded(1是排序0包括列)</returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.DeleteIndex(System.String,System.String)">
            <summary>
            删除某个表的索引
            </summary>
            <param name="TableName">表名</param> alter table persons2 drop index war ;
            <param name="IndexName">索引名</param>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ReadType(System.String,System.String,System.String)">
            <summary>
            根据字符返回类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ReadTableValuedFunction">
            <summary>
            读取所有的的表值函数
            </summary>
            <returns>Name,Urn,Schema,Function Type,CreateData</returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ReadScalarValuedFunction">
            <summary>
            获得所有标题值函数
            </summary>
            <returns>Name,Urn,Schema,Function Type,CreateData</returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ReadAggregateFunction">
            <summary>
            获得所有的的聚合函数
            </summary>
            <returns>Name,Urn,Schema,Function Type,CreateData</returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ReadStoredProcedure">
            <summary>
            获得所有的存储过程
            </summary>
            <returns>Name,Urn,Schema,CreateDate</returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ReadStoreFunctionContent(System.String)">
            <summary>
            读取存储过程或函数内容
            </summary>
            <returns>Text</returns>, string PorF
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.ReadAllStoreFunction">
            <summary>
            读取所有存储过程及函数内容
            </summary>
            <returns></returns>string PorF
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.DelStore(System.String)">
            <summary>
            删除存储过程
            </summary>
            <param name="StoreName"></param>drop procedure  if exists pr_adsddddfsfsdd;
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.DelFunction(System.String)">
            <summary>
            删除函数
            </summary>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.GetVersion">
            <summary>
            获得版本8为2000 9为2005 10为2008
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.GetVersionMess">
            <summary>
            返回版本信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.DataTable2SQL(System.Data.DataTable,System.String,System.Collections.Hashtable)">
            <summary>
            全部把DataTable里数据（除主键外。转为插入语句）
            </summary>
            <param name="dt">DataTable</param>
            <param name="TableName">表名字</param>
            <param name="TableValue">已存在的Table表名</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.DataTable2SQLOne(System.Data.DataTable,System.String,System.Int32,System.Collections.Hashtable)">
            <summary>
            全部把DataTable里数据（除主键外。转为插入语句）
            </summary>
            <param name="dt">DataTable</param>
            <param name="TableName">表名字</param>
            <param name="DataRow_i">顺利</param>
            <param name="TableValue">已存在的Table表名</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.DataTable2SQL(System.Data.DataTable,System.String,System.Int32,System.Collections.Hashtable)">
            <summary>
            把DataTable里数据（除主键外。转为插入语句）
            </summary>
            <param name="dt">DataTable</param>
            <param name="TableName">表名字</param>
            <param name="DataRow_i">顺利</param>
            <param name="TableValue">已存在的Table表名</param>
        </member>
        <member name="M:Base.DataBase.MySql.DataBase.DefaultAndCommnet(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="TableName"></param>
            <param name="ColumnName"></param>
            <param name="sqlHalf"></param>
            <returns></returns>
        </member>
        <member name="T:Base.DataBase.OldDb.DataBase">
            <summary>
            mssql数据库表操作
            </summary>
        </member>
        <member name="F:Base.DataBase.OldDb.DataBase.db">
            <summary>
            定义一个连接
            </summary>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.#ctor(Base.Conn.Database)">
            <summary>
            DataBase
            </summary>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.CreateDataBase(System.String)">
            <summary>
            建立数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.MdbIndex(System.String)">
            <summary>
            判断有没有自增例
            </summary>
            <param name="TableName"></param>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.CreateMdb(System.String)">
            <summary>
            建立数据表
            </summary>
            <param name="mname">表名</param>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.CreateMdbID(System.String)">
            <summary>
            建立数据表(带ID主键）
            </summary>
            <param name="tableName">表名</param>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.DeleteMdb(System.String)">
            <summary>
            删除数据表
            </summary>
            <param name="mname">数据库名</param>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.ModiMdbName(System.String,System.String)">
            <summary>
            修改数据表名
            </summary>
            <param name="OldName">原表名</param>
            <param name="NewName">新表名</param>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.ModiWordName(System.String,System.String,System.String)">
            <summary>
            修改库字段名称
            </summary>
            <param name="TableName"></param>
            <param name="OldWordName"></param>
            <param name="NewWordName"></param>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.ExistsMdb(System.String)">
            <summary>
            判断表是否存在。
            </summary>
            <param name="Mname"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.CreateWord(System.String,System.String,System.String,System.String)">
            <summary>
            建立字段
            </summary>
            <param name="mname"></param>
            <param name="wid"></param>
            <param name="dataType"></param>
            <param name="Default"></param>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.DeleteWord(System.String,System.String)">
            <summary>
            删除字段
            </summary>
            <param name="mname">表名</param>
            <param name="wid">字段名称</param>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.LengthWord(System.String,System.String,System.String)">
            <summary>
            修改字符串类型
            </summary>
            <param name="mname">表名</param>
            <param name="wid">字段名称</param>
            <param name="wtype">类型</param>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.ReadDataBaseOption(System.String)">
            <summary>
            数据用户所有表
            </summary>
            <param name="s">选择项</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.ReadDataBase">
            <summary>
            获得所有的表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.ReadDataItem(System.String,System.String)">
            <summary>
            数据表中各字段组成下拉框
            </summary>
            <param name="DataBase">表名</param>
            <param name="s">选择项</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.DataType(System.Int32,System.String)">
            <summary>
            返回数字对应的类型
            </summary>
            <param name="data_type"></param>
            <param name="COLUMN_FLAGS"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.ReadDataBase(System.String)">
            <summary>
            获得库中所有字段
            </summary>
            <param name="TableName">数据库名称</param>
            <returns>名称,主键,类型,小数位置,全文,长度,默认值，默认值约束键，是否为空</returns>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.DataTable2SQL(System.Data.DataTable,System.String,System.Collections.Hashtable)">
            <summary>
            全部把DataTable里数据（除主键外。转为插入语句）
            </summary>
            <param name="dt">DataTable</param>
            <param name="TableName">表名字</param>
            <param name="TableValue">已存在的Table表名</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.DataTable2SQLOne(System.Data.DataTable,System.String,System.Int32,System.Collections.Hashtable)">
            <summary>
            全部把DataTable里数据（除主键外。转为插入语句）
            </summary>
            <param name="dt">DataTable</param>
            <param name="TableName">表名字</param>
            <param name="DataRow_i">顺利</param>
            <param name="TableValue">已存在的Table表名</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.OldDb.DataBase.DataTable2SQL(System.Data.DataTable,System.String,System.Int32,System.Collections.Hashtable)">
            <summary>
            把DataTable里数据（除主键外。转为插入语句）
            </summary>
            <param name="dt">DataTable</param>
            <param name="TableName">表名字</param>
            <param name="DataRow_i">顺利</param>
            <param name="TableValue">已存在的Table表名</param>
        </member>
        <member name="T:Base.DataBase.Oracle.DataBase">
            <summary>
            oracle数据库里表操作
            </summary>
        </member>
        <member name="F:Base.DataBase.Oracle.DataBase.db">
            <summary>
            定义一个连接
            </summary>
        </member>
        <member name="M:Base.DataBase.Oracle.DataBase.#ctor(Base.Conn.Database)">
            <summary>
            DataBase
            </summary>
        </member>
        <member name="T:Base.DataBase.SQLite.DataBase">
            <summary>
            mssql数据库表操作
            </summary>
        </member>
        <member name="F:Base.DataBase.SQLite.DataBase.db">
            <summary>
            定义一个连接
            </summary>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.#ctor(Base.Conn.Database)">
            <summary>
            DataBase
            </summary>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.CreateDataBase(System.String)">
            <summary>
            建立数据库
            </summary>
            <param name="LocalFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.MdbIndex(System.String)">
            <summary>
            判断有没有自增例
            </summary>
            <param name="TableName"></param>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.CreateMdb(System.String)">
            <summary>
            建立数据表
            </summary>
            <param name="mname">表名</param>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.CreateMdbID(System.String)">
            <summary>
            建立数据表(带ID主键）
            </summary>
            <param name="tableName">表名</param>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.DeleteMdb(System.String)">
            <summary>
            删除数据表
            </summary>
            <param name="mname">数据库名</param>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.ModiMdbName(System.String,System.String)">
            <summary>
            修改数据表名
            </summary>
            <param name="OldName">原表名</param>
            <param name="NewName">新表名</param>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.ModiWordName(System.String,System.String,System.String)">
            <summary>
            修改数据表内字段名
            </summary>
            <param name="TableName">表名</param>
            <param name="OldWordName">原字段表名</param>
            <param name="NewWordName">新字段表名</param>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.ExistsMdb(System.String)">
            <summary>
            判断表是否存在。
            </summary>
            <param name="Mname"></param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.CreateWord(System.String,System.String,System.String,System.String)">
            <summary>
            建立字段
            </summary>
            <param name="mname"></param>
            <param name="wid"></param>
            <param name="dataType"></param>
            <param name="Default"></param>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.DeleteWord(System.String,System.String)">
            <summary>
            删除字段
            </summary>
            <param name="mname">表名</param>
            <param name="wid">字段名称</param>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.LengthWord(System.String,System.String,System.String)">
            <summary>
            修改字符串类型
            </summary>
            <param name="mname">表名</param>
            <param name="wid">字段名称</param>
            <param name="wtype">类型</param>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.ReadDataBaseOption(System.String)">
            <summary>
            数据用户所有表
            </summary>
            <param name="s">选择项</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.ReadDataBase">
            <summary>
            获得所有的表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.ReadDataItem(System.String,System.String)">
            <summary>
            数据表中各字段组成下拉框
            </summary>
            <param name="DataBase">表名</param>
            <param name="s">选择项</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.ReadDataBase(System.String)">
            <summary>
            获得库中所有字段
            </summary>
            <param name="TableName">数据库名称</param>
            <returns>名称,主键,类型,小数位置,全文,长度,默认值，默认值约束键，是否为空</returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.ReadIndex(System.String)">
            <summary>
            读取某个表的索引记录(适用于2005)
            </summary>
            <param name="TableName">返回DataTable</param>
            <returns>name</returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.ReadIndexRow(System.String,System.String)">
            <summary>
            读取某个表索引的记录信息（只返回非聚焦索引信息）
            </summary>
            <param name="TableName">表名</param>
            <param name="IndexName">索引名</param>
            <returns>Name,Descending(0升1降),IsIncluded(1是排序0包括列)</returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.DeleteIndex(System.String,System.String)">
            <summary>
            删除某个表的索引
            </summary>
            <param name="TableName">表名</param>
            <param name="IndexName">索引名</param>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.ReadType(System.String,System.String,System.String)">
            <summary>
            根据字符返回类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.ReadTableValuedFunction">
            <summary>
            读取所有的的表值函数
            </summary>
            <returns>Name,Urn,Schema,Function Type,CreateData</returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.ReadScalarValuedFunction">
            <summary>
            获得所有标题值函数
            </summary>
            <returns>Name,Urn,Schema,Function Type,CreateData</returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.ReadAggregateFunction">
            <summary>
            获得所有的的聚合函数
            </summary>
            <returns>Name,Urn,Schema,Function Type,CreateData</returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.ReadStoredProcedure">
            <summary>
            获得所有的存储过程
            </summary>
            <returns>Name,Urn,Schema,CreateDate</returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.ReadStoreFunctionContent(System.String)">
            <summary>
            读取存储过程或函数内容
            </summary>
            <returns>Text</returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.ReadAllStoreFunction">
            <summary>
            读取所有存储过程及函数内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.DelStore(System.String)">
            <summary>
            删除存储过程
            </summary>
            <param name="StoreName"></param>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.DelFunction(System.String)">
            <summary>
            删除函数
            </summary>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.GetVersion">
            <summary>
            获得版本8为2000 9为2005 10为2008
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.GetVersionMess">
            <summary>
            返回版本信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.DataTable2SQL(System.Data.DataTable,System.String,System.Collections.Hashtable)">
            <summary>
            全部把DataTable里数据（除主键外。转为插入语句）
            </summary>
            <param name="dt">DataTable</param>
            <param name="TableName">表名字</param>
            <param name="TableValue">已存在的Table表名</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.DataTable2SQLOne(System.Data.DataTable,System.String,System.Int32,System.Collections.Hashtable)">
            <summary>
            全部把DataTable里数据（除主键外。转为插入语句）
            </summary>
            <param name="dt">DataTable</param>
            <param name="TableName">表名字</param>
            <param name="DataRow_i">顺利</param>
            <param name="TableValue">已存在的Table表名</param>
            <returns></returns>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.DataTable2SQL(System.Data.DataTable,System.String,System.Int32,System.Collections.Hashtable)">
            <summary>
            把DataTable里数据（除主键外。转为插入语句）
            </summary>
            <param name="dt">DataTable</param>
            <param name="TableName">表名字</param>
            <param name="DataRow_i">顺利</param>
            <param name="TableValue">已存在的Table表名</param>
        </member>
        <member name="M:Base.DataBase.SQLite.DataBase.CopyDataTable(System.String,System.Data.DataTable)">
            <summary>
            mysql也可以直接插入自增列
            </summary>
            <param name="TableName"></param>
            <param name="dt"></param>
        </member>
        <member name="T:Base.EditorCode.EditorCode">
            <summary>
            编辑器代码
            </summary>
        </member>
        <member name="M:Base.EditorCode.EditorCode.GetImgUrl(System.String,System.String)">
            <summary>
            读取里面的图片及其它的文件
            </summary>
            <param name="strs">要读取图片信息的字符串文本</param>
            <param name="lxcode">为IMG等，为标签的开头。后跟SRC的</param>
            <returns>返回一个字符串</returns>
        </member>
        <member name="M:Base.EditorCode.EditorCode.GetImgUrlSpecial(System.String,System.String)">
            <summary>
            获取图片及文件地址
            </summary>
            <param name="strs">字段串</param>
            <param name="lxcode">类型如src</param>
            <returns></returns>
        </member>
        <member name="M:Base.EditorCode.EditorCode.Positive2Array(System.String,System.String)">
            <summary>
            把字符依指定的格式分隔成字符串
            </summary>
            <param name="str">字段串</param>
            <param name="code">正则表达式（取的结合必须是第二个位置()包着）</param>
            <returns></returns>
        </member>
        <member name="M:Base.EditorCode.EditorCode.HtmlClear(System.String,System.String,System.Int32)">
            <summary>
            去除某些特定样式
            </summary>
            <param name="content"></param>
            <param name="htmlcode">要去除的HTML标签依|分隔</param>
            <param name="lx">lx=0 保存HTMLCODE所标记的代码，LX=1去除某一特定代码</param>
            <returns></returns>
        </member>
        <member name="M:Base.EditorCode.EditorCode.HtmlLenValue(System.String,System.Int32)">
            <summary>
            取带HTML标签的指定长度的内容
            </summary>
            <param name="htmlcontent"></param>
            <param name="lenvalue">取指定长度。汉字为2。其它为1。并且带HTML代码</param>
            <returns></returns>
        </member>
        <member name="M:Base.EditorCode.EditorCode.htmlWhole(System.String)">
            <summary>
            补全代码 并且去除了name= ID= 和CLASSID=的所有HTML标签
            </summary>
            <param name="htmlcontent1"></param>
            <returns></returns>
        </member>
        <member name="M:Base.EditorCode.EditorCode.HtmlWhole(System.String)">
            <summary>
            补全代码
            </summary>
            <param name="htmlcontent1"></param>
            <returns></returns>
        </member>
        <member name="M:Base.EditorCode.EditorCode.ThidNameClass(System.String)">
            <summary>
            删除ID=.NAME= CLASS= height width
            </summary>
            <param name="strs"></param>
            <returns></returns>
        </member>
        <member name="M:Base.EditorCode.EditorCode.GetThidNameClass(System.String)">
            <summary>
            获得具体的标签，然后删除里面的相应代码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Base.EditorCode.TagsList.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Base.EditorCode.TagsList.remove(System.String)">
            <summary>
            移除，从后面开始移除
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Base.EditorCode.TagsList.remove(System.Int32)">
            <summary>
            移除
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Base.EditorCode.TagsList.Size">
            <summary>
            个数
            </summary>
        </member>
        <member name="T:Base.EditorCode.HtmlComplete">
            <summary>
            html代码完整度检查
            </summary>
        </member>
        <member name="M:Base.EditorCode.HtmlComplete.check(System.String,System.String@)">
            <summary>
            判断html代码是否完整
            </summary>
            <param name="str">html代码</param>
            <param name="errStr">错误提示</param>
            <returns></returns>
        </member>
        <member name="M:Base.EditorCode.HtmlComplete.fix(System.String)">
            <summary>
            修复HTML代码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Base.EditorCode.HtmlComplete.StringWZ(System.String,System.Int32)">
            <summary>
            位置信息
            </summary>
            <param name="Content"></param>
            <param name="istart"></param>
            <returns></returns>
        </member>
        <member name="M:Base.EditorCode.HtmlComplete.getUnclosedTags(System.String)">
            <summary>
            html代码分析html标签
            </summary>
            <param name="str">html代码</param>
            <returns></returns>
        </member>
        <member name="T:Base.Error.Error">
            <summary>
            错误记录
            </summary>
        </member>
        <member name="M:Base.Error.Error.WriteError(System.Exception)">
            <summary>
            写错误日志
            </summary>
            <param name="e">错误集</param>
        </member>
        <member name="M:Base.Error.Error.WriteError(System.Exception,System.String)">
            <summary>
            写错误日志
            </summary>
            <param name="e">错误集</param>
            <param name="Path">绝对路径</param>
        </member>
        <member name="M:Base.Error.Error.WriteError(System.String)">
            <summary>
            写错误日志
            </summary>
            <param name="str">错误集</param>
        </member>
        <member name="M:Base.Error.Error.WriteError(System.String,System.String)">
            <summary>
            写错误日志
            </summary>
            <param name="str">错误集</param>
            <param name="Path">路径</param>
        </member>
        <member name="M:Base.Error.Error.LogErrorList">
            <summary>
            备份列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:Base.Error.Error.sFileInfo">
            <summary>
            定义构造类
            </summary>
        </member>
        <member name="F:Base.Error.Error.sFileInfo.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="F:Base.Error.Error.sFileInfo.FileCreateTime">
            <summary>
            文件创建时间
            </summary>
        </member>
        <member name="F:Base.Error.Error.sFileInfo.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="T:Base.Fun.Application">
            <summary>
            全局
            </summary>
        </member>
        <member name="M:Base.Fun.Application.GetApplication(System.String)">
            <summary>
            取Application全局变量
            </summary>
            <returns>返回STR</returns>
        </member>
        <member name="M:Base.Fun.Application.GetApplicationObj(System.String)">
            <summary>
            取Application全局变量
            </summary>
            <returns>返回OBJECT</returns>
        </member>
        <member name="M:Base.Fun.Application.DelApplication(System.String)">
            <summary>
            移除Application全局变量
            </summary>
            <param name="strname"></param>
        </member>
        <member name="M:Base.Fun.Application.AddApplication(System.String,System.String)">
            <summary>
            写Application全局变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Application.AddApplicationObj(System.String,System.Object)">
            <summary>
            写全局变量
            </summary>
            <returns></returns>
        </member>
        <member name="T:Base.Fun.CHS2PinYin">
            <summary>
            汉字转拼音
            </summary>
        </member>
        <member name="F:Base.Fun.CHS2PinYin.pv">
            <summary>
            包含字符 ASC 码的整形数组。
            </summary>
        </member>
        <member name="F:Base.Fun.CHS2PinYin.ps">
            <summary>
            包含汉字拼音的字符串数组。
            </summary>
        </member>
        <member name="F:Base.Fun.CHS2PinYin.bd">
            <summary>
            包含要排除处理的字符的字符串数组。
            </summary>
            <summary>
            包含要排除处理的字符的字符串数组。
            </summary>
        </member>
        <member name="M:Base.Fun.CHS2PinYin.Convert(System.String,System.String,System.Boolean)">
            <summary>
            将指定中文字符串转换为拼音形式。
            </summary>
            <param name="chs">要转换的中文字符串。</param>
            <param name="separator">连接拼音之间的分隔符。</param>
            <param name="initialCap">指定是否将首字母大写。</param>
            <returns>包含中文字符串的拼音的字符串。</returns>
        </member>
        <member name="M:Base.Fun.CHS2PinYin.Convert(System.String,System.String)">
            <summary>
            将指定中文字符串转换为拼音形式。
            </summary>
            <param name="chs">要转换的中文字符串。</param>
            <param name="separator">连接拼音之间的分隔符。</param>
            <returns>包含中文字符串的拼音的字符串。</returns>
        </member>
        <member name="M:Base.Fun.CHS2PinYin.Convert(System.String,System.Boolean)">
            <summary>
            将指定中文字符串转换为拼音形式。
            </summary>
            <param name="chs">要转换的中文字符串。</param>
            <param name="initialCap">指定是否将首字母大写。</param>
            <returns>包含中文字符串的拼音的字符串。</returns>
        </member>
        <member name="M:Base.Fun.CHS2PinYin.Convert(System.String)">
            <summary>
            将指定中文字符串转换为拼音形式。
            </summary>
            <param name="chs">要转换的中文字符串。</param>
            <returns>包含中文字符串的拼音的字符串。</returns>
        </member>
        <member name="M:Base.Fun.CHS2PinYin.ToSChinese(System.String)">
            <summary> 
            转换为简体中文 
            </summary> 
        </member>
        <member name="M:Base.Fun.CHS2PinYin.ToTChinese(System.String)">
            <summary> 
            转换为繁体中文 
            </summary> 
        </member>
        <member name="M:Base.Fun.CHS2PinYin.ToSBC(System.String)">
             <summary>
             转全角的函数(SBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>全角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks> 
        </member>
        <member name="M:Base.Fun.CHS2PinYin.ToDBC(System.String)">
             <summary>
             转半角的函数(DBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>半角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="P:Base.Fun.CHS2PinYin.Phrase">
            <summary>
            设置或获取包含列外词组读音的键/值对的组合。
            </summary>
        </member>
        <member name="T:Base.Fun.Client">
            <summary>
            客户端信息
            </summary>
        </member>
        <member name="M:Base.Fun.Client.Browser_Type">
            <summary>
            获取浏览器的名字和主（整数）版本号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Client.Browser_Browser">
            <summary>
            获取浏览器字符串（如果有）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Client.Browser_Version">
            <summary>
            获取浏览器的完整版本号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Client.Browser_MajorVersion">
            <summary>
            获取浏览器的主（整数）版本号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Client.Browser_MinorVersion">
            <summary>
            获取浏览器的次（小数）版本号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Client.Platform">
            <summary>
            获取客户端使用的平台名称（如果已知）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Client.PlatformType">
            <summary>
            获取客户端使用的平台32/64（win系统）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Client.Language">
            <summary>
            语言
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Client.UserHostName">
            <summary>
            客户端电脑名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:Base.Fun.RebColor">
            <summary>
            颜色转换函数
            </summary>
        </member>
        <member name="M:Base.Fun.RebColor.toColor(System.String)">
            <summary>
            转换颜色值
            </summary>
            <param name="color">格式没有#   FFFFFF</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.RebColor.toColor(System.String,System.String)">
            <summary>
            转换颜色值
            </summary>
            <param name="color">格式没有# FFFFFF</param>
            <param name="Alpha">透明度0-255 越大越不透明</param>
            <returns></returns>
        </member>
        <member name="T:Base.Fun.Cookies">
            <summary>
            Cookies
            </summary>
        </member>
        <member name="M:Base.Fun.Cookies.ResponseCookies(System.String,System.String,System.Int32,System.String)">
            <summary>
            建立缓存cookies
            </summary>
            <param name="key">关键字</param>
            <param name="value">保存值</param>
            <param name="expires">保存时间（分钟）0为关闭浏览器失效(-1到-30为天）</param>
            <param name="CacheName">缓存名称</param>
        </member>
        <member name="M:Base.Fun.Cookies.RequestCookies(System.String,System.String)">
            <summary>
            读取指定的COOKIES值
            </summary>
            <param name="cookiename">关键字</param>
            <param name="CacheName">缓存名称</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Cookies.CleanCookies(System.String,System.String)">
            <summary>
            清除缓存值
            </summary>
            <param name="CacheName">缓存名称</param>
            <param name="CacheUrl">绑定域名</param>
        </member>
        <member name="M:Base.Fun.Cookies.CleanCookies(System.String)">
            <summary>
            清除缓存组
            </summary>
            <param name="CacheName"></param>
        </member>
        <member name="M:Base.Fun.Cookies.ClearCookies(System.String)">
            <summary>
            清除一个KEY
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Base.Fun.Cookies.PreventRefresh(System.Int32,System.String)">
            <summary>
            保存Cookies的防刷新
            </summary>
            <param name="RefreshTime">时间间隔（秒）</param>
            <param name="ttu">要保存的字符串</param>
            <returns>能继续的时候返回真。在时间内的返回假</returns>
        </member>
        <member name="T:Base.Fun.Fetch">
            <summary>
            函数方法取值
            </summary>
        </member>
        <member name="M:Base.Fun.Fetch.post(System.String)">
            <summary>
            取FROM POST传值
            </summary>
            <param name="name">要取的控件值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Fetch.post">
            <summary>
            取Post过来的数据（默认utf-8)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Fetch.post(System.Text.Encoding)">
            <summary>
            取Post过来的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Fetch.get(System.String)">
            <summary>
            取页面GET传值
            </summary>
            <param name="name">要取变量值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Fetch.getpost(System.String)">
            <summary>
            取页面GET传值
            </summary>
            <param name="name">要取变量值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Fetch.FormQueryString">
            <summary>
            取所有提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Fetch.QueryString">
            <summary>
            获得url提交的所有值：键名=值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Fetch.GetQueryString">
            <summary>
            获得url提交的所有值：{键名}值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Fetch.Form">
            <summary>
            获得FROM所有的提交值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Fetch.GetForm">
            <summary>
            获得FROM所有的提交值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Fetch.Ip2Int(System.String)">
            <summary>
             IP 地址字符串形式转换成长整型
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Fetch.GetUrl">
            <summary>
            获得当前网址(HttpUtility.HtmlEncode)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Fetch.ServerDomain">
            <summary>
            获得当前域名(只能取二级域名。不能取三级域名)
            </summary>
        </member>
        <member name="M:Base.Fun.Fetch.ServerDomain(System.String)">
            <summary>
            获得当前域名(只能取二级域名。不能取三级域名)
            </summary>
        </member>
        <member name="M:Base.Fun.Fetch.GetDoMain(System.String)">
            <summary>
            根据URL地址获取网址
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Fetch.GetDoMain">
            <summary>
            根据URL地址获取 域名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Fetch.Intercept_Char(System.String,System.Int32,System.Int32)">
            <summary>
            读取一个字符串中指定的长度
            </summary>
            <param name="f_Str">要读指定长度的字符串</param>
            <param name="f_Length">多长。汉字算2个时，长度*2</param>
            <param name="f_Flag">1的时候是汉字算一个字符，2的时候汉字算2个。(2011-12-21修复加号和&amp;分号问题）</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Fetch.FontSize(System.String)">
            <summary>
            判断汉字长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Fetch.IsChinese(System.Char)">
            <summary>
            判断是否汉字
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Fetch.SiteTips">
            <summary>
            是否是同一域名下提交
            </summary>
            <returns></returns>
        </member>
        <member name="P:Base.Fun.Fetch.UserIp">
            <summary>
            获得客户端的IP地址
            </summary>
        </member>
        <member name="P:Base.Fun.Fetch.UserBrowser">
            <summary>
            获得客户使用的浏览器
            </summary>
        </member>
        <member name="P:Base.Fun.Fetch.FrontPath">
            <summary>
            返回前面路径
            </summary>
        </member>
        <member name="P:Base.Fun.Fetch.CurrentPath">
            <summary>
            获得上级路径
            </summary>
        </member>
        <member name="P:Base.Fun.Fetch.CurrentUrl">
            <summary>
            得到当前URL地址(如果为伪静态地址就返回伪静态地址) 已HttpUtility.UrlEncode编码
            </summary>
        </member>
        <member name="P:Base.Fun.Fetch.CurrentUrlHttp">
            <summary>
            得到当前URL地址(如果为伪静态地址就返回伪静态地址) 已HttpUtility.UrlEncode编码 带http
            </summary>
        </member>
        <member name="P:Base.Fun.Fetch.CurrentUrl_Http">
            <summary>
            得到当前URL地址 （带域名。取不到伪静态地址）已HttpUtility.UrlEncode编码
            </summary>
            <returns></returns>
        </member>
        <member name="P:Base.Fun.Fetch.Referrer">
            <summary>
            获得上次页面地址 已HttpUtility.HtmlEncode编码
            </summary>
        </member>
        <member name="P:Base.Fun.Fetch.IsGetFromAnotherDomain">
            <summary>
            是否从其他连接向本域名以POST方式提交表单
            </summary>
        </member>
        <member name="T:Base.Fun.Form">
            <summary>
            模拟FORM表单提交
            </summary>
        </member>
        <member name="M:Base.Fun.Form.WebClient(System.String,System.String,System.String,System.String)">
            <summary>
            提交
            </summary>
            <param name="Url">提交地址</param>
            <param name="Parameters">参数</param>
            <param name="Method">方式GET POST</param>
            <param name="Encode">编码</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Form.HttpWebRequest(System.String,System.String,System.String,System.String)">
            <summary>
            提交
            </summary>
            <param name="url">地址</param>
            <param name="Parameters">参数</param>
            <param name="Method">方式GET,POST</param>
            <param name="Encode">编码</param>
            <returns></returns>
        </member>
        <member name="T:Base.Fun.fun">
            <summary>
            基本函数
            </summary>
        </member>
        <member name="M:Base.Fun.fun.Browser">
            <summary>
            浏览器信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.SysSortName">
            <summary>
            操作系统信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.UserIsWeiXin">
            <summary>
            判断是否微信浏览（苹果，安卓，WF8）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.UserAgent">
            <summary>
            用户浏览类型（电脑/手机）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.CanGZip(System.Web.HttpRequest)">
            <summary>
            判断页面是否压缩
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.String(System.String,System.Int32)">
            <summary>
            重复生成某个字符
            </summary>
            <param name="str"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.IsDate(System.String)">
            <summary>
            判断是不是日期开型
            </summary>
            <param name="strDate">一个字符串型的日期</param>
            <returns>返回真假</returns>
        </member>
        <member name="M:Base.Fun.fun.isempty(System.String)">
            <summary>
            判断一个字符串是不是为空null
            </summary>
            <param name="str">字符串</param>
            <returns>返回真假</returns>
        </member>
        <member name="M:Base.Fun.fun.getapp(System.String)">
            <summary>
            取web.config里的KEY值
            </summary>
            <param name="key">key值</param>
            <returns>返回key对应的value值</returns>
        </member>
        <member name="M:Base.Fun.fun.GetConnectionstrings(System.String)">
            <summary>
            取WEB.CONFIG里 连接数据库 ConfigurationManager的值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.GetProviderName(System.String)">
            <summary>
            取WEB.CONFIG里 连接数据库 ProviderName的值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.IsNumeric(System.String)">
            <summary>
            判断字符串是否由数字组成 包括零
            </summary>
            <param name="value">要判断的字符串。</param>
            <returns>判断成功返回 true ， 否则返回 false 。</returns>
        </member>
        <member name="M:Base.Fun.fun.IsInt(System.String)">
            <summary>
            判断是否整数，没有小数点
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.IsUnsign(System.String)">
            <summary>
            判断是否为正整数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.pnumeric(System.String)">
            <summary>
            判断是不是数字，不包括零，并且非负数，及小数
            </summary>
            <param name="value">一个字符串</param>
            <returns>返回真假</returns>
        </member>
        <member name="M:Base.Fun.fun.pnumericArray(System.String)">
            <summary>
            判断是不是数字，不包括零，并且非负数，及小数（支付,分隔数组）数字长度不能长于38位
            </summary>
            <param name="value">一个字符串</param>
            <returns>返回真假</returns>
        </member>
        <member name="M:Base.Fun.fun.IsNumericArray(System.String)">
            <summary>
            判断字符串是否由数字组成 包括零（支付,分隔数组）数字长度不能长于38位
            </summary>
            <param name="value">一个字符串</param>
            <returns>返回真假</returns>
        </member>
        <member name="M:Base.Fun.fun.NumericNoZero(System.String)">
            <summary>
            判断是否非零整数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.IsZero(System.String)">
            <summary>
            判断是不是数字
            </summary>
            <param name="value">一个字符串</param>
            <returns>不是数字返回零，是数字返回数字</returns>
        </member>
        <member name="M:Base.Fun.fun.IISVersion">
            <summary>
            返回IIS版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.IsSelfRefer">
            <summary>
            判断是不是外部提交
            </summary>
            <returns>返回真假，不是外部提交返回真，是外部提交返回假</returns>
        </member>
        <member name="M:Base.Fun.fun.ispost">
            <summary>
            判断是不是from post提交
            </summary>
            <returns>返回真假</returns>
        </member>
        <member name="M:Base.Fun.fun.Chr(System.Int32)">
            <summary>
            数字转成chr值 比如chr(34)双引号
            </summary>
            <param name="asciiCode">数字</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:Base.Fun.fun.Asc(System.String)">
            <summary>
            只能获得ASCIIasc码
            </summary>
            <param name="character">单个字符</param>
            <returns>返回数字asc码</returns>
        </member>
        <member name="M:Base.Fun.fun.ASC(System.String)">
            <summary>
            获得asc码
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.Week2Int(System.DateTime)">
            <summary>
            日期返回数字星期
            </summary>
            <param name="dt1">日期</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.ReplaceText(System.String,System.String,System.String)">
            <summary>
            传入一个字符串，根据正则作替换
            </summary>
            <param name="fstring">字符串</param>
            <param name="patrn">正则</param>
            <param name="replstr">要替换成</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.GetRealIP">
            <summary>
            返回真实的IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.DoMainIp(System.String)">
            <summary>
            获得域名对应的IP地址
            </summary>
            <param name="DoMainUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.GetHostIp">
            <summary>
            获得本机IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.GetHostKey">
            <summary>
            获得本机IP加密后
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.NewGetHostKey">
            <summary>
            获得本机IP加密后
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.GetHostKey(System.String)">
            <summary>
            对IP加上到期时间加密
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.ByteSize(System.String)">
            <summary>
            格式化大小
            </summary>
            <param name="str">数字从字节开始</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.ByteSizeKB(System.String)">
            <summary>
            格式化大小
            </summary>
            <param name="str">数字从KB开始</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.StripHtmlClearScript(System.String)">
            <summary>
            清除脚本，样式，注释
            </summary>
            <param name="htmlCode"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.StripHtml(System.String)">
            <summary>
            去除 htmlCode 中所有的HTML标签(包括标签中的属性)
            </summary>
            <param name="htmlCode">包含 HTML 代码的字符串。</param>
            <returns>返回一个不包含 HTML 代码的字符串</returns>
        </member>
        <member name="M:Base.Fun.fun.WeekValue(System.DateTime)">
            <summary>
            返回汉字星期几
            </summary>
            <param name="da1">日期</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.MonthEn(System.String,System.String)">
            <summary>
            返回月份英文
            </summary>
            <param name="Month">月份（1-12）</param>
            <param name="Type">0为长的英文其它为短的</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.Get_Date(System.DateTime,System.String)">
            <summary>
            格式化时间
            </summary>
            <param name="f_getDate">日期</param>
            <param name="f_datestyle">格式化日期YY02(O4)  MM  MEJ  MEA  DD  HH  MI  SS  WE</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.IsIP(System.String)">
            <summary>
            判断是否为IP
            </summary>
            <param name="ip">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.AscAZ19(System.String,System.Int32,System.Int32)">
            <summary>
            判断是不是英文，数字，并且依英文开头
            </summary>
            <param name="str">要判断的字符串</param>
            <param name="StartLen">最小长度</param>
            <param name="EndLen">最大长度</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.AscAZ19HZ(System.String,System.Int32,System.Int32)">
            <summary>
            判断是否为汉字。英文，数字，字符长度。
            </summary>
            <param name="str">判断的字符串</param>
            <param name="StartLen">最小长度</param>
            <param name="EndLen">最大长度</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.Horoscope(System.String)">
            <summary>
            根据生日返回星座
            </summary>
            <param name="birthday">传入生日值。字符型</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.NoCon(System.String)">
            <summary>
            html代码
            </summary>
            <param name="str">字段串</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.FNoCon(System.String)">
            <summary>
            html代码
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.NoConBr(System.String)">
            <summary>
            html代码（转单引号、空格和回车）
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.ReplaceHtmlStartEnd(System.String)">
            <summary>
            替换开头和结尾
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.ReplaceNbsp(System.String)">
            <summary>
            多个空格替换成一个
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.FNoConBr(System.String)">
            <summary>
            html代码（转单引号、空格和回车）
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.ConvertToXML(System.Text.RegularExpressions.Match)">
            <summary>
            为替换空格使用
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.NoSql(System.String)">
            <summary>
            原ASP的过滤函数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.RepeatString(System.String,System.Int32)">
            <summary>
            重复一个字符串N倍
            </summary>
            <param name="str">字符串</param>
            <param name="n">重复次数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.ViewContent(System.String)">
            <summary>
            显示内容。格式化（&lt;&gt;）
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.FNoSql(System.String)">
            <summary>
            反原ASP的过滤函数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.FNoSqlNobr(System.String)">
            <summary>
            反原ASP的过滤函数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.ContentHtmlCode(System.String)">
            <summary>
            转换内容的一些字段
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.GetGuidRandom(System.Int32,System.String)">
            <summary>
            获得不重复的随机数
            </summary>
            <param name="len">长度</param>
            <param name="Type">1全数字2英文其它随便</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.isChecked(System.String,System.String)">
            <summary>
            radio
            </summary>
            <param name="a">值</param>
            <param name="b">值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.isSelected(System.String,System.String)">
            <summary>
            selected
            </summary>
            <param name="a">值</param>
            <param name="b">值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.GetRequest(System.String,System.String)">
            <summary>
            取URL传值（字符串格式？name=&amp;ddd这样的格式）
            </summary>
            <param name="paras">要取的值</param>
            <param name="url">URL字符串格式</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.Replace(System.String,System.String,System.String)">
            <summary>
            不区分大小写替换字符串
            </summary>
            <param name="Source">原字符串</param>
            <param name="ReplaceStr">要替换的字符</param>
            <param name="ReplaceValue">替换后字符</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.Replace(System.String,System.String,System.String,System.Int32)">
            <summary>
            不区分大小写替换字符串
            </summary>
            <param name="Source">原字符串</param>
            <param name="ReplaceStr">要替换的字符</param>
            <param name="ReplaceValue">替换后字符</param>
            <param name="ReplaceNum">替换次数(-1)为全部</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.WebConfigSqlLink(System.String)">
            <summary>
            获得WEBCONFIG里的连接字段串（现只支持System.Data.SqlClient);
            </summary>
            <param name="Value">当前值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.WebConfigSqlLinkString">
            <summary>
            获得WEBCONFIG里的连接字段串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.Url(System.String)">
            <summary>
            替换URL里的'"格式
            </summary>
            <param name="str">把地址'"转义</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.NumericValue(System.String)">
            <summary>
            判断数值是否大于38位
            </summary>
            <param name="NumStr">数值字符串</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.UrlEqual(System.String,System.String)">
            <summary>
            判断两个地址是否同一地址
            </summary>
            <param name="Url1">地址1</param>
            <param name="Url2">地址2</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.ActionGet(System.String,System.String)">
            <summary>
            取传入的传出值。格式“p1s2d3” 取p得1
            </summary>
            <param name="Value">原值</param>
            <param name="Getv">要取的值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.RegexGet(System.String,System.String)">
            <summary>
            取传入的传出值。
            </summary>
            <param name="Value">原值</param>
            <param name="Getv">要取正则</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.XmlStr(System.String)">
            <summary>
            xml里面的特殊字符
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.FXmlStr(System.String)">
            <summary>
            xml里面的特殊字符(反）
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.EnString(System.String,System.String)">
            <summary>
            英文字母串（保留英文的完整性）
            </summary>
            <param name="ViewStr">已经截取的要显示的字母串</param>
            <param name="YStr">原来的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.ClearluceneStr(System.String)">
            <summary>
            清除全文检索中不能使用的字符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.GetDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            简单获得二个经伟度之间的距离
            </summary>
            <param name="lat1"></param>
            <param name="lng1"></param>
            <param name="lat2"></param>
            <param name="lng2"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.fun.ToUnicode(System.String)">
            <summary>
            汉字转换为Unicode编码
            </summary>
            <param name="str">要编码的汉字字符串</param>
            <returns>Unicode编码的的字符串</returns>
        </member>
        <member name="M:Base.Fun.fun.ToGB2312(System.String)">
            <summary>
            将Unicode编码转换为汉字字符串
            </summary>
            <param name="str">Unicode编码字符串</param>
            <returns>汉字字符串</returns>
        </member>
        <member name="M:Base.Fun.fun.UrlEncode(System.String)">
            <summary> 
            URL编码 
            </summary> 
            <param name="value">The value to Url encode</param> 
            <returns>Returns a Url encoded string</returns> 
        </member>
        <member name="T:Base.Fun.GZip">
            <summary>
            Gzip压缩
            </summary>
        </member>
        <member name="M:Base.Fun.GZip.GZipCompress(System.String)">
            <summary>
            GZipStream压缩字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.GZip.GZipDecompress(System.IO.Stream)">
            <summary>
            GZipStream解压字符串
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Fun.Html">
            <summary>
            对Html进行操作
            </summary>
        </member>
        <member name="M:Base.Fun.Html.Replace(System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Boolean)">
            <summary>
            文章特定词替换
            </summary>
            <param name="str">要进行替换的内容</param>
            <param name="Word">字符串</param>
            <param name="Url">链接地址</param>
            <param name="Target">弹出连接</param>
            <param name="Title">连接说明</param>
            <param name="ReplaceCount">替换次数</param>
            <param name="Type">true替换false移除连接</param>
            <returns></returns>
        </member>
        <member name="T:Base.Fun.JScript">
            <summary>
            提供向页面输出客户端代码实现特殊功能的方法
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Base.Fun.JScript.AlertAndRedirect(System.String,System.String)">
            <summary>
            弹出窗口跳转页面
            </summary>
            <param name="message"></param>
            <param name="toURL"></param>
        </member>
        <member name="M:Base.Fun.JScript.ResponseJs(System.String)">
            <summary>
            弹出窗口跳转页面
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Base.Fun.JScript.Redirect(System.String)">
            <summary>
            弹出窗口跳转页面
            </summary>
            <param name="toURL"></param>
        </member>
        <member name="M:Base.Fun.JScript.Alert(System.String)">
            <summary>
            弹出JavaScript小窗口
            </summary>
            <param name="message">窗口信息</param>
        </member>
        <member name="M:Base.Fun.JScript.DeleteUnVisibleChar(System.String)">
            <summary>
            删除不可见字符
            </summary>
            <param name="sourceString"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.JScript.Alert(System.Object)">
            <summary>
            弹出JavaScript小窗口
            </summary>
            <param name="message">object</param>
        </member>
        <member name="M:Base.Fun.JScript.RtnRltMsgbox(System.Object,System.String)">
            <summary>
            弹出判断是否继续窗口
            </summary>
            <param name="message">弹出内容</param>
            <param name="strWinCtrl">不知道</param>
        </member>
        <member name="M:Base.Fun.JScript.GoHistory(System.Int32)">
            <summary>
            回到历史页面
            </summary>
            <param name="value">-1/1</param>
        </member>
        <member name="M:Base.Fun.JScript.CloseWindow">
            <summary>
            关闭当前窗口
            </summary>
        </member>
        <member name="M:Base.Fun.JScript.RefreshParent">
            <summary>
            刷新父窗口
            </summary>
        </member>
        <member name="M:Base.Fun.JScript.JSStringFormat(System.String)">
            <summary>
            格式化为JS可解释的字符串
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.JScript.RefreshOpener">
            <summary>
            刷新打开窗口
            </summary>
        </member>
        <member name="M:Base.Fun.JScript.OpenWebForm(System.String)">
            <summary>
            打开窗口
            </summary>
            <param name="url">URL地址</param>
        </member>
        <member name="M:Base.Fun.JScript.OpenWebForm(System.String,System.String,System.String)">
            <summary>
            打开窗口
            </summary>
            <param name="url">URL地址</param>
            <param name="name"></param>
            <param name="future"></param>
        </member>
        <member name="M:Base.Fun.JScript.OpenWebForm(System.String,System.String)">
            <summary>
            打开窗口
            </summary>
            <param name="url"></param>
            <param name="formName"></param>
        </member>
        <member name="M:Base.Fun.JScript.OpenWebForm(System.String,System.Boolean)">
            <summary>		
            函数名:OpenWebForm	
            功能描述:打开WEB窗口	
            处理流程:
            算法描述:
            </summary>
            <param name="url">WEB窗口</param>
            <param name="isFullScreen">是否全屏幕</param>
        </member>
        <member name="M:Base.Fun.JScript.JavaScriptLocationHref(System.String)">
            <summary>
            转向Url制定的页面
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Base.Fun.JScript.JavaScriptFrameHref(System.String,System.String)">
            <summary>
            指定的框架页面转换
            </summary>
            <param name="FrameName">框架名称</param>
            <param name="url">URL地址</param>
        </member>
        <member name="M:Base.Fun.JScript.JavaScriptResetPage(System.String)">
             <summary>
            重置页面
             </summary>
        </member>
        <member name="M:Base.Fun.JScript.JavaScriptSetCookie(System.String,System.String)">
            <summary>
            函数名:JavaScriptSetCookie
            </summary>
            <param name="strName">Cookie名</param>
            <param name="strValue">Cookie值</param>
        </member>
        <member name="M:Base.Fun.JScript.GotoParentWindow(System.String)">
            <summary>		
            函数名:GotoParentWindow	
            功能描述:返回父窗口	
            处理流程:
            算法描述:
            版 本:
            </summary>
            <param name="parentWindowUrl">父窗口</param>		
        </member>
        <member name="M:Base.Fun.JScript.ReplaceParentWindow(System.String,System.String,System.String)">
            <summary>		
            函数名:ReplaceParentWindow	
            日 期:
            版 本:
            </summary>
            <param name="parentWindowUrl">父窗口</param>
            <param name="caption">窗口提示</param>
            <param name="future">窗口特征参数</param>
        </member>
        <member name="M:Base.Fun.JScript.ReplaceOpenerWindow(System.String)">
            <summary>		
            函数名:ReplaceOpenerWindow	
            功能描述:替换当前窗体的打开窗口	
            </summary>
            <param name="openerWindowUrl">当前窗体的打开窗口</param>		
        </member>
        <member name="M:Base.Fun.JScript.ReplaceOpenerParentFrame(System.String,System.String)">
            <summary>		
            函数名:ReplaceOpenerParentWindow	
            功能描述:替换当前窗体的打开窗口的父窗口	
            </summary>
            <param name="frameName">当前窗体的打开窗口的父窗口</param>	
            <param name="frameWindowUrl">当前窗体的打开窗口的父窗口</param>		
        </member>
        <member name="M:Base.Fun.JScript.ReplaceOpenerParentWindow(System.String)">
            <summary>		
            函数名:ReplaceOpenerParentWindow	
            功能描述:替换当前窗体的打开窗口的父窗口	
            </summary>
            <param name="openerParentWindowUrl">当前窗体的打开窗口的父窗口</param>		
        </member>
        <member name="M:Base.Fun.JScript.CloseParentWindow">
            <summary>		
            函数名:CloseParentWindow	
            功能描述:关闭窗口	
            </summary>
        </member>
        <member name="M:Base.Fun.JScript.CloseOpenerWindow">
            <summary>
            
            </summary>
        </member>
        <member name="M:Base.Fun.JScript.ShowModalDialogJavascript(System.String)">
            <summary>
            函数名:ShowModalDialogJavascript	
            功能描述:返回打开模式窗口的脚本	
            </summary>
            <param name="webFormUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.JScript.ShowModalDialogJavascript(System.String,System.String)">
            <summary>
            模式窗口
            </summary>
            <param name="webFormUrl">地址</param>
            <param name="features">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.JScript.ShowModalDialogWindow(System.String)">
            <summary>
            函数名:ShowModalDialogWindow	
            功能描述:打开模式窗口	
            处理流程:
            </summary>
            <param name="webFormUrl">地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.JScript.ShowModalDialogWindow(System.String,System.String)">
            <summary>
            设置模式窗口
            </summary>
            <param name="webFormUrl">地址</param>
            <param name="features">参数</param>
        </member>
        <member name="M:Base.Fun.JScript.ShowModalDialogWindow(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            模式窗口
            </summary>
            <param name="webFormUrl">地址</param>
            <param name="width">宽</param>
            <param name="height">高</param>
            <param name="top">top</param>
            <param name="left">left</param>
        </member>
        <member name="M:Base.Fun.JScript.SetHtmlElementValue(System.String,System.String,System.String)">
            <summary>
            判断赋值
            </summary>
            <param name="formName">form表单名称</param>
            <param name="elementName">控件名称</param>
            <param name="elementValue">控件值</param>
        </member>
        <member name="M:Base.Fun.JScript.htmltojavascript(System.String,System.Boolean)">
            <summary>
            格式化html代码为javascript2012年1月4号（如果有script标签时。是使用单引号连接的。请在外面也使用单绰号
            </summary>
            <param name="html">HTML代码</param>
            <param name="isScript">是否删除script代码</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.JScript.htmltojavascript(System.String)">
            <summary>
            格式化html代码为javascript2012年1月4号（如果有script标签时。是使用单引号连接的。请在外面也使用单绰号
            </summary>
            <param name="html">HTML代码</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.JScript.htmltojavascriptNoS(System.String)">
            <summary>
            格式化html代码为javascript 不转双引号
            </summary>
            <param name="html">HTML代码</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.JScript.htmltojavascriptNoD(System.String)">
            <summary>
            格式化html代码为javascript 不转义单引号
            </summary>
            <param name="html">HTML代码</param>
            <returns></returns>
        </member>
        <member name="T:Base.Fun.JsonHelper">
            <summary>
            List类、JSON互转
            </summary>
        </member>
        <member name="M:Base.Fun.JsonHelper.GetJson``1(``0)">
            <summary> /// 把对象序列化 JSON 字符串 /// </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象实体</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:Base.Fun.JsonHelper.ParseFormJson``1(System.String)">
            <summary> /// 把JSON字符串还原为对象 /// </summary> 
            <typeparam name="T">对象类型</typeparam>
            <param name="szJson">JSON字符串</param>
            <returns>对象实体</returns>
        </member>
        <member name="T:Base.Fun.Management">
            <summary>
            获得目录使用（只能实现一级目录）
            </summary>
        </member>
        <member name="M:Base.Fun.Management.SetDirectory">
            <summary>
            设置获得后台目录，只可在第一次首页运行时使用（保存为/开始/结束）
            </summary>
        </member>
        <member name="M:Base.Fun.Management.GetManagementDirectory">
            <summary>
            返回后台目录
            </summary>
        </member>
        <member name="M:Base.Fun.Management.GetDirectory">
            <summary>
            取后台目录（如果为/即为二级域名目录）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Management.MapPath">
            <summary>
            获得运行目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Management.RealDirectory">
            <summary>
            获得真实的目录（只支持管理目录一级)获得的是当前用户程序根目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Management.RealDirectory(System.String)">
            <summary>
            获得真实的目录（只支持管理目录一级)获得的是当前用户程序根目录
            </summary>
            <param name="path">追加到真实目录后面的目录路径</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Management.RealManagementDirectory">
            <summary>
            获得真实的后台目录（只支持管理目录一级)获得的是当前用户程序根目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Management.ParentPath(System.String,System.Int32)">
            <summary>
            移动ParentI所指示的上级目录
            </summary>
            <param name="Path">目录路径地址</param>
            <param name="ParentI">向上移动几级</param>
            <returns></returns>
        </member>
        <member name="T:Base.Fun.Md5">
            <summary>
            MD5加密
            </summary>
        </member>
        <member name="M:Base.Fun.Md5.MD5(System.String)">
            <summary>
            32 位 MD5 加密 
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Md5.md5(System.String,System.Int32)">
            <summary>
            MD5加密，16位和32位
            </summary>
            <param name="str"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Md5.CheckPassword(System.String,System.String,System.Int32)">
            <summary>
            密码
            </summary>
            <param name="str"></param>
            <param name="Password"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Fun.Num">
            <summary>
            钱币显示（大写）
            </summary>
        </member>
        <member name="M:Base.Fun.Num.ConvertSum(System.String)">
            <summary>
            转大写
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Num.IsPositveDecimal(System.String)">
            <summary>
            判断是否是正数字字符串
            </summary>
            <param name="str"> 判断字符串</param>
            <returns>如果是数字，返回true，否则返回false</returns>
        </member>
        <member name="M:Base.Fun.Num.ConvertData(System.String)">
            <summary>
            转换数字（整数）
            </summary>
            <param name="str">需要转换的整数数字字符串</param>
            <returns>转换成中文大写后的字符串</returns>
        </member>
        <member name="M:Base.Fun.Num.ConvertXiaoShu(System.String)">
            <summary>
            转换数字（小数部分）
            </summary>
            <param name="str">需要转换的小数部分数字字符串</param>
            <returns>转换成中文大写后的字符串</returns>
        </member>
        <member name="M:Base.Fun.Num.ConvertDigit(System.String)">
            <summary>
            转换数字
            </summary>
            <param name="str">转换的字符串（四位以内）</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Num.Convert4Digit(System.String)">
            <summary>
            转换四位数字
            </summary>
        </member>
        <member name="M:Base.Fun.Num.Convert3Digit(System.String)">
            <summary>
            转换三位数字
            </summary>
        </member>
        <member name="M:Base.Fun.Num.Convert2Digit(System.String)">
            <summary>
            转换二位数字
            </summary>
        </member>
        <member name="M:Base.Fun.Num.ConvertChinese(System.String)">
            <summary>
            将一位数字转换成中文大写数字
            </summary>
        </member>
        <member name="T:Base.Fun.Encrypt">
            <summary>
            Encrypt 的摘要说明。(加密解密)
            </summary>
        </member>
        <member name="M:Base.Fun.Encrypt.Basic_Encrypt(System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="Input">要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Encrypt.Basic_Decrypt(System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="Input">要解密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Encrypt.Encrypt3DES(System.String)">
            <summary>
            3des加密字符串
            </summary>
            <param name="a_strString">要加密的字符串</param>
            <returns>加密后并经base64编码的字符串</returns>
            <remarks>静态方法，采用默认ascii编码</remarks>
        </member>
        <member name="M:Base.Fun.Encrypt.Encrypt3DES(System.String,System.String)">
            <summary>
            3des加密字符串(不支持中文）
            </summary>
            <param name="a_strString">要加密的字符串</param>
            <param name="a_strKey">密钥</param>
            <returns>加密后并经base64编码的字符串</returns>
            <remarks>静态方法，采用默认ascii编码</remarks>
        </member>
        <member name="M:Base.Fun.Encrypt.Encrypt3DES(System.String,System.String,System.Text.Encoding)">
            <summary>
            3des加密字符串
            </summary>
            <param name="a_strString">要加密的字符串</param>
            <param name="a_strKey">密钥</param>
            <param name="encoding">编码方式</param>
            <returns>加密后并经base63编码的字符串</returns>
            <remarks>重载，指定编码方式</remarks>
        </member>
        <member name="M:Base.Fun.Encrypt.Decrypt3DES(System.String)">
            <summary>
            3des解密字符串
            </summary>
            <param name="a_strString">要解密的字符串</param>
            <returns>解密后的字符串</returns>
            <remarks>静态方法，采用默认ascii编码</remarks>
        </member>
        <member name="M:Base.Fun.Encrypt.Decrypt3DES(System.String,System.String)">
            <summary>
            3des解密字符串（不支持中文）
            </summary>
            <param name="a_strString">要解密的字符串</param>
            <param name="a_strKey">密钥</param>
            <returns>解密后的字符串</returns>
            <remarks>静态方法，采用默认ascii编码</remarks>
        </member>
        <member name="M:Base.Fun.Encrypt.Decrypt3DES(System.String,System.String,System.Text.Encoding)">
            <summary>
            3des解密字符串
            </summary>
            <param name="a_strString">要解密的字符串</param>
            <param name="a_strKey">密钥</param>
            <param name="encoding">编码方式</param>
            <returns>解密后的字符串</returns>
            <remarks>静态方法，指定编码方式</remarks>
        </member>
        <member name="T:Base.Fun.Regxp_HtmlLabel">
            <summary>
            连接信息
            </summary>
        </member>
        <member name="P:Base.Fun.Regxp_HtmlLabel.HtmlCode">
            <summary>
            html代码
            </summary>
        </member>
        <member name="P:Base.Fun.Regxp_HtmlLabel.UrlStart">
            <summary>
            地址前缀
            </summary>
        </member>
        <member name="P:Base.Fun.Regxp_HtmlLabel.Url">
            <summary>
            地址
            </summary>
        </member>
        <member name="T:Base.Fun.Regxp">
            <summary>
            正则
            </summary>
        </member>
        <member name="M:Base.Fun.Regxp.IsUnicode(System.String)">
            <summary>
             判断是否为Unicode码
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.IsNumeric(System.String)">
            <summary>
            判断字符串是否由数字组成
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.IsTelephone(System.String)">
            <summary>
            判断是否电话号码
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.IsMatch(System.String,System.String)">
            <summary>
            正则判断返回真假
            </summary>
            <param name="s">字符串</param>
            <param name="pattern">正则</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.isChinese(System.String)">
            <summary>
            判断字符串是否由汉字组成
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.IsIp(System.String)">
            <summary>
            判断字符串是否是正确的 IP 地址格式
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.IsSafety(System.String)">
            <summary>
            判断字符串是否存在操作数据库的安全隐患
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.IsUrl(System.String)">
            <summary>
            判断字符串是否是正确的 Url 地址格式
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.IsRelativePath(System.String)">
            <summary>
            判断是否为相对地址（虚拟地址）
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.IsPhysicalPath(System.String)">
            <summary>
            判断是否为绝对地址（物理地址）
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.IsEmail(System.String)">
            <summary>
            判断是否为正确的 email 地址格式
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.IsValidEmail(System.String)">
            <summary>
            信箱是否合法
            </summary>
            <param name="strIn"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.RegxpInput(System.String)">
            <summary>
            正则替换所有的input控件的内容
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.RegExpValue(System.String,System.String)">
            <summary>
            取Name:值;  Name后面的‘值’
            </summary>
            <param name="Str">要取的字符串</param>
            <param name="Rstring">要取的字段</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.RegExpValue(System.String,System.String,System.String,System.String)">
            <summary>
            取Name:值;  Name后面的‘值’
            </summary>
            <param name="Str">要取的字符串</param>
            <param name="Rstring">要取的字段</param>
            <param name="StartStr">开始标识</param>
            <param name="EndStr">结束标识</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.RegExpValueArray(System.String,System.String,System.Int32)">
             <summary>
            运行正则取值
             </summary>
             <param name="Str">要取的字符串</param>
             <param name="RegexValue">正则表达式</param>
             <param name="wz">位置，为0读取整个匹配字符串</param>
             <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.RegExpValue(System.String,System.String,System.Int32)">
            <summary>
            运行正则取值
            </summary>
            <param name="Str">要取的字符串</param>
            <param name="RegexValue">正则表达式</param>
            <param name="wz">位置</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.RegExpListValue(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="Str">要取的字符串</param>
            <param name="Rstring">要取的字段（正则）</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.CleanWordHtml(System.String)">
            <summary>
            清除WORD格式
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.ReadRegexImgSrc(System.String)">
            <summary>
            读取里面的连接地址
            </summary>
            <param name="Content">内容</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.ReadRegexImgSrcArray(System.String)">
            <summary>
            读取里面所有的Img地址
            </summary>
            <param name="Content">内容</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.ReadRegexLink(System.String)">
            <summary>
            读取内容中的连接地址及连接名称
            </summary>
            <param name="Content">内容</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.ReadRegexAllLink(System.String)">
            <summary>
            读取内容中所有的连接地址
            </summary>
            <param name="Content">内容</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.ReadRegexAllImg(System.String)">
            <summary>
            读取里面所有的Img地址
            </summary>
            <param name="Content">内容</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.ReadRegexAllScript(System.String)">
            <summary>
            读取内容中所有的连接地址
            </summary>
            <param name="Content">内容</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.ReadRegexpArray(System.String,System.String,System.String)">
            <summary>
            查询指定信息
            </summary>
            <param name="Content">要查询的内容</param>
            <param name="HtmlTagName">html tagname</param>
            <param name="HtmlOtherMessage">其它的信息，如class= id=</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.ReadRegexpArray(System.String,System.String,System.String,System.Boolean)">
            <summary>
            查询指定信息
            </summary>
            <param name="Content">要查询的内容</param>
            <param name="HtmlTagName">html tagname</param>
            <param name="HtmlOtherMessage">其它的信息，如class= id=</param>
            <param name="IsTabName">是否包含外面的标签信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.ReadRegexpArray_Alone(System.String,System.String,System.String)">
            <summary>
            查询指定信息
            </summary>
            <param name="Content">要查询的内容</param>
            <param name="HtmlTagName">html tagname</param>
            <param name="HtmlOtherMessage">其它的信息，如class= id=</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.ReadRegexp_Alone(System.String,System.String,System.String,System.Int32)">
            <summary>
            查询指定信息
            </summary>
            <param name="Content">要查询的内容</param>
            <param name="HtmlTagName">html tagname</param>
            <param name="HtmlOtherMessage">其它的信息，如class= id=</param>
            <param name="Num">位置从1开始，-1为从最后一个开始读取。</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.ReadRegex(System.String,System.String,System.String,System.Int32)">
            <summary>
            查询信息
            </summary>
            <param name="Content">要查询的内容</param>
            <param name="HtmlTagName">html tagname</param>
            <param name="HtmlOtherMessage">其它的信息，如class= id=</param>
            <param name="wz">从1开始</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.ReadRegex(System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            查询信息
            </summary>
            <param name="Content">要查询的内容</param>
            <param name="HtmlTagName">html tagname</param>
            <param name="HtmlOtherMessage">其它的信息，如class= id=</param>
            <param name="IsTagName">是否包含htmltabname名字</param>
            <param name="wz">从1开始,-1是从最后一个开始读取。</param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Regxp.PlaceRegexString(System.String)">
            <summary>
            正则特殊字符处理
            </summary>
            <param name="Content"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Fun.Session">
            <summary>
            Session
            </summary>
        </member>
        <member name="M:Base.Fun.Session.GetSession(System.String)">
            <summary>
            返回SESSION值 
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Session.GetObjSession(System.String)">
            <summary>
            返回SESSION值 
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.Session.AddSession(System.String,System.String)">
            <summary>
            保存SESSION值 
            </summary>
            <param name="str">Session名称</param>
            <param name="value">Session值</param>
        </member>
        <member name="M:Base.Fun.Session.AddObjSession(System.String,System.Object)">
            <summary>
            保存SESSION值 
            </summary>
            <param name="str">Session名称</param>
            <param name="value">Session值</param>
        </member>
        <member name="M:Base.Fun.Session.ClearSession(System.String)">
            <summary>
            请除Session值
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Base.Fun.Session.PreventRefresh(System.Int32,System.String)">
            <summary>
            保存session的防刷新
            </summary>
            <param name="RefreshTime">时间间隔</param>
            <param name="ttu">要保存的字符串</param>
            <returns>能继续的时候返回真。在时间内的返回假</returns>
        </member>
        <member name="T:Base.Fun.SHA1">
            <summary>
            SHA加密
            </summary>
        </member>
        <member name="M:Base.Fun.SHA1.GetSHA1(System.String)">
            <summary>
            SHA1加密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.SHA1.hashHMAC(System.String,System.String)">
            <summary>
            hash_hmac "sha1" 来自：hash_hmac("sha1", $mk, strtr($secret, '-_', '+/'), true);
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Fun.SHA1.HmacSha1Sign(System.String,System.String)">
            <summary>
            与java匹配的HamcSha1加密方式
            </summary>
            <param name="input"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Fun.TextToMark">
            <summary>
            文字转图片
            </summary>
        </member>
        <member name="M:Base.Fun.TextToMark.#ctor">
            <summary>
            文字转图片
            </summary>
        </member>
        <member name="M:Base.Fun.TextToMark.Create">
            
            <summary>
            立即生成水印效果图
            </summary>
            <returns>生成成功返回true,否则返回false</returns>
        </member>
        <member name="M:Base.Fun.TextToMark.FontList(System.Int32)">
            <summary>
            得到字体
            </summary>
            <returns></returns>
        </member>
        <member name="P:Base.Fun.TextToMark.FontFamily">
            
            <summary>
            字体
            </summary>
        </member>
        <member name="P:Base.Fun.TextToMark.FontSize">
            
            <summary>
            文字大小
            </summary>
        </member>
        <member name="P:Base.Fun.TextToMark.FontStyleStr">
            
            <summary>
            文字风格b,i,s,u
            </summary>
        </member>
        <member name="P:Base.Fun.TextToMark.Alpha">
            
            <summary>
            透明度0-255,255表示不透明
            </summary>
        </member>
        <member name="P:Base.Fun.TextToMark.Shadow">
            
            <summary>
            水印文字是否使用阴影
            </summary>
        </member>
        <member name="P:Base.Fun.TextToMark.Width">
            <summary>
            宽
            </summary>
        </member>
        <member name="P:Base.Fun.TextToMark.Height">
            <summary>
            高
            </summary>
        </member>
        <member name="P:Base.Fun.TextToMark.BackgroundImage">
            
            <summary>
            底图
            </summary>
        </member>
        <member name="P:Base.Fun.TextToMark.Left">
            
            <summary>
            水印文字的左边距
            </summary>
        </member>
        <member name="P:Base.Fun.TextToMark.Top">
            
            <summary>
            水印文字的顶边距
            </summary>
        </member>
        <member name="P:Base.Fun.TextToMark.ResultImage">
            
            <summary>
            生成后的图片
            </summary>
        </member>
        <member name="P:Base.Fun.TextToMark.Text">
            
            <summary>
            水印文本
            </summary>
        </member>
        <member name="P:Base.Fun.TextToMark.BgColor">
            <summary>
            背景颜色，空为白色
            </summary>
        </member>
        <member name="P:Base.Fun.TextToMark.Quality">
            
            <summary>
            输出图片质量，质量范围0-100,类型为long
            </summary>
        </member>
        <member name="P:Base.Fun.TextToMark.SaveExt">
            <summary>
            扩展名
            </summary>
        </member>
        <member name="P:Base.Fun.TextToMark.FontColor">
            <summary>
            字体颜色
            </summary>
        </member>
        <member name="T:Base.Fun.CompressionType">
            
            <summary>
            压缩方式。
            </summary>
        </member>
        <member name="F:Base.Fun.CompressionType.GZip">
            
            <summary>
            GZip 压缩格式
            </summary>
        </member>
        <member name="F:Base.Fun.CompressionType.BZip2">
            
            <summary>
            BZip2 压缩格式
            </summary>
        </member>
        <member name="F:Base.Fun.CompressionType.Zip">
            
            <summary>
            Zip 压缩格式
            </summary>
        </member>
        <member name="T:Base.Fun.Zip">
            
            <summary>
            使用 SharpZipLib 进行压缩的辅助类，简化对字节数组和字符串进行压缩的操作。
            </summary>
        </member>
        <member name="F:Base.Fun.Zip.CompressionProvider">
            
            <summary>
            压缩供应者，默认为 GZip。
            </summary>
        </member>
        <member name="M:Base.Fun.Zip.Compress(System.Byte[])">
            
            <summary>
            从原始字节数组生成已压缩的字节数组。
            </summary>
            <param name="bytesToCompress">原始字节数组。</param>
            <returns>返回已压缩的字节数组</returns>
        </member>
        <member name="M:Base.Fun.Zip.Compress(System.String)">
            
            <summary>
            从原始字符串生成已压缩的字符串。
            </summary>
            <param name="stringToCompress">原始字符串。</param>
            <returns>返回已压缩的字符串。</returns>
        </member>
        <member name="M:Base.Fun.Zip.CompressToByte(System.String)">
            
            <summary>
            从原始字符串生成已压缩的字节数组。
            </summary>
            <param name="stringToCompress">原始字符串。</param>
            <returns>返回已压缩的字节数组。</returns>
        </member>
        <member name="M:Base.Fun.Zip.DeCompress(System.String)">
            
            <summary>
            从已压缩的字符串生成原始字符串。
            </summary>
            <param name="stringToDecompress">已压缩的字符串。</param>
            <returns>返回原始字符串。</returns>
        </member>
        <member name="M:Base.Fun.Zip.DeCompress(System.Byte[])">
            
            <summary>
            从已压缩的字节数组生成原始字节数组。
            </summary>
            <param name="bytesToDecompress">已压缩的字节数组。</param>
            <returns>返回原始字节数组。</returns>
        </member>
        <member name="M:Base.Fun.Zip.OutputStream(System.IO.Stream)">
            
            <summary>
            从给定的流生成压缩输出流。
            </summary>
            <param name="inputStream">原始流。</param>
            <returns>返回压缩输出流。</returns>
        </member>
        <member name="M:Base.Fun.Zip.InputStream(System.IO.Stream)">
            
            <summary>
            从给定的流生成压缩输入流。
            </summary>
            <param name="inputStream">原始流。</param>
            <returns>返回压缩输入流。</returns>
        </member>
        <member name="T:Base.IIS.AccessFlags">
            <summary>
            
            </summary>
        </member>
        <member name="F:Base.IIS.AccessFlags.AccessRead">
            
            <summary>
            值 true 表示可通过 Microsoft Internet Explorer 读取文件或文件夹的内容。
            </summary>
        </member>
        <member name="F:Base.IIS.AccessFlags.AccessScript">
            
            <summary>
            值 true 表示如果是脚本文件或静态内容，则可以执行文件或文件夹的内容。值 false 只允许提供静态文件，如 HTML 文件。
            </summary>
        </member>
        <member name="F:Base.IIS.AccessFlags.AccessExecute">
            
            <summary>
            值 true 表示不论文件类型是什么，文件或文件夹的内容都可以执行。
            </summary>
        </member>
        <member name="F:Base.IIS.AccessFlags.AccessSource">
            
            <summary>
            值 true 表示如果设置了读取或写入权限，则允许用户访问源代码。源代码包括 Microsoft Active Server Pages (ASP) 应用程序中的脚本。
            </summary>
        </member>
        <member name="F:Base.IIS.AccessFlags.AccessWrite">
            
            <summary>
            值 true 表示允许用户将文件及其相关属性上载到服务器上已启用的目录中，或者更改可写文件的内容。只有使用支持 HTTP 1.1 协议标准的 PUT 功能的浏览器，才能执行写入操作。
            </summary>
        </member>
        <member name="F:Base.IIS.AccessFlags.AccessNoPhysicalDir">
            
            <summary>
            AccessNoPhysicalDir
            </summary>
        </member>
        <member name="F:Base.IIS.AccessFlags.AccessNoRemoteExecute">
            
            <summary>
            值 true 表示拒绝远程请求执行应用程序；如果将 AccessExecute 属性设置为 true，只有来自 IIS 服务器所在的相同计算机的请求才会成功。您不能将 AccessNoRemoteExecute 设置为 false 来启用远程请求，或将 AccessExecute 设置为 false 来禁止本地请求。
            </summary>
        </member>
        <member name="F:Base.IIS.AccessFlags.AccessNoRemoteRead">
            
            <summary>
            值 true 表示拒绝远程请求查看文件；如果将 AccessRead 属性设置为 true，只有来自 IIS 服务器所在的相同计算机的请求才会成功。您不能将 AccessNoRemoteRead 设置为 false 来启用远程请求，或将 AccessRead 设置为 false 来禁止本地请求。
            </summary>
        </member>
        <member name="F:Base.IIS.AccessFlags.AccessNoRemoteScript">
            
            <summary>
            值 true 表示拒绝远程请求查看动态内容；如果将 AccessScript 属性设置为 true，只有来自 IIS 服务器所在的相同计算机的请求才会成功。您不能将 AccessNoRemoteScript 设置为 false 来启用远程请求，或将 AccessScript 设置为 false 来禁止本地请求。
            </summary>
        </member>
        <member name="F:Base.IIS.AccessFlags.AccessNoRemoteWrite">
            
            <summary>
            值 true 表示拒绝远程请求创建或更改文件；如果将 AccessWrite 属性设置为 true，只有来自 IIS 服务器所在的相同计算机的请求才会成功。您不能将 AccessNoRemoteWrite 设置为 false 来启用远程请求，或将 AccessWrite 设置为 false 来禁止本地请求。
            </summary>
        </member>
        <member name="F:Base.IIS.AccessFlags.AccessFlagValueCollections">
            
            <summary>
            AccessFlag 值定义
            </summary>
        </member>
        <member name="M:Base.IIS.AccessFlags.Value">
            
            <summary>
            转换为整型
            * 使用说明
            AccessFlag af = new AccessFlag();
            af.AccessRead = true;
            af.AccessScript = true;
            Console.WriteLine(af.Value().tostring); //=513
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.IIS.AccessFlags.ValueToProperty(System.Int32)">
            
            <summary>
            转换为自定义的AccessFlag属性
            * 使用说明
            AccessFlags af = new AccessFlags();
            af = af.ValueToProperty(513);
            if (af.AccessRead) this.AccessFlags.SelectedValue = "AccessRead";
            if (af.AccessScript) this.AccessFlags.SelectedValue = "AccessScript";
            if (af.AccessExecute) this.AccessFlags.SelectedValue = "AccessExecute";
            if (af.AccessSource) this.AccessFlagOthers.Items[0].Selected = true;
            if (af.AccessWrite) this.AccessFlagOthers.Items[1].Selected = true;
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:Base.IIS.AccessFlags.Convert(System.Int32,System.Int32[])">
            
            <summary>
            由ADSI值拆分成数值
            </summary>
            <param name="adsiValue">ADSI值</param>
            <param name="Collections">数据集合</param>
            <returns></returns>
        </member>
        <member name="T:Base.IIS.addsite">
            <summary>
            IIS操作
            </summary>
        </member>
        <member name="F:Base.IIS.addsite.LOGON32_LOGON_INTERACTIVE">
            <summary>
            IIS infos end;
            </summary>
        </member>
        <member name="F:Base.IIS.addsite.LOGON32_PROVIDER_DEFAULT">
            <summary>
            默认值设置
            </summary>
        </member>
        <member name="F:Base.IIS.addsite.Re">
            <summary>
            iis infos begin
            </summary>
        </member>
        <member name="F:Base.IIS.addsite.webindex">
            <summary>
            默认页
            </summary>
        </member>
        <member name="F:Base.IIS.addsite.website">
            <summary>
            主机头
            </summary>
        </member>
        <member name="F:Base.IIS.addsite.webstate">
            <summary>
            运行状态（2为正常，4为停止,6为暂停,）
            </summary>
        </member>
        <member name="F:Base.IIS.addsite.url404">
            <summary>
            Url404错误页
            </summary>
        </member>
        <member name="F:Base.IIS.addsite.url500">
            <summary>
            Url500错误页
            </summary>
        </member>
        <member name="F:Base.IIS.addsite.brow">
            <summary>
            未知
            </summary>
        </member>
        <member name="M:Base.IIS.addsite.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            供外部调用，添加站点
            </summary>
            <param name="virdirpath">虚拟空间的路径</param>
            <param name="virdirname">网站名</param>
            <param name="srvip">服务器IP地址</param>
            <param name="webname">网站名称，主机头</param>
            <param name="port">端口</param>
            <param name="uname">服务器上的iis管理员名(模拟用的)</param>
            <param name="domain">服务器上的iis所在的域(模拟用的)</param>
            <param name="pwd">服务器上的iis的密码(模拟用的)</param>        
        </member>
        <member name="M:Base.IIS.addsite.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            添加站点信息
            </summary>
            <param name="webname"></param>
            <param name="uname"></param>
            <param name="domain"></param>
            <param name="pwd"></param>
        </member>
        <member name="M:Base.IIS.addsite.CreateInstance(System.Management.ConnectionOptions,System.String)">
            <summary>
            Create bindings object in WMI repository
            </summary>
            <param name="oConn"></param>
            <param name="srvip"></param>
            <returns></returns>
        </member>
        <member name="M:Base.IIS.addsite.CreateNewSite(System.Management.ManagementObject,System.String,System.Management.ManagementBaseObject[],System.String)">
            <summary>
             Create new site
            </summary>
            <param name="nac"></param>
            <param name="PathOfRootVirtualDir"></param>
            <param name="ServerBindings"></param>
            <param name="ServerComment"></param>
            <returns></returns>
        </member>
        <member name="T:Base.IIS.getiisinfo">
            <summary>
            IIS获得站点信息
            </summary>
        </member>
        <member name="F:Base.IIS.getiisinfo.srvcomment">
            <summary>
            描述
            </summary>
        </member>
        <member name="F:Base.IIS.getiisinfo.srvip">
            <summary>
            主机IP
            </summary>
        </member>
        <member name="F:Base.IIS.getiisinfo.srvport">
            <summary>
            端口
            </summary>
        </member>
        <member name="F:Base.IIS.getiisinfo.srvurl">
            <summary>
            域名
            </summary>
        </member>
        <member name="F:Base.IIS.getiisinfo.srvdirpath">
            <summary>
            虚拟路径
            </summary>
        </member>
        <member name="F:Base.IIS.getiisinfo.website">
            <summary>
            主机头
            </summary>
        </member>
        <member name="F:Base.IIS.getiisinfo.webindex">
            <summary>
            默认页
            </summary>
        </member>
        <member name="F:Base.IIS.getiisinfo.webstate">
            <summary>
            运行状态（2为正常，4为停止,6为暂停）
            </summary>
        </member>
        <member name="F:Base.IIS.getiisinfo.url404">
            <summary>
            Url404错误页
            </summary>
        </member>
        <member name="F:Base.IIS.getiisinfo.url500">
            <summary>
            Url500错误页
            </summary>
        </member>
        <member name="F:Base.IIS.getiisinfo.AspScriptTimeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="F:Base.IIS.getiisinfo.AspSessionTimeout">
            <summary>
            SESSION超时时间
            </summary>
        </member>
        <member name="F:Base.IIS.getiisinfo.brow">
            <summary>
            判断
            </summary>
        </member>
        <member name="F:Base.IIS.getiisinfo.para_webdomain">
            <summary>
            未知
            </summary>
        </member>
        <member name="M:Base.IIS.getiisinfo.#ctor">
            <summary>
            空函数
            </summary>
        </member>
        <member name="M:Base.IIS.getiisinfo.#ctor(System.String)">
            <summary>
            获得信息
            </summary>
            <param name="webname">站点名称</param>
        </member>
        <member name="M:Base.IIS.getiisinfo.setiisinfo(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
             <summary>
             设置IIS 属性
             </summary>
             <param name="_webname">网站名，就是comment</param>
             <param name="_defaultdoc">默认首页文件</param>
             <param name="_notfind">404错误转向页</param>
             <param name="_srverr">500服务器内部错误处理页</param>
            <param name="_state">网站状态,关闭，运行，还是暂停</param>
            <param name="_website">绑定的主机头</param>
             <param name="_browdir">可否浏览文件夹</param>
        </member>
        <member name="M:Base.IIS.getiisinfo.setiisinfo(System.String,System.String,System.String)">
            <summary>
            设置站点属性
            </summary>
            <param name="_webname">站点名称</param>
            <param name="_notfind">400页</param>
            <param name="_srverr">500页</param>
        </member>
        <member name="M:Base.IIS.getiisinfo.setiisinfo(System.String,System.String)">
            <summary>
            设置站点属性（默认页）
            </summary>
            <param name="_webname"></param>
            <param name="_defaultdoc"></param>
        </member>
        <member name="M:Base.IIS.getiisinfo.setiisinfo(System.String)">
            <summary>
            设置站点支持asp.net
            </summary>
            <param name="_webname">站点名称</param>
        </member>
        <member name="M:Base.IIS.getiisinfo.webdomain(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            站点域名及名称修改
            </summary>
            <param name="HostName">主机头</param>
            <param name="para_webdomain">站点名称</param>
            <param name="new_webdomain">新站点名称</param>
            <param name="DoMainName">域名地址</param>
            <param name="postvalue">端口号</param>
        </member>
        <member name="M:Base.IIS.getiisinfo.GetDirectoryEntry(System.String,System.String,System.String)">
            <summary>
            获得一个目录的特殊权限
            </summary>
            <param name="entPath"></param>
            <param name="UserName"></param>
            <param name="Password"></param>
            <returns></returns>
        </member>
        <member name="M:Base.IIS.getiisinfo.DeleteWebSiteByName(System.String,System.String)">
            <summary>
            删除站点
            </summary>
            <param name="siteName">网站名,就是comment</param>
            <param name="HostName">默认值填写localhost</param>
        </member>
        <member name="M:Base.IIS.getiisinfo.HttpRedirect(System.String,System.String,System.String,System.String)">
            <summary>
            修改一个目录的转向定位
            </summary>
            <param name="siteName">IIS名称或者是域名</param>
            <param name="HostName">默认localhost</param>
            <param name="Path">目录</param>
            <param name="WebPath">跳转域名</param>
        </member>
        <member name="M:Base.IIS.getiisinfo.GetWebsitePhysicalPath(System.DirectoryServices.DirectoryEntry)">
            <summary>
            得到网站的物理路径
            </summary>
            <param name="rootEntry">网站节点</param>
            <returns></returns>
        </member>
        <member name="M:Base.IIS.getiisinfo.WebSiteStatus(System.String,System.String,System.String)">
            <summary>
            修改站点状态
            </summary>
            <param name="siteName">网站名称</param>
            <param name="HostName">IP</param>
            <param name="Status">状态Start,Stop</param>
            <returns></returns>
        </member>
        <member name="M:Base.IIS.getiisinfo.GetWebSiteNum(System.String,System.String)">
            <summary>
            查找站点
            </summary>
            <param name="siteName">IIS名称或者是域名</param>
            <param name="HostName">默认为localhost</param>
            <returns></returns>
        </member>
        <member name="M:Base.IIS.getiisinfo.SetWebSiteDhtml(System.String,System.String)">
            <summary>
            查找站点并设置伪静态支持
            </summary>
            <param name="siteName">IIS名称或者是域名</param>
            <param name="HostName">默认为localhost</param>
            <returns></returns>
        </member>
        <member name="M:Base.IIS.getiisinfo.GetIISVersion">
            <summary>
            iis版本(6.0需要添加。7.0以上不需要）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.IIS.getiisinfo.SetIISDhtml(System.DirectoryServices.DirectoryEntry)">
            <summary>
            设置
            </summary>
            <param name="entrypool"></param>
        </member>
        <member name="T:Base.IIS.imp">
            <summary>
            imp 的摘要说明
            一般用于模拟管理员权限，赋值给某段代码以管理员权限执行
            需要在aspx文件的, %@ page中增加 aspCompact="true"
            </summary>
        </member>
        <member name="F:Base.IIS.imp.LOGON32_LOGON_INTERACTIVE">
            <summary>
            内部变量
            </summary>
        </member>
        <member name="F:Base.IIS.imp.LOGON32_PROVIDER_DEFAULT">
            <summary>
            内部变量
            </summary>
        </member>
        <member name="M:Base.IIS.imp.#ctor(System.String,System.String,System.String)">
            <summary>
            模拟特定的用户，一般是有特权的用户
            </summary>
            <param name="adminname">用户名</param>
            <param name="adminpass">密码</param>
            <param name="admindomain">域</param>
        </member>
        <member name="T:Base.Mail.POP3Mail">
            <summary>
            收邮件
            </summary>
        </member>
        <member name="M:Base.Mail.POP3Mail.DecodeBase64(System.String)">
            <summary>
            base64 解码
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Mail.POP3Mail.DecodeQ(System.String)">
            <summary>
             quoted-printable  解码 
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Mail.POP3Mail.#ctor">
            <summary>
            收邮件
            </summary>
        </member>
        <member name="M:Base.Mail.POP3Mail.#ctor(System.String,System.String,System.String)">
            <summary>
            接收邮件服务器相关信息
            </summary>
            <param name="server">参数 pop邮件服务器地址  </param>
            <param name="_user">参数 登录到pop邮件服务器的用户名  </param>
            <param name="_pwd">参数  登录到pop邮件服务器的密码</param>
            <returns>无返回</returns>
        </member>
        <member name="M:Base.Mail.POP3Mail.Connect">
            <summary>
            登陆服务器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Mail.POP3Mail.Connecttest(System.Net.Sockets.TcpClient)">
            <summary>
            为了读到数据流中的正确信息，重新建的一个方法（只是在读邮件详细信息是用到《即GetNewMessages（）方法中用到，这样就可以正常显示邮件正文的中英文》）
            </summary>
            <param name="tcpc">连接</param>
        </member>
        <member name="M:Base.Mail.POP3Mail.GetNumberOfNewMessages">
            <summary>
            获取邮件数目
            </summary>
            <returns>返回  int  邮件数目</returns>
        </member>
        <member name="M:Base.Mail.POP3Mail.GetNewMessages">
            <summary>
            获取所有新邮件
            </summary>
            <returns>  返回 ArrayList</returns>
        </member>
        <member name="M:Base.Mail.POP3Mail.GetRawMessage(System.Net.Sockets.TcpClient,System.Int32)">
            <summary>
            从服务器读邮件信息
            </summary>
            <param name="tcpc">连接</param>
            <param name="messagenumber">邮件编号</param>
            <returns></returns>
        </member>
        <member name="M:Base.Mail.POP3Mail.GetMessageSubject(System.Collections.ArrayList)">
            <summary>
            获取邮件标题
            </summary>
            <param name="msglines">邮件列表</param>
            <returns></returns>
        </member>
        <member name="M:Base.Mail.POP3Mail.GetMessageFrom(System.Collections.ArrayList)">
            <summary>
            获取邮件的发送人地址
            </summary>
            <param name="msglines">邮件列表</param>
            <returns></returns>
        </member>
        <member name="M:Base.Mail.POP3Mail.GetMessageBody(System.Collections.ArrayList)">
            <summary>
            邮件正文
            </summary>
            <param name="msglines">邮件列表</param>
            <returns></returns>
        </member>
        <member name="M:Base.Mail.POP3Mail.DeleteMessage(System.Int32)">
             <summary>
            根据输入的数字，删除相应编号的邮件
             </summary>
             <param name="messagenumber">参数 删除第几封邮件  </param>
             <returns>返回  bool true成功；false  失败</returns>
        </member>
        <member name="T:Base.Network.Upload">
            <summary>
            上传文件
            </summary>
        </member>
        <member name="M:Base.Network.Upload.SendFile(System.String,System.String,System.String)">
            <summary>
            上传文件（上传大文件的时候要注意）
            </summary>
            <param name="fileName">文件绝对地址</param>
            <param name="fileInputName">控件名称</param>
            <param name="url">上传的地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Network.Upload.SendFileBlock(System.String,System.String,System.String,System.Int32)">
            <summary>
            上传文件（上传大文件的时候要注意）
            </summary>
            <param name="fileName">文件绝对地址</param>
            <param name="fileInputName">控件名称</param>
            <param name="url">上传的地址</param>
            <param name="BlockSize">4096</param>
            <returns></returns>
        </member>
        <member name="M:Base.Network.Upload.SendFieldBlock2(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            分块上传文件
            </summary>
            <param name="fileName"></param>
            <param name="fileInputName"></param>
            <param name="url"></param>
            <param name="StartBlcok"></param>
            <param name="BlockSize"></param>
            <param name="IsEnd"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Network.Upload.HttpUploadFile(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.Text.Encoding)">
            <summary>
            HttpUploadFile
            </summary>
            <param name="url"></param>
            <param name="files"></param>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Office.Excel">
             <summary>
            Excel 的摘要说明
             </summary>
        </member>
        <member name="M:Base.Office.Excel.#ctor">
            <summary>
            Excel
            </summary>
        </member>
        <member name="M:Base.Office.Excel.#ctor(System.Data.DataTable,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="Data">DataTable数据</param>
            <param name="FileName">文件名</param>
            <param name="FilePath">路径</param>
        </member>
        <member name="M:Base.Office.Excel.Write">
            <summary>
            写入简单的xlt文件tab换列(默认gb2312格式)
            </summary>
        </member>
        <member name="P:Base.Office.Excel.Data">
            <summary>
            DataTable数据
            </summary>
        </member>
        <member name="P:Base.Office.Excel.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Base.Office.Excel.FilePath">
            <summary>
            文件地址
            </summary>
        </member>
        <member name="T:Base.Ftp.FileStruct">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="T:Base.Ftp.FileListStyle">
            <summary>
            FTP服务器特征信息
            </summary>
        </member>
        <member name="F:Base.Ftp.FileListStyle.UnixStyle">
            <summary>
            unix系统
            </summary>
        </member>
        <member name="F:Base.Ftp.FileListStyle.WindowsStyle">
            <summary>
            windows系统
            </summary>
        </member>
        <member name="F:Base.Ftp.FileListStyle.Unknown">
            <summary>
            其它
            </summary>
        </member>
        <member name="M:Base.Ftp.FtpDirInfo.ListFiles(Base.Ftp.FileStruct[])">
            <summary>
            列出FTP服务器上面当前目录的所有文件
            </summary>
            <param name="listAll"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Ftp.FtpDirInfo.ListDirectorles(Base.Ftp.FileStruct[])">
            <summary>
            列出Ftp服务器上面当前目录的所有的目录
            </summary>
            <param name="listAll"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Ftp.FtpDirInfo.GetList(System.String)">
            <summary>
            获得文件和目录列表
            </summary>
            <param name="datastring">FTP返回的列表字符信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Ftp.FtpDirInfo.ParseFileStructFromWindowsStyleRecord(System.String)">
            <summary>
            
            </summary>
            <param name="Record"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Ftp.FtpDirInfo.GuessFileListStyle(System.String[])">
            <summary>
            判断文件列表的方式window方式还是unix方式
            </summary>
            <param name="recordList">文件信息列表</param>
            <returns></returns>
        </member>
        <member name="M:Base.Ftp.FtpDirInfo.ParseFileStructFromUnixStyleRecord(System.String)">
            <summary>
            从unix格式中返回文件信息
            </summary>
            <param name="Record">文件信息</param>
            <returns></returns>
        </member>
        <member name="M:Base.Ftp.FtpDirInfo._cutSubstringFromStringWidthTrim(System.String@,System.Char,System.Int32)">
            <summary>
            按照一定的规则进行字符串截取
            </summary>
            <param name="s">截取的字符串</param>
            <param name="c">查找的字符</param>
            <param name="startIndex">查找的位置</param>
            <returns></returns>
        </member>
        <member name="T:Base.Ftp.FTP">
            <summary>
            FTP类
            </summary>
        </member>
        <member name="M:Base.Ftp.FTP.Connect(System.String)">
            <summary>
            连接FTP
            </summary>
            <param name="path">地址信息</param>
        </member>
        <member name="M:Base.Ftp.FTP.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            设置
            </summary>
            <param name="ftpServerIP">FTP地址</param>
            <param name="ftpUserID">用户名</param>
            <param name="ftpPassword">密码</param>
            <param name="usePassive">true为被动false为主动</param>
        </member>
        <member name="M:Base.Ftp.FTP.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            设置
            </summary>
            <param name="ftpServerIP">FTP地址</param>
            <param name="ftpUserID">用户名</param>
            <param name="ftpPassword">密码</param>
            <param name="strRemotePort">端口号</param>
            <param name="usePassive">true为被动false为主动</param>
        </member>
        <member name="M:Base.Ftp.FTP.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            设置
            </summary>
            <param name="ftpServerIP">FTP地址</param>
            <param name="ftpUserID">用户名</param>
            <param name="ftpPassword">密码</param>
            <param name="strRemotePort">端口号</param>
        </member>
        <member name="M:Base.Ftp.FTP.#ctor(System.String,System.String,System.String)">
            <summary>
            设置
            </summary>
            <param name="ftpServerIP"></param>
            <param name="ftpUserID"></param>
            <param name="ftpPassword"></param>
        </member>
        <member name="M:Base.Ftp.FTP.GetFileList(System.String,System.String)">
            <summary>
            都调用这个
            从ftp服务器上获得文件列表
            </summary>
            <param name="path">路径</param>
            <param name="WRMethods">ftp命令</param>
            <returns></returns>
        </member>
        <member name="M:Base.Ftp.FTP.GetFileList(System.String)">
            <summary>
            从ftp服务器上获得文件列表
            </summary>
            <param name="path">ftp路径</param>
            <returns></returns>
        </member>
        <member name="M:Base.Ftp.FTP.GetFileList">
            <summary>
            从ftp服务器上获得文件列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Ftp.FTP.Download(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="filePath">文件存放地址</param>
            <param name="fileName">服务器文件名</param>
        </member>
        <member name="M:Base.Ftp.FTP.Upload(System.String,System.String)">
            <summary>
            从ftp服务器上载文件的功能
            </summary>
            <param name="path">要传到什么路径前面不需要/后面要加</param>
            <param name="filename">本地文件绝对路径</param>
        </member>
        <member name="M:Base.Ftp.FTP.DeleteFileName(System.String,System.String)">
            <summary>
            删除文件
            </summary>
            <param name="Path">文件所在目录</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Base.Ftp.FTP.IsExistDir(System.String)">
            <summary>
            判断目录是否存在
            </summary>
            <param name="dirName">路径名称</param>
        </member>
        <member name="M:Base.Ftp.FTP.MakeDir(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="dirName">路径名称</param>
        </member>
        <member name="M:Base.Ftp.FTP.delDir(System.String)">
            <summary>
            删除目录
            </summary>
            <param name="dirName">路径名称</param>
        </member>
        <member name="M:Base.Ftp.FTP.GetFileSize(System.String)">
            <summary>
            获得文件大小服务器文件
            </summary>
            <param name="filename">文件名包括地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Ftp.FTP.Rename(System.String,System.String)">
            <summary>
            文件改名
            </summary>
            <param name="currentFilename">本地文件</param>
            <param name="newFilename">文件名</param>
        </member>
        <member name="M:Base.Ftp.FTP.GetFilesDetailList">
            <summary>
            获得文件明晰
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Ftp.FTP.GetFilesDetailList(System.String)">
            <summary>
            获得文件明晰
            </summary>
            <param name="path">路径</param>
            <returns></returns>
        </member>
        <member name="M:Base.Ftp.FTP.GetDeleteFolderArray(System.String)">
            <summary>
            获取子文件夹数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Ftp.FTP.GetDeleteFileArray(System.String)">
            <summary>
            获取子文件数组
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Ftp.FTP.DeleteDir(System.String)">
            <summary>
            删除目录（有子目录的）
            </summary>
            <param name="path"></param>
        </member>
        <member name="P:Base.Ftp.FTP.StrErrormessage">
            <summary>
            返回错误信息。
            </summary>
        </member>
        <member name="T:Base.IO.DirMessage">
            <summary>
            目录信息
            </summary>
        </member>
        <member name="M:Base.IO.DirMessage.#ctor">
            <summary>
            目录信息
            </summary>
        </member>
        <member name="M:Base.IO.DirMessage.#ctor(System.String,System.String,System.String)">
            <summary>
            目录信息
            </summary>
            <param name="_Name">目录名</param>
            <param name="_CreateTime">建立时间</param>
            <param name="_LastWriteTime">最后修改时间</param>
        </member>
        <member name="P:Base.IO.DirMessage.Name">
            <summary>
            目录名称
            </summary>
        </member>
        <member name="P:Base.IO.DirMessage.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Base.IO.DirMessage.LastWriteTime">
            <summary>
            最后修改时间
            </summary>
        </member>
        <member name="T:Base.IO.FileMessage">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="M:Base.IO.FileMessage.#ctor">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="M:Base.IO.FileMessage.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            文件信息
            </summary>
            <param name="_Name">名称</param>
            <param name="_CreateTime">建立时间</param>
            <param name="_LastWriteTime">最后修改时间</param>
            <param name="_FileSize">文件大小</param>
        </member>
        <member name="P:Base.IO.FileMessage.Name">
            <summary>
            目录名称
            </summary>
        </member>
        <member name="P:Base.IO.FileMessage.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Base.IO.FileMessage.LastWriteTime">
            <summary>
            最后修改时间
            </summary>
        </member>
        <member name="P:Base.IO.FileMessage.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="T:Base.IO.Dir">
            <summary>
            目录
            </summary>
        </member>
        <member name="M:Base.IO.Dir.Combine(System.String,System.String,System.String[])">
            <summary>
            目录连接
            </summary>
            <param name="Path1">目录1</param>
            <param name="Path2">目录2</param>
            <param name="OtherPath">其它连接目录</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.Dir.ReMoveFileName(System.String)">
            <summary>
            去除文件名。得到目录名
            </summary>
            <param name="path">带文件名的目录，去除最后一个文件名</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.Dir.Plain(System.String)">
            <summary>
            判断绝对和不绝对
            </summary>
            <param name="path">目录名称</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.Dir.AirDelDir(System.String)">
            <summary>
            删除空目录      /分隔的
            </summary>
            <param name="DirPath">目录地址</param>
        </member>
        <member name="M:Base.IO.Dir.CopyDir(System.String,System.String)">
            <summary>
            复制文件夹
            </summary>
            <param name="source">复制的源路径</param>
            <param name="d">复制的目标路径</param>
        </member>
        <member name="M:Base.IO.Dir.CheckDir(System.String)">
            <summary>
            创建新的文件夹，返回目录名称
            </summary>
            <param name="path">路径</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.Dir.ReadDirDate(System.String)">
            <summary>
            获得目录创建时间
            </summary>
            <param name="Path">目录地址簿</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.Dir.IsDir(System.String)">
            <summary>
            判断目录是否存在
            </summary>
            <param name="Path">路径</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.Dir.DelDir(System.String)">
            <summary>
            删除目录
            </summary>
            <param name="Path">路径</param>
        </member>
        <member name="M:Base.IO.Dir.MoveDir(System.String,System.String,System.Boolean)">
            <summary>
            移动目录
            </summary>
            <param name="Path">要移动的源目录</param>
            <param name="ToPath">要移到到的目标目录</param>
            <param name="IsDel">是否删除源目录</param>
        </member>
        <member name="M:Base.IO.Dir.ReadDir(System.String)">
            <summary>
            获得目录下一级子目录（只返回目录名）
            </summary>
            <param name="dir">目录地址</param>
            <returns>字段串</returns>
        </member>
        <member name="M:Base.IO.Dir.ReadDirArray(System.String)">
            <summary>
            获得目录下一级子目录（返回目录名及一些信息）
            </summary>
            <param name="dir">目录地址</param>
            <returns>字段串数组{名称,建立时间,最后写入时间}</returns>
        </member>
        <member name="M:Base.IO.Dir.getDirectorySize(System.String)">
            <summary>
            获取文件夹大小
            </summary>
            <param name="path">绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.Dir.ReadDirFile(System.String)">
            <summary>
            获得目录下所有的文件
            </summary>
            <param name="dir">路径</param>
            <returns>文件名</returns>
        </member>
        <member name="M:Base.IO.Dir.ReadDirFile(System.String,System.Boolean)">
            <summary>
            获得目录下所有的文件
            </summary>
            <param name="dir">路径</param>
            <param name="DirDepth">只获得当前目录下文件</param>
            <returns>文件名</returns>
        </member>
        <member name="M:Base.IO.Dir.ReadDirFile(System.String,System.String)">
            <summary>
            获得目录下所有的文件
            </summary>
            <param name="dir">路径</param>
            <param name="fileext">文件类型*.jpg这样，只支持一个</param>
            <returns>文件名</returns>
        </member>
        <member name="M:Base.IO.Dir.ReadDirFile(System.String,System.String,System.Boolean,System.String)">
            <summary>
            获得目录下所有的文件
            </summary>
            <param name="dir">路径</param>
            <param name="NameDir">目录名称</param>
            <param name="DirDepth">true包括子目录,false当前目录</param>
            <param name="fileext">文件类型*.jpg这样，只支持一个</param>
            <returns>文件名</returns>
        </member>
        <member name="M:Base.IO.Dir.ReadDirFileCount(System.String,System.String)">
            <summary>
            获得目录下文件数量
            </summary>
            <param name="dir">路径</param>
            <param name="fileext">文件类型*.jpg这样，只支持一个</param>
            <returns>文件名</returns>
        </member>
        <member name="M:Base.IO.Dir.ReadDirFileArray(System.String)">
            <summary>
            获得目录下所有的文件
            </summary>
            <param name="dir">路径</param>
            <returns>字符串数组{文件名,建立时间,修改时间,文件大小}</returns>
        </member>
        <member name="M:Base.IO.Dir.ReadDirFileArray(System.String,System.String)">
            <summary>
            获得目录下所有的文件
            </summary>
            <param name="dir">路径</param>
            <param name="fileext">文件类型</param>
            <returns>字符串数组{文件名,建立时间,修改时间,文件大小}</returns>
        </member>
        <member name="M:Base.IO.Dir.SysDir">
            <summary>
            获得windows目录
            </summary>
            <returns></returns>
        </member>
        <member name="T:Base.IO.Encod">
            <summary>
            用于取得一个文本文件的编码方式(Encoding)。
            </summary>
        </member>
        <member name="M:Base.IO.Encod.#ctor">
            <summary>
            编码方式
            </summary>
        </member>
        <member name="M:Base.IO.Encod.GetEncoding(System.String)">
            <summary>
            取得一个文本文件的编码方式。如果无法在文件头部找到有效的前导符，Encoding.Default将被返回。
            </summary>
            <param name="fileName">文件名。</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.Encod.GetEncoding(System.IO.FileStream)">
            <summary>
            取得一个文本文件流的编码方式。
            </summary>
            <param name="stream">文本文件流。</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.Encod.GetEncoding(System.String,System.Text.Encoding)">
            <summary>
            取得一个文本文件的编码方式。
            </summary>
            <param name="fileName">文件名。</param>
            <param name="defaultEncoding">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.Encod.GetEncoding(System.IO.FileStream,System.Text.Encoding)">
            <summary>
            取得一个文本文件流的编码方式。
            </summary>
            <param name="fs">文本文件流。</param>
            <param name="defaultEncoding">默认编码方式。当该方法无法从文件的头部取得有效的前导符时，将返回该编码方式。</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.Encod.IsUTF8Bytes(System.Byte[])">
            <summary>
            判断是否是不带 BOM 的 UTF8 格式
            </summary>
            <param name="data">文件字符流</param>
            <returns></returns>
        </member>
        <member name="T:Base.IO.File">
            <summary>
            文件
            </summary>
        </member>
        <member name="M:Base.IO.File.GetMD5HashFromFile(System.String)">
            <summary>
            读取文件的MD5值
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.File.FileNameValue(System.String)">
            <summary>
            看看目录后面是否差文件名
            </summary>
            <param name="Path">目录加文件名</param>
            <returns>带返回真，不带返回假</returns>
        </member>
        <member name="M:Base.IO.File.FileNameSpecial(System.String)">
            <summary>
            去除特殊字段（文件）\/:*?"＜＞｜#
            </summary>
            <param name="FileName">文件名</param>
            <returns>返回删除好的</returns>
        </member>
        <member name="M:Base.IO.File.FileNameSpecialNoX(System.String)">
            <summary>
            去除特殊字段（文件）:*?"＜＞｜#
            </summary>
            <param name="FileName">文件名</param>
            <returns>返回删除好的</returns>
        </member>
        <member name="M:Base.IO.File.Plain(System.String)">
            <summary>
            判断绝对和不绝对
            </summary>
            <param name="path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.File.CreateFileContent(System.String)">
            <summary>
            生成文件的内容转换
            </summary>
            <param name="content">文件内容</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.File.addFileCon(System.String,System.String)">
            <summary>
            追加文件内容(utf-8)
            </summary>
            <param name="content"></param>
            <param name="FilePath"></param>
        </member>
        <member name="M:Base.IO.File.createfile(System.String,System.String)">
            <summary>
            创建文件
            </summary>
            <param name="content">要写入的内容</param>
            <param name="FilePath">文件名及地址</param>
        </member>
        <member name="M:Base.IO.File.createfile(System.String,System.String,System.String)">
            <summary>
            创建文件
            </summary>
            <param name="content">要写入的内容</param>
            <param name="FilePath">文件名及地址</param>
            <param name="TextBm">编码</param>
        </member>
        <member name="M:Base.IO.File.createfile(System.String,System.String,System.Text.Encoding)">
            <summary>
            创建文件
            </summary>
            <param name="content">要写入的内容</param>
            <param name="FilePath">文件名及地址</param>
            <param name="encode">编码</param>
        </member>
        <member name="M:Base.IO.File.createfile(System.String,System.String,System.Text.Encoding,System.Int32,System.Int32)">
            <summary>
            创建文件
            </summary>
            <param name="content">要写入的内容</param>
            <param name="FilePath">文件名及地址</param>
            <param name="encode">编码</param>
            <param name="i">执行次数</param>
            <param name="IMax">最高执行次数</param>
        </member>
        <member name="M:Base.IO.File.create(System.String,System.String,System.Text.Encoding)">
            <summary>
            写入文件
            </summary>
            <param name="content">内容</param>
            <param name="FilePath">文件路径</param>
            <param name="encode">编码</param>
        </member>
        <member name="M:Base.IO.File.CopyFile(System.String,System.String)">
            <summary>
            复制文件
            </summary>
            <param name="FilePath">源文件</param>
            <param name="Path">目标目录</param>
        </member>
        <member name="M:Base.IO.File.getWebFolder(System.Web.UI.Page)">
            <summary>
            获取当前页的目录
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.File.isexist(System.String)">
            <summary>
            判断文件是否存在
            </summary>
            <param name="FilePath">文件</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.File.MdFileName(System.String,System.String)">
            <summary>
            文件改名（或移动）
            </summary>
            <param name="FileName">原文件名</param>
            <param name="ToFileName">新文件名</param>
        </member>
        <member name="M:Base.IO.File.DelFile(System.String)">
            <summary>
            删除文件（删除空目录）
            </summary>
            <param name="FilePath">文件地址</param>
        </member>
        <member name="M:Base.IO.File.DelFileRelated(System.String)">
            <summary>
            删除相关文件  (10000个文件记录）
            </summary>
            <param name="FilePath"></param>
        </member>
        <member name="M:Base.IO.File.DelFileNoDir(System.String)">
            <summary>
            删除文件 不删除空目录
            </summary>
            <param name="FilePath"></param>
        </member>
        <member name="M:Base.IO.File.FileSize(System.String)">
            <summary>
            获得文件大小
            </summary>
            <param name="FilePath">文件目录</param>
            <returns>返回大小(字节)</returns>
        </member>
        <member name="M:Base.IO.File.ReadFileDate(System.String)">
            <summary>
            获得文件最后修改时间
            </summary>
            <param name="FilePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.File.ReadFileCreateDate(System.String)">
            <summary>
            获得文件创建时间
            </summary>
            <param name="FilePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.File.ReadFile(System.String)">
            <summary>
            读取文件内容（只适用于文本文件）
            </summary>
            <param name="FilePath"></param>
            <returns>返回UTF-8格式的文件内容</returns>
        </member>
        <member name="M:Base.IO.File.ReadFile(System.String,System.String)">
            <summary>
            读取文件内容（只适用于文本文件）
            </summary>
            <param name="FilePath">文件路径</param>
            <param name="Message">编码</param>
            <returns>返回UTF-8格式的文件内容</returns>
        </member>
        <member name="M:Base.IO.File.EnCodeCovert(System.Text.Encoding,System.Text.Encoding,System.String)">
            <summary>
            编码转换
            </summary>
            <param name="srcEncode">原编码名称</param>
            <param name="convToEncode">目标编码</param>
            <param name="value">要转换的编码</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.File.FileExt(System.String)">
            <summary>
            获得文件扩展名（返回小写)
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.File.GetFileName(System.String)">
            <summary>
            获得文件名
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.File.DownFile(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="FileName">文件地址</param>
            <param name="ViewName">显示名称</param>
        </member>
        <member name="M:Base.IO.File.DownFile(System.String,System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="FileName">文件地址</param>
            <param name="Content">显示名称</param>
            <param name="FileEncode">编码</param>
        </member>
        <member name="M:Base.IO.File.SystemCode(System.String)">
            <summary>
            获得系统编码
            </summary>
            <param name="Content">内容</param>
            <returns></returns>
        </member>
        <member name="T:Base.Network.WebCrawl">
            <summary>
            抓取网页
            </summary>
        </member>
        <member name="M:Base.Network.WebCrawl.ToHtml(System.String)">
            <summary>
            直接抓取源代码弄成静态（gb2312)
            </summary>
            <param name="url">网页地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Network.WebCrawl.ToHtml_Utf8(System.String)">
            <summary>
            直接抓取源代码弄成静态（utf8)
            </summary>
            <param name="url">网页地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Network.WebCrawl.ToHtml_Def(System.String)">
            <summary>
            直接抓取源代码弄成静态（default)
            </summary>
            <param name="url">网页地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Network.WebCrawl.ToHtml(System.String,System.Text.Encoding)">
            <summary>
            直接抓取源代码弄成静态
            </summary>
            <param name="url">网页地址</param>
            <param name="GetEncoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:Base.Network.WebCrawl.GetHtmlWC(System.String)">
            <summary>
            利用WebClient获取源代码（gb2312)
            </summary>
            <param name="PageUrl">网页地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Network.WebCrawl.GetHtmlWC_Utf8(System.String)">
            <summary>
            利用WebClient获取源代码（utf8)
            </summary>
            <param name="PageUrl">网页地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Network.WebCrawl.GetHtmlWC_Def(System.String)">
            <summary>
            利用WebClient获取源代码（default)
            </summary>
            <param name="PageUrl">网页地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Network.WebCrawl.GetHtmlWC(System.String,System.Text.Encoding)">
            <summary>
            利用WebClient获取源代码（gb2312)
            </summary>
            <param name="PageUrl">网页地址</param>
            <param name="GetEncoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:Base.Network.WebCrawl.GetHtmlWR(System.String)">
            <summary>
            利用WebRequest获取源代码(gb2312)
            </summary>
            <param name="PageUrl">网页地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Network.WebCrawl.GetHtmlWR_Utf8(System.String)">
            <summary>
            利用WebRequest获取源代码(utf8)
            </summary>
            <param name="PageUrl">网页地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Network.WebCrawl.GetHtmlWR_Def(System.String)">
            <summary>
            利用WebRequest获取源代码(Default)
            </summary>
            <param name="PageUrl">网页地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Network.WebCrawl.GetHtmlWR(System.String,System.Text.Encoding)">
            <summary>
            利用WebRequest获取源代码(gb2312)
            </summary>
            <param name="PageUrl">网页地址</param>
            <param name="GetEncoding">编码</param>
            <returns></returns>
        </member>
        <member name="T:Base.VerifyCode.VerifyCode">
            <summary>
             VerifyCode 的摘要说明
            </summary>
        </member>
        <member name="M:Base.VerifyCode.VerifyCode.TwistImage(System.Drawing.Bitmap,System.Boolean,System.Double,System.Double)">
            <summary>
            正弦曲线Wave扭曲图片
            </summary>
            <param name="srcBmp">图片路径</param>
            <param name="bXDir">如果扭曲则选择为True</param>
            <param name="dMultValue">波形的幅度倍数，越大扭曲的程度越高，一般为3</param>
            <param name="dPhase">波形的起始相位，取值区间[0-2*PI)</param>
            <returns></returns>
        </member>
        <member name="M:Base.VerifyCode.VerifyCode.CreateImageCode(System.String)">
            <summary>
            生成校验码图片
            </summary>
            <param name="code">生成的文字</param>
            <returns></returns>
        </member>
        <member name="M:Base.VerifyCode.VerifyCode.CreateImageOnPage(System.String,System.Web.HttpContext)">
            <summary>
            将创建好的图片输出到页面
            </summary>
            <param name="code">字符串</param>
            <param name="context">输出</param>
        </member>
        <member name="M:Base.VerifyCode.VerifyCode.CreateVerifyCode(System.Int32)">
            <summary>
            生成随机字符码
            </summary>
            <param name="codeLen">长度</param>
            <returns></returns>
        </member>
        <member name="M:Base.VerifyCode.VerifyCode.CreateVerifyCode">
            <summary>
            生成随机字符（验证码长度）
            </summary>
            <returns></returns>
        </member>
        <member name="P:Base.VerifyCode.VerifyCode.Az09">
            <summary>
            是否英文字符（如果否为汉字）
            </summary>
        </member>
        <member name="P:Base.VerifyCode.VerifyCode.Length">
            <summary>
            验证码长度
            </summary>
        </member>
        <member name="P:Base.VerifyCode.VerifyCode.FontSize">
            <summary>
            字体大小
            </summary>
        </member>
        <member name="P:Base.VerifyCode.VerifyCode.Padding">
            <summary>
            边框补大小
            </summary>
        </member>
        <member name="P:Base.VerifyCode.VerifyCode.Chaos">
            <summary>
            是否输出燥点(默认不输出)
            </summary>
        </member>
        <member name="P:Base.VerifyCode.VerifyCode.ChaosColor">
            <summary>
            输出燥点的颜色(默认灰色)
            </summary>
        </member>
        <member name="P:Base.VerifyCode.VerifyCode.BackgroundColor">
            <summary>
            自定义背景色(默认白色)
            </summary>
        </member>
        <member name="P:Base.VerifyCode.VerifyCode.Colors">
            <summary>
            设置获取随机颜色数组
            </summary>
        </member>
        <member name="P:Base.VerifyCode.VerifyCode.Fonts">
            <summary>
            自定义字体数组
            </summary>
        </member>
        <member name="P:Base.VerifyCode.VerifyCode.CodeSerial">
            <summary>
            随机字符串序列
            </summary>
        </member>
        <member name="T:Base.IO.ZipClass">
            <summary>
            压缩类
            </summary>
        </member>
        <member name="F:Base.IO.ZipClass.ErrMessage">
            <summary>
            错误提示信息
            </summary>
        </member>
        <member name="M:Base.IO.ZipClass.Compress(System.String,System.String,System.Boolean)">
            <summary>
            压缩文件夹
            </summary>
            <param name="dir">待压缩的文件夹（绝对路径）后面有\为直接压缩。无时为有目录名称</param>
            <param name="targetFileName">压缩后文件路径（包括文件名.zip 绝对路径）</param>
            <param name="recursive">是否递归压缩</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.ZipClass.Compress(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            压缩文件夹
            </summary>
            <param name="dirList">待压缩的文件夹（绝对路径）后面有\为直接压缩。无时为有目录名称</param>
            <param name="targetFileName">压缩后文件路径（包括文件名.zip 绝对路径）</param>
            <returns></returns>
        </member>
        <member name="M:Base.IO.ZipClass.ZipFileDictory(System.String[])">
            <summary>
            压缩目录
            </summary>
            <param name="args">数组(数组[0]: 要压缩的目录; 数组[1]: 压缩的文件名)</param>
        </member>
        <member name="M:Base.IO.ZipClass._CompressFolder(System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String)">
            <summary>
            压缩某个子文件夹
            </summary>
            <param name="basePath"></param>
            <param name="zips"></param>
            <param name="zipfolername"></param>     
        </member>
        <member name="M:Base.IO.ZipClass._AddFile(System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String)">
            <summary>
            压缩某个子文件
            </summary>
            <param name="fileName"></param>
            <param name="zips"></param>
            <param name="zipfolername"></param>
        </member>
        <member name="M:Base.IO.ZipClass._CreateZipFile(System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String)">
            <summary>
            压缩单独文件
            </summary>
            <param name="FileToZip"></param>
            <param name="zips"></param>
            <param name="zipfolername"></param>
        </member>
        <member name="M:Base.IO.ZipClass.UnZipFile(System.String,System.String)">
            <summary>   
            功能：解压zip格式的文件。   
            </summary>   
            <param name="zipFilePath">压缩文件路径</param>   
            <param name="unZipDir">解压文件存放路径,为空时默认与压缩文件同一级目录下，跟压缩文件同名的文件夹</param>   
            <returns>解压是否成功</returns>   
        </member>
        <member name="T:Base.Log.Log">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:Base.Log.Log.#ctor">
            <summary>
            无参数构造函数
            </summary>
        </member>
        <member name="M:Base.Log.Log.#ctor(System.Int32,System.String,System.DateTime,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            有参数构造函数
            </summary>
            <param name="logID">流水号，自增ID</param>
            <param name="name">操作人</param>
            <param name="addTime">操作时间</param>
            <param name="typeID">操作分类0---正常，1---异常</param>
            <param name="oID">操作类型0-登录，1-添加，2-修改，3-删除，4-其他，5-移动，6-合并，7-审核，8-还原，9-回收站，10-属性，11-布局</param>
            <param name="tableName">针对哪张表进行操作</param>
            <param name="url">操作地址</param>
            <param name="description">相关信息描述</param>
        </member>
        <member name="M:Base.Log.Log.Add(System.Int32,System.String)">
            <summary>
            添加操作日志 操作类型0-登录，1-添加，2-修改，3-删除，4-其他，5-移动，6-合并，7-审核，8-还原，9-回收站，10-属性，11-布局
            </summary>
            <param name="oID">操作类型0-登录，1-添加，2-修改，3-删除，4-其他，5-移动，6-合并，7-审核，8-还原，9-回收站，10-属性，11-布局</param>
            <param name="tableName">表</param>
        </member>
        <member name="M:Base.Log.Log.Add(System.Int32,System.String,System.Int32)">
            <summary>
            添加操作日志 操作类型0-登录，1-添加，2-修改，3-删除，4-其他，5-移动，6-合并，7-审核，8-还原，9-回收站，10-属性，11-布局
            </summary>
            <param name="oID">操作类型0-登录，1-添加，2-修改，3-删除，4-其他，5-移动，6-合并，7-审核，8-还原，9-回收站，10-属性，11-布局</param>
            <param name="tableName">表</param>
            <param name="typeID">0正常1异常</param>
        </member>
        <member name="M:Base.Log.Log.Add(System.Int32,System.String,System.String)">
            <summary>
            添加操作日志 操作类型0-登录，1-添加，2-修改，3-删除，4-其他，5-移动，6-合并，7-审核，8-还原，9-回收站，10-属性，11-布局
            </summary>
            <param name="oID">操作类型0-登录，1-添加，2-修改，3-删除，4-其他，5-移动，6-合并，7-审核，8-还原，9-回收站，10-属性，11-布局</param>
            <param name="tableName">表</param>
            <param name="Description">存放ID信息，可以方便查询</param>
        </member>
        <member name="M:Base.Log.Log.Add(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            添加操作日志 操作类型0-登录，1-添加，2-修改，3-删除，4-其他，5-移动，6-合并，7-审核，8-还原，9-回收站，10-属性，11-布局
            </summary>
            <param name="oID">操作类型0-登录，1-添加，2-修改，3-删除，4-其他，5-移动，6-合并，7-审核，8-还原，9-回收站，10-属性，11-布局</param>
            <param name="tableName">表</param>
            <param name="typeID">0正常1异常</param>
            <param name="Description">存放ID信息，可以方便查询</param>
        </member>
        <member name="M:Base.Log.Log.AddLog">
            <summary>
            增加日志
            </summary>
        </member>
        <member name="M:Base.Log.Log.DelLog(System.String)">
            <summary>
            删除，注意，可能传过来的值可能是多个ID,所有SQL里要用IN
            </summary>
        </member>
        <member name="M:Base.Log.Log.DelAllLog">
            <summary>
            删除所有日期
            </summary>
        </member>
        <member name="M:Base.Log.Log.DelLog">
            <summary>
            删除，注意，可能传过来的值可能是多个ID,所有SQL里要用IN
            </summary>
        </member>
        <member name="M:Base.Log.Log.DelLog(System.DateTime)">
            <summary>
            从哪一天开始删除日志
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Base.Log.Log.DelLog(System.DateTime,System.String)">
            <summary>
            从哪一天开始删除日志
            </summary>
            <param name="dt"></param>
            <param name="WebPath">地址</param>
        </member>
        <member name="M:Base.Log.Log.DelLog(System.Int32)">
            <summary>
            删除多少天之前的日志
            </summary>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Log.Log.DelLog(System.Int32,System.String)">
            <summary>
            删除多少天之前的日志
            </summary>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Log.Log.ShowPageListsColumns(System.Int32,System.Data.DataRow,System.String,System.String,Base.Conn.Database,System.Object[])">
            <summary>
            返回各个字段的对应信息
            </summary>
            <param name="index">顺序号</param>
            <param name="dr">DataRow记录</param>
            <param name="ColumnName">字段名称</param>
            <param name="ColumnValue">字段值</param>
            <param name="db">数据库连接</param>
            <param name="obj">特殊记录值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Log.Log.ChineseTableName(System.Int32,System.String,System.String,Base.Conn.Database)">
            <summary>
            返回表格所对应的汉字表名信息
            </summary>
            <param name="Index">行号</param>
            <param name="ColumnName">列名</param>
            <param name="ColumnValue">列值</param>
            <param name="db">数据库连接</param>
            <returns></returns>
        </member>
        <member name="M:Base.Log.Log.ShowPageLists(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            显示列表
            </summary>
            <param name="PageSize">每页数量</param>
            <param name="Stime">开始时间</param>
            <param name="StimeH">小时</param>
            <param name="Etime">结束时间</param>
            <param name="EtimeH">小时</param>
            <returns>返回字段串</returns>
        </member>
        <member name="M:Base.Log.Log.DelUserTotal(System.String)">
            <summary>
            删除用户统计
            </summary>
            <param name="UserID">用户ID</param>
        </member>
        <member name="M:Base.Log.Log.AddUserTotal">
            <summary>
            添加
            </summary>
        </member>
        <member name="M:Base.Log.Log.UserTotalShowPageListColumns(System.Int32,System.Data.DataRow,System.String,System.String,Base.Conn.Database,System.Object[])">
            <summary>
            返回列行信息
            </summary>
            <param name="Index">列顺序</param>
            <param name="dr">DataRow</param>
            <param name="ColumnName">列名</param>
            <param name="ColumnValue">列值</param>
            <param name="db">传过来的数据库连接</param>
            <param name="obj">特殊权值对象</param>
            <returns></returns>
        </member>
        <member name="M:Base.Log.Log.UserTotalShowPageLists(System.Int32,System.String,System.String,System.String)">
            <summary>
            显示列表
            </summary>
            <param name="PageSize">每页数量</param>
            <param name="UserID">用户ID</param>
            <param name="Stime">开始时间</param>
            <param name="Etime">结束时间</param>
            <returns>返回字段串</returns>
        </member>
        <member name="M:Base.Log.Log.GetTypeById(System.Int32)">
            <summary>
            根据操作分类来判断
            </summary>
            <param name="typeID"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Log.Log.GetOperateName(System.Int32)">
            <summary>
            根据操作ID获取操作名称
            </summary>
            <param name="oID"></param>
            <returns></returns>
        </member>
        <member name="P:Base.Log.Log.LogID">
            <summary>
            各字段的GET/SET方法
            </summary>
        </member>
        <member name="P:Base.Log.Log.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Base.Log.Log.AddTime">
            <summary>
            添加时间
            </summary>
        </member>
        <member name="P:Base.Log.Log.TypeID">
            <summary>
            类型ID
            </summary>
        </member>
        <member name="P:Base.Log.Log.OID">
            <summary>
            OID
            </summary>
        </member>
        <member name="P:Base.Log.Log.TableName">
            <summary>
            表格名称
            </summary>
        </member>
        <member name="P:Base.Log.Log.Url">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:Base.Log.Log.Description">
            <summary>
            说明
            </summary>
        </member>
        <member name="T:Base.Network.Down">
            <summary>
            下载文件
            </summary>
        </member>
        <member name="M:Base.Network.Down.Download(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="URL">下载地址</param>
            <param name="Dir">目录</param>
            <returns></returns>
        </member>
        <member name="M:Base.Network.Down.Download(System.String,System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="URL">下载地址</param>
            <param name="Dir">目录</param>
            <param name="fileName">另存的文件名</param>
            <returns></returns>
        </member>
        <member name="M:Base.Network.Down.DownloadContent(System.String)">
            <summary>
            读取内容
            </summary>
            <param name="PageUrl">地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Network.Down.DownloadContent(System.String,System.String@)">
            <summary>
            读取内容
            </summary>
            <param name="PageUrl">地址</param>
            <param name="Error">错误信息</param>
            <returns></returns>
        </member>
        <member name="T:Base.Office.ExcelHelper">
            <summary>
            导入导出EXCEL表
            </summary>
        </member>
        <member name="M:Base.Office.ExcelHelper.Export(System.Data.DataTable,System.String,System.String)">
            <summary>
            DataTable导出到Excel文件
            </summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
            <param name="strFileName">保存位置</param>
            <Author>2010-5-8 22:21:41</Author>
        </member>
        <member name="M:Base.Office.ExcelHelper.Export(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            DataTable导出到Excel文件
            </summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
            <param name="strFileName">保存位置</param>
            <Author>2010-5-8 22:21:41</Author>
        </member>
        <member name="M:Base.Office.ExcelHelper.ExportDataSet(System.Data.DataSet,System.String,System.String)">
            <summary>
            DataSet导出到Excel文件
            </summary>
            <param name="dsSource">源DataSet</param>
            <param name="strHeaderText">表头文本</param>
            <param name="strFileName">保存位置</param>
            <Author>2010-5-8 22:21:41</Author>
        </member>
        <member name="M:Base.Office.ExcelHelper.ExportDataSet(System.Data.DataSet,System.String,System.String,System.Boolean)">
            <summary>
            DataSet导出到Excel文件
            </summary>
            <param name="dsSource">源DataSet</param>
            <param name="strHeaderText">表头文本</param>
            <param name="strFileName">保存位置</param>
            <Author>2010-5-8 22:21:41</Author>
        </member>
        <member name="M:Base.Office.ExcelHelper.Export(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            DataTable导出到Excel的MemoryStream
            </summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
            <Author>2010-5-8 22:21:41</Author>
        </member>
        <member name="M:Base.Office.ExcelHelper.ExportDataSet(System.Data.DataSet,System.String)">
            <summary>
            DataSet导出到Excel的MemoryStream
            </summary>
            <param name="dsSource">源DataSet</param>
            <param name="strHeaderText">表头文本</param>
            <Author>2010-5-8 22:21:41</Author>
        </member>
        <member name="M:Base.Office.ExcelHelper.ExportDataSet(System.Data.DataSet,System.String,System.Boolean)">
            <summary>
            DataSet导出到Excel的MemoryStream
            </summary>
            <param name="dsSource">源DataSet</param>
            <param name="strHeaderText">表头文本</param>
            <Author>2010-5-8 22:21:41</Author>
        </member>
        <member name="M:Base.Office.ExcelHelper.DataTable2Sheet(System.Data.DataTable,System.Boolean,NPOI.HSSF.UserModel.HSSFWorkbook@)">
            <summary>
            把表格转到workbook里面
            </summary>
            <param name="dtSource"></param>
            <param name="workbook"></param>
        </member>
        <member name="M:Base.Office.ExcelHelper.ExportByWeb(System.Data.DataTable,System.String,System.String)">
            <summary>
            用于Web导出
            </summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
            <param name="strFileName">文件名</param>
            <Author>柳永法 http://www.yongfa365.com/ 2010-5-8 22:21:41</Author>
        </member>
        <member name="M:Base.Office.ExcelHelper.ExportByWeb(System.Data.DataTable,System.String,System.String,System.Boolean)">
            <summary>
            用于Web导出
            </summary>
            <param name="dtSource">源DataTable</param>
            <param name="strHeaderText">表头文本</param>
            <param name="strFileName">文件名</param>
            <Author>柳永法 http://www.yongfa365.com/ 2010-5-8 22:21:41</Author>
        </member>
        <member name="M:Base.Office.ExcelHelper.Import(System.String)">
            <summary>读取excel
            默认第一行为标头
            </summary>
            <param name="strFileName">excel文档路径（绝对地址）</param>
            <returns></returns>
        </member>
        <member name="M:Base.Office.ExcelHelper.ImportDataSet(System.String)">
            <summary>读取excel
            默认第一行为标头
            </summary>
            <param name="strFileName">excel文档路径（绝对地址）</param>
            <returns></returns>
        </member>
        <member name="M:Base.Office.ExcelHelper.ISheet2DataTable(NPOI.SS.UserModel.ISheet)">
            <summary>
            把工作区转成表格
            </summary>
            <param name="sheet"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Office.Word">
            <summary>
            Word操作
            </summary>
        </member>
        <member name="M:Base.Office.Word.#ctor">
            <summary>
            Word操作
            </summary>
        </member>
        <member name="F:Base.Office.Word.ErrorString">
            <summary>
            错误信息，为空正确
            </summary>
        </member>
        <member name="F:Base.Office.Word.fileName">
            <summary>
            word文件地址
            </summary>
        </member>
        <member name="F:Base.Office.Word.UploadFilePath">
            <summary>
            保存图片的路径
            </summary>
        </member>
        <member name="M:Base.Office.Word.WordToHtml">
            <summary>
            把WORD文件转换为HTML
            </summary>
            <returns></returns>
        </member>
        <member name="T:Base.Page.Config">
            <summary>
            分页信息配置文件
            </summary>
        </member>
        <member name="F:Base.Page.Config.PinfoPage">
            <summary>
            分页信息显示与否
            </summary>
        </member>
        <member name="F:Base.Page.Config.PinfoPageWz">
            <summary>
            分页信息顺序
            </summary>
        </member>
        <member name="F:Base.Page.Config.Pcurrent">
            <summary>
            显示第多少页信息
            </summary>
        </member>
        <member name="F:Base.Page.Config.Pcurrent_0">
            <summary>
            第字是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.Pcurrent_1">
            <summary>
            页字是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.Pcurrent_0Name">
            <summary>
            第字替换字
            </summary>
        </member>
        <member name="F:Base.Page.Config.Pcurrent_1Name">
            <summary>
            页字替换字
            </summary>
        </member>
        <member name="F:Base.Page.Config.Ppage">
            <summary>
            显示多少页信息
            </summary>
        </member>
        <member name="F:Base.Page.Config.Ppage_0">
            <summary>
            共字是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.Ppage_1">
            <summary>
            页字是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.Ppage_0Name">
            <summary>
            共字可以是其它字也可以为空
            </summary>
        </member>
        <member name="F:Base.Page.Config.Ppage_1Name">
            <summary>
            页字可以是其它字也可以为空
            </summary>
        </member>
        <member name="F:Base.Page.Config.PinfoRecord">
            <summary>
            记录信息显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.PinfoRecordWz">
            <summary>
            记录信息位置
            </summary>
        </member>
        <member name="F:Base.Page.Config.Precord">
            <summary>
            显示第多少条至多少条
            </summary>
        </member>
        <member name="F:Base.Page.Config.Precord_0">
            <summary>
            第字是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.Precord_1">
            <summary>
            至字是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.Precord_2">
            <summary>
            多少条记录是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.Precord_0Name">
            <summary>
            第字替换字
            </summary>
        </member>
        <member name="F:Base.Page.Config.Precord_1Name">
            <summary>
            至字替换字
            </summary>
        </member>
        <member name="F:Base.Page.Config.Precord_2Name">
            <summary>
            条记录替换字
            </summary>
        </member>
        <member name="F:Base.Page.Config.PTotal">
            <summary>
            显示多少记录信息
            </summary>
        </member>
        <member name="F:Base.Page.Config.PTotal_0">
            <summary>
            共字是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.PTotal_1">
            <summary>
            记录字是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.PTotal_0Name">
            <summary>
            共字可以是其它也可以为空
            </summary>
        </member>
        <member name="F:Base.Page.Config.PTotal_1Name">
            <summary>
            记录字可以是其它字也可以为空
            </summary>
        </member>
        <member name="F:Base.Page.Config.PIndex">
            <summary>
            首页上一页是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.PIndex_View">
            <summary>
            是否始终显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.PIndexType">
            <summary>
            首页是否显示成1..
            </summary>
        </member>
        <member name="F:Base.Page.Config.PIndexEnd">
            <summary>
            是否有上一页结束标识
            </summary>
        </member>
        <member name="F:Base.Page.Config.PIndexEndName">
            <summary>
            上一页结束标识|
            </summary>
        </member>
        <member name="F:Base.Page.Config.PIndexWz">
            <summary>
            首页上一页显示位置
            </summary>
        </member>
        <member name="F:Base.Page.Config.PIndex_0">
            <summary>
            首页是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.PIndex_1">
            <summary>
            上一页是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.PIndex_0Name">
            <summary>
            首页显示文字
            </summary>
        </member>
        <member name="F:Base.Page.Config.PIndex_1Name">
            <summary>
            上一页显示文字
            </summary>
        </member>
        <member name="F:Base.Page.Config.PEnd">
            <summary>
            下一页尾页显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.PEnd_View">
            <summary>
            是否始终显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.PEndType">
            <summary>
            尾页是否显示成..最大页码
            </summary>
        </member>
        <member name="F:Base.Page.Config.PEndWz">
            <summary>
            上一页尾页显示位置
            </summary>
        </member>
        <member name="F:Base.Page.Config.PEnd_0">
            <summary>
            上一页是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.PEnd_1">
            <summary>
            尾页是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.PEnd_0Name">
            <summary>
            上一页显示文字
            </summary>
        </member>
        <member name="F:Base.Page.Config.PEnd_1Name">
            <summary>
            尾页显示文字
            </summary>
        </member>
        <member name="F:Base.Page.Config.Ppagelist">
            <summary>
            页码是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.PpagelistType">
            <summary>
            页码显示类型
            </summary>
        </member>
        <member name="F:Base.Page.Config.PpagelistWz">
            <summary>
            页面显示位置
            </summary>
        </member>
        <member name="F:Base.Page.Config.AllPage">
            <summary>
            是否在当前页后面显示/总页数
            </summary>
        </member>
        <member name="F:Base.Page.Config.Pstate_0">
            <summary>
            第字是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.Pstate_0Name">
            <summary>
            第字显示其它字是
            </summary>
        </member>
        <member name="F:Base.Page.Config.Pstate_1">
            <summary>
            页字是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.Pstate_1Name">
            <summary>
            页字显示其它字是
            </summary>
        </member>
        <member name="F:Base.Page.Config.Pform">
            <summary>
            表单是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.PformWz">
            <summary>
            表单显示位置
            </summary>
        </member>
        <member name="F:Base.Page.Config.Pgo">
            <summary>
            表单GO上的文字
            </summary>
        </member>
        <member name="F:Base.Page.Config.PgoMess">
            <summary>
            表单错误提示信息。
            </summary>
        </member>
        <member name="F:Base.Page.Config.Pform_0">
            <summary>
            跳转到文字是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.Pform_0Name">
            <summary>
            跳转到文字
            </summary>
        </member>
        <member name="F:Base.Page.Config.Pform_1">
            <summary>
            页是否显示
            </summary>
        </member>
        <member name="F:Base.Page.Config.pform_1Name">
            <summary>
            页文字
            </summary>
        </member>
        <member name="F:Base.Page.Config.Pform_2">
            <summary>
            是否显示GO
            </summary>
        </member>
        <member name="F:Base.Page.Config.PageCss">
            <summary>
            分页样式
            </summary>
        </member>
        <member name="M:Base.Page.Config.GetAssemblyPath">
            <summary>
            获得DLL路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Page.Config.ReadConfig(System.String)">
            <summary>
            读取配置文件
            </summary>
            <param name="FilePath"></param>
        </member>
        <member name="T:Base.Page.Dividepage">
            <summary>
            数据库分页
            </summary>
        </member>
        <member name="F:Base.Page.Dividepage.IsCreateLink">
            <summary>
            是否传入连接
            </summary>
        </member>
        <member name="F:Base.Page.Dividepage.data">
            <summary>
            链接地址
            </summary>
        </member>
        <member name="M:Base.Page.Dividepage.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Base.Page.Dividepage.#ctor(System.String)">
            <summary>
            初始化
            </summary>
            <param name="SqlLink"></param>
        </member>
        <member name="M:Base.Page.Dividepage.#ctor(Base.Conn.Database)">
            <summary>
            初始化，传入连接
            </summary>
            <param name="data"></param>
        </member>
        <member name="F:Base.Page.Dividepage.pagelist">
            <summary>
            分页字符串
            </summary>
        </member>
        <member name="F:Base.Page.Dividepage.TotalRow">
            <summary>
            总多少记录
            </summary>
        </member>
        <member name="F:Base.Page.Dividepage.MaxPage">
            <summary>
            总多少页
            </summary>
        </member>
        <member name="M:Base.Page.Dividepage.CreateParameter">
            <summary>
            建立参数（输入）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Page.Dividepage.CreateParameter(System.String,System.Object)">
            <summary>
            建立参数（输入）
            </summary>
            <param name="name">名字</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Page.Dividepage.CreateParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            建立参数（输入）
            </summary>
            <param name="name">名字</param>
            <param name="value">值</param>
            <param name="dbType">类型</param>
            <returns></returns>
        </member>
        <member name="M:Base.Page.Dividepage.CreateParameter(System.String,System.String,System.Data.DbType,System.Int32)">
            <summary>
            建立参数（输入）
            </summary>
            <param name="name">名字</param>
            <param name="value">值</param>
            <param name="dbType">类型</param>
            <param name="size">大小</param>
            <returns></returns>
        </member>
        <member name="M:Base.Page.Dividepage.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            建立参数（输入）
            </summary>
            <param name="name">名字</param>
            <param name="value">值</param>
            <param name="dbType">类型</param>
            <param name="size">大小</param>
            <returns></returns>
        </member>
        <member name="M:Base.Page.Dividepage.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            建立参数（输入）
            </summary>
            <param name="name">名字</param>
            <param name="value">值</param>
            <param name="dbType">类型</param>
            <param name="size">大小</param>
            <param name="Direction">参数输入输出类型</param>
            <returns></returns>
        </member>
        <member name="M:Base.Page.Dividepage.GetModelList``1">
            <summary>
            执行，返回ModelList
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Base.Page.Dividepage.getrows">
            <summary>
            返回datatable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Page.Dividepage.Dispose">
            <summary>
            精除datatable
            </summary>
        </member>
        <member name="M:Base.Page.Dividepage.createpage">
            <summary>
            生成分页信息
            </summary>
        </member>
        <member name="P:Base.Page.Dividepage.IsPage">
            <summary>
            是否输出分页HTML代码
            </summary>
        </member>
        <member name="P:Base.Page.Dividepage.RecordName">
            <summary>
            记录名称
            </summary>
        </member>
        <member name="P:Base.Page.Dividepage.PS">
            <summary>
            直接传值
            </summary>
        </member>
        <member name="P:Base.Page.Dividepage.PageUrl">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:Base.Page.Dividepage.Page">
            <summary>
            当前第几页
            </summary>
        </member>
        <member name="P:Base.Page.Dividepage.SqlStr">
            <summary>
            数据库链接
            </summary>
        </member>
        <member name="P:Base.Page.Dividepage.PageFileName">
            <summary>
            分页配置文件
            </summary>
        </member>
        <member name="P:Base.Page.Dividepage.PageSize">
            <summary>
            分页大小
            </summary>
        </member>
        <member name="P:Base.Page.Dividepage.TableName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:Base.Page.Dividepage.Field">
            <summary>
            要显示的字段
            </summary>
        </member>
        <member name="P:Base.Page.Dividepage.Index">
            <summary>
            排序字段名
            </summary>
        </member>
        <member name="P:Base.Page.Dividepage.OrderBy">
            <summary>
            排序字符串
            </summary>
        </member>
        <member name="P:Base.Page.Dividepage.Filter">
            <summary>
            条件字段串
            </summary>
        </member>
        <member name="P:Base.Page.Dividepage.FilterList">
            <summary>
            依and链接
            </summary>
        </member>
        <member name="P:Base.Page.Dividepage.PageCss">
            <summary>
            分页样式
            </summary>
        </member>
        <member name="P:Base.Page.Dividepage.IsSqlRunTime">
            <summary>
            获得运行时间
            </summary>
        </member>
        <member name="P:Base.Page.Dividepage.SqlRunTime">
            <summary>
            获得运行时间
            </summary>
        </member>
        <member name="P:Base.Page.Dividepage.SqlString">
            <summary>
            获得运行的Sql语句（getrows之后获得）
            </summary>
        </member>
        <member name="T:Base.Page.NPage">
            <summary>
            分页
            </summary>
        </member>
        <member name="M:Base.Page.NPage.PageList">
            <summary>
            分页字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Page.NPage.PageFormStr">
            <summary>
            返回表单
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Page.NPage.PageInfoPageStr">
            <summary>
            显示页信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Page.NPage.PageInfoRecordStr">
            <summary>
            显示总数信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Page.NPage.PageIndexStr">
            <summary>
            上一页首页
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Page.NPage.PageEndStr">
            <summary>
            尾页下一页
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Page.NPage.PageIndexView(System.Int32)">
            <summary>
            页信息
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Page.NPage.PageListStr">
            <summary>
            返回分页记录
            </summary>
            <returns></returns>
        </member>
        <member name="P:Base.Page.NPage.RecordName">
            <summary>
            记录名称
            </summary>
        </member>
        <member name="P:Base.Page.NPage.PageSize">
            <summary>
            分页数量
            </summary>
        </member>
        <member name="P:Base.Page.NPage.PageUrl">
            <summary>
            设置页
            </summary>
        </member>
        <member name="P:Base.Page.NPage.PageFileName">
            <summary>
            分页类型
            </summary>
        </member>
        <member name="P:Base.Page.NPage.Page">
            <summary>
            分页当前页
            </summary>
        </member>
        <member name="P:Base.Page.NPage.MaxPage">
            <summary>
            最大页
            </summary>
        </member>
        <member name="P:Base.Page.NPage.Count">
            <summary>
            多少条
            </summary>
        </member>
        <member name="P:Base.Page.NPage.PageCss">
            <summary>
            分页样式
            </summary>
        </member>
        <member name="T:Base.PassKey.Key">
            <summary>
            密钥对比
            </summary>
        </member>
        <member name="M:Base.PassKey.Key.ContinuePage">
            <summary>
            判断是否能够继续执行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.PassKey.Key.GetSyCmsKey">
            <summary>
            获得Web.config里的密钥信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.PassKey.Key.ViewSyCmsKey">
            <summary>
            显示密钥
            </summary>
            <returns></returns>
        </member>
        <member name="T:Base.Process.ProcessFun">
            <summary>
            进程
            </summary>
        </member>
        <member name="M:Base.Process.ProcessFun.Kill(System.Int32)">
            <summary>
            杀死进程
            </summary>
            <param name="Pid"></param>
        </member>
        <member name="M:Base.Process.ProcessFun.getProcessID">
            <summary>
            获得当前自己的PID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Process.ProcessFun.getRuningProcess(System.String,System.String)">
            <summary>
            获得某个进程数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Process.ProcessFun.getRuningProcess(System.String,System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            获得某个进程数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Process.ProcessFun.getRuningProcess">
            <summary>
            获得进度列表
            </summary>
            <returns></returns>
        </member>
        <member name="F:Base.Process.ProcessFun.Message">
            <summary>
            输出信息
            </summary>
        </member>
        <member name="M:Base.Process.ProcessFun.RunExe(System.String,System.String)">
            <summary>
            运行
            </summary>
            <param name="FilePath">文件地址</param>
            <param name="FileAction">参数</param>
        </member>
        <member name="M:Base.Process.ProcessFun.RunExe(System.String,System.String,System.Boolean)">
            <summary>
            运行
            </summary>
            <param name="FilePath">文件地址</param>
            <param name="FileAction">参数</param>
            <param name="distance">等待结束</param>
        </member>
        <member name="M:Base.Process.ProcessFun.p_ErrorDataReceived(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            错误调用函数
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Base.Process.ProcessFun.p_OutputDataReceived(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            完成调用函数
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Base.Threads.Threads">
            <summary>
            线程（不完善，需要建立主线程进行事件的跟踪）
            </summary>
        </member>
        <member name="M:Base.Threads.Threads.Run(System.Int32,System.Collections.Generic.List{System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},Base.Threads.ThreadsFunction)">
            <summary>
            运行多线程
            </summary>
            <param name="Max">开启多少个</param>
            <param name="IDList">标识ID信息</param>
            <param name="OtherMessage">其它信息</param>
            <param name="UserFun">用户运行函数。接收ID信息</param>
        </member>
        <member name="M:Base.Threads.Threads.MainFun(System.Int32,System.Int32,System.Boolean)">
            <summary>
            回调主函数
            </summary>
            <param name="ThreadKey"></param>
            <param name="ID_index"></param>
            <param name="Run"></param>
        </member>
        <member name="T:Base.Threads.Threads.MainRunThread">
            <summary>
            主回顾函数
            </summary>
            <param name="ThreadKey"></param>
            <param name="ID_index"></param>
            <param name="Run"></param>
        </member>
        <member name="T:Base.Threads.ThreadsFunction">
            <summary>
            用户运行的构造函数
            </summary>
            <param name="ID"></param>
            <param name="OtherMessage"></param>
        </member>
        <member name="T:Base.Threads.ThreadsRunFunction">
            <summary>
            线程自调用函数
            </summary>
        </member>
        <member name="F:Base.Threads.ThreadsRunFunction.ThreadKey">
            <summary>
            线程标识（不需要外部定义）
            </summary>
        </member>
        <member name="F:Base.Threads.ThreadsRunFunction.IDList">
            <summary>
            标识集合
            </summary>
        </member>
        <member name="F:Base.Threads.ThreadsRunFunction.OtherMessage">
            <summary>
            其它信息集合
            </summary>
        </member>
        <member name="F:Base.Threads.ThreadsRunFunction.ID_index">
            <summary>
            IDList中的顺序号
            </summary>
        </member>
        <member name="F:Base.Threads.ThreadsRunFunction.UserFun">
            <summary>
            用户函数
            </summary>
        </member>
        <member name="F:Base.Threads.ThreadsRunFunction.MainFun">
            <summary>
            主线程判断函数。运行完回调
            </summary>
        </member>
        <member name="M:Base.Threads.ThreadsRunFunction.Main">
            <summary>
            要执行的主函数
            </summary>
        </member>
        <member name="T:Base.Time.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="M:Base.Time.Time.UnixTimeToTime(System.String)">
            <summary>
            UNIX时间转换为datetime
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Time.Time.UnixTimeMilliToTime(System.String)">
            <summary>
            UNIX时间转换为datetime（毫秒）
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Time.Time.ConvertDateTimeInt(System.DateTime)">
            <summary>
            datetime转换为unixTime（秒）
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Time.Time.ConvertDateTimeMilliInt(System.DateTime)">
            <summary>
            datetime转换为unixTime（毫秒）
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Time.Time.TimeBad(System.DateTime,System.DateTime)">
            <summary>
            是否前参数小于后参数
            </summary>
            <param name="dt1">小时间</param>
            <param name="dt2">大小时</param>
            <returns></returns>
        </member>
        <member name="M:Base.Time.Time.FormatDate(System.String,System.String)">
            <summary>
            获得两个时间的时间差
            </summary>
            <param name="dat1">小时间</param>
            <param name="dat2">大时间</param>
            <returns></returns>
        </member>
        <member name="M:Base.Time.Time.TimeBad(System.String,System.String)">
            <summary>
            获得时间差。返回分钟
            </summary>
            <param name="dat1">小时间</param>
            <param name="dat2">大时间</param>
            <returns></returns>
        </member>
        <member name="M:Base.Time.Time.TimeBad(System.String,System.String,System.String)">
            <summary>
            返回两个时间差
            </summary>
            <param name="dat1">小时间</param>
            <param name="dat2">大时间</param>
            <param name="Type">类别 分，天，时</param>
            <returns></returns>
        </member>
        <member name="T:Base.UpFiles.UpFiles">
            <summary>
            上传类相关
            </summary>
        </member>
        <member name="M:Base.UpFiles.UpFiles.#ctor">
            <summary>
            上传类
            </summary>
        </member>
        <member name="M:Base.UpFiles.UpFiles.#ctor(System.Int32)">
            <summary>
            上传文件直接定义（文件格式数字）
            </summary>
            <param name="intFileType">文件类型0为图片1为视频相关文件2为压缩包</param>
        </member>
        <member name="M:Base.UpFiles.UpFiles.#ctor(System.Int32,System.Boolean)">
            <summary>
            上传文件图片的。
            </summary>
            <param name="intFileType"></param>
            <param name="bolUpThumbImage"></param>
        </member>
        <member name="M:Base.UpFiles.UpFiles.CheckExtFile(System.String)">
            <summary>
            判断文件扩展名是否在上传允许范围
            </summary>
            <param name="strFileExt"></param>
            <returns></returns>
        </member>
        <member name="M:Base.UpFiles.UpFiles.UploadFile(System.Web.UI.HtmlControls.HtmlInputFile,System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="uFile"></param>
            <param name="strUpPath">上传路径</param>
            <param name="strOldUpPath">原来的文件</param>
        </member>
        <member name="M:Base.UpFiles.UpFiles.UploadFile(System.Web.HttpPostedFile,System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="uFile"></param>
            <param name="strUpPath">上传路径</param>
            <param name="strOldUpPath">原来的文件</param>
        </member>
        <member name="M:Base.UpFiles.UpFiles.FileUploadPath(System.String,System.String)">
            <summary>
            得到随机文件名及目录
            </summary>
            <param name="strUpPath">要保存的目录</param>
            <param name="FileExt">文件扩展名</param>
            <returns></returns>
        </member>
        <member name="M:Base.UpFiles.UpFiles.FileUploadPath(System.String,System.String,System.Int32)">
            <summary>
            得到随机文件名及目录
            </summary>
            <param name="strUpPath">要保存的目录</param>
            <param name="FileExt">文件扩展名</param>
            <param name="Type">0为不生成目录，只生成随机文件1为生成随机文件及目录</param>
            <returns></returns>
        </member>
        <member name="M:Base.UpFiles.UpFiles.GetFileExt(System.String)">
            <summary>
            根据扩展名产生不同的目标
            </summary>
            <param name="FileExt">扩展名</param>
            <returns></returns>
        </member>
        <member name="P:Base.UpFiles.UpFiles.PathDepth">
            <summary>
            设置获得～之后向上前进的深度
            </summary>
        </member>
        <member name="P:Base.UpFiles.UpFiles.AllowExt">
            <summary>
            发送依|分隔带.的扩展名。
            </summary>
        </member>
        <member name="P:Base.UpFiles.UpFiles.ExceptionID">
            <summary>
            提示消息ID（0为成功，1为没有文件，2为格式不对，3为大小，4为上传失败）
            </summary>
        </member>
        <member name="P:Base.UpFiles.UpFiles.FileName">
            <summary>
            上传之后的文件名称
            </summary>
        </member>
        <member name="P:Base.UpFiles.UpFiles.Height">
            <summary>
            获取图片的时候（高）
            </summary>
        </member>
        <member name="P:Base.UpFiles.UpFiles.MaxFileSize">
            <summary>
            最大（文件大小）KB单位
            </summary>
        </member>
        <member name="P:Base.UpFiles.UpFiles.Message">
            <summary>
            返回提示信息
            </summary>
        </member>
        <member name="P:Base.UpFiles.UpFiles.NoAllowExt">
            <summary>
            不可以上传的文件类型
            </summary>
        </member>
        <member name="P:Base.UpFiles.UpFiles.UpFilePath">
            <summary>
            上传的路径
            </summary>
        </member>
        <member name="P:Base.UpFiles.UpFiles.UpFileType">
            <summary>
            用数字指定可上传文件类型0为图片1为视频相关2为压缩包格式
            </summary>
        </member>
        <member name="P:Base.UpFiles.UpFiles.UpImageExt">
            <summary>
            上传文件的时候扩展名（后缀）
            </summary>
        </member>
        <member name="P:Base.UpFiles.UpFiles.UpThumbImage">
            <summary>
            是否图片（后缀）
            </summary>
        </member>
        <member name="P:Base.UpFiles.UpFiles.UpThumbImageExt">
            <summary>
            上传图片的扩展名（后缀）
            </summary>
        </member>
        <member name="P:Base.UpFiles.UpFiles.Width">
            <summary>
            返回图片时（宽度）
            </summary>
        </member>
        <member name="P:Base.UpFiles.UpFiles.yFileName">
            <summary>
            原文件名称
            </summary>
        </member>
        <member name="T:Base.Mail.SendMail">
            <summary>
            发送邮件
            </summary>
        </member>
        <member name="M:Base.Mail.SendMail.sendemail(System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            单人发送
            </summary>
            <param name="from">要显示的信箱</param>
            <param name="fromname">要显示的名字</param>
            <param name="to">去到那数组，不要超过50个一次</param>
            <param name="subject">标题</param>
            <param name="content">内容</param>
            <param name="c_from">来自什么邮件</param>
            <param name="c_fromname">邮件的显示名称</param>
            <param name="c_username">登录用户</param>
            <param name="c_password">登录密码</param>
            <param name="server">登录验证地址</param>
            <param name="IsBodyHtml">是否html</param>
        </member>
        <member name="M:Base.Mail.SendMail.sendemail(System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            单人发送
            </summary>
            <param name="from">要显示的信箱</param>
            <param name="fromname">要显示的名字</param>
            <param name="to">去到那数组，不要超过50个一次</param>
            <param name="subject">标题</param>
            <param name="content">内容</param>
            <param name="c_from">来自什么邮件</param>
            <param name="c_fromname">邮件的显示名称</param>
            <param name="c_username">登录用户</param>
            <param name="c_password">登录密码</param>
            <param name="server">登录验证地址</param>
            <param name="IsBodyHtml">是否html</param>
            <param name="isSSL">是否加密传输</param>
            <param name="server_Port">端口</param>
        </member>
        <member name="M:Base.Mail.SendMail.sendemail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            单人发送
            </summary>
            <param name="from">要显示的信箱</param>
            <param name="fromname">要显示的名字</param>
            <param name="to">去到那数组，不要超过50个一次</param>
            <param name="subject">标题</param>
            <param name="content">内容</param>
            <param name="c_from">来自什么邮件</param>
            <param name="c_fromname">邮件的显示名称</param>
            <param name="c_username">登录用户</param>
            <param name="c_password">登录密码</param>
            <param name="server">登录验证地址</param>
            <param name="IsBodyHtml">是否html</param>
        </member>
        <member name="M:Base.Mail.SendMail.sendemail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            单人发送
            </summary>
            <param name="from">要显示的信箱</param>
            <param name="fromname">要显示的名字</param>
            <param name="to">要发的邮件</param>
            <param name="subject">标题</param>
            <param name="content">内容</param>
            <param name="c_from">来自什么邮件</param>
            <param name="c_fromname">邮件的显示名称</param>
            <param name="c_username">登录用户</param>
            <param name="c_password">登录密码</param>
            <param name="server">登录验证地址</param>
            <param name="IsBodyHtml">是否html</param>
            <param name="isSSL">是否加密传输</param>
            <param name="server_Port">端口</param>
        </member>
        <member name="M:Base.Mail.SendMail.sendemail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Int32)">
            <summary>
            发送邮件
            </summary>
            <param name="to">要发的邮件</param>
            <param name="subject">标题</param>
            <param name="content">内容</param>
            <param name="from">来自什么邮件</param>
            <param name="fromname">邮件的显示名称</param>
            <param name="username">登录用户</param>
            <param name="password">登录密码</param>
            <param name="server">登录验证地址</param>
            <param name="IsBodyHtml">是否html</param>
            <param name="FileList">要发送的附件</param>
            <param name="IsSSL">是否加密传输</param>
            <param name="server_Port">发送端口</param>
        </member>
        <member name="M:Base.Mail.SendMail.sendemail(System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Int32)">
            <summary>
            发送邮件
            </summary>
            <param name="to">去到那数组，不要超过50个一次</param>
            <param name="subject">标题</param>
            <param name="content">内容</param>
            <param name="from">来自什么邮件</param>
            <param name="fromname">邮件的显示名称</param>
            <param name="username">登录用户</param>
            <param name="password">登录密码</param>
            <param name="server">登录验证地址</param>
            <param name="IsBodyHtml">是否html</param>
            <param name="FileList">要发送的附件</param>
            <param name="IsSSL">是否加密传输</param>
            <param name="server_Port">发送端口</param>
        </member>
        <member name="M:Base.Mail.SendMail.sendemail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="to">去到那数组，不要超过50个一次</param>
            <param name="subject">标题</param>
            <param name="content">内容</param>
            <param name="from">来自什么邮件</param>
            <param name="fromname">邮件的显示名称</param>
            <param name="username">登录用户</param>
            <param name="password">登录密码</param>
            <param name="server">登录验证地址</param>
            <param name="IsBodyHtml">是否html</param>
            <param name="FileList">要发送的附件</param>
        </member>
        <member name="M:Base.Mail.SendMail.sendemail(System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="to">去到那数组，不要超过50个一次</param>
            <param name="subject">标题</param>
            <param name="content">内容</param>
            <param name="from">来自什么邮件</param>
            <param name="fromname">邮件的显示名称</param>
            <param name="username">登录用户</param>
            <param name="password">登录密码</param>
            <param name="server">登录验证地址</param>
            <param name="IsBodyHtml">是否html</param>
            <param name="FileList">要发送的附件</param>
        </member>
        <member name="M:Base.Mail.SendMail.sendemail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="from">要显示的信箱</param>
            <param name="fromname">要显示的名字</param>
            <param name="to">去到那</param>
            <param name="subject">标题</param>
            <param name="content">内容</param>
            <param name="c_from">来自什么邮件如果有from时，此为代发邮件</param>
            <param name="c_fromname">邮件的显示名称，此为代发邮件显示名称</param>
            <param name="c_username">登录用户</param>
            <param name="c_password">登录密码</param>
            <param name="server">登录验证地址</param>
            <param name="IsBodyHtml">是否html</param>
            <param name="FileList">要发送的附件</param>
        </member>
        <member name="M:Base.Mail.SendMail.sendemail(System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="from">要显示的信箱</param>
            <param name="fromname">要显示的名字</param>
            <param name="to">去到那数组，不要超过50个一次</param>
            <param name="subject">标题</param>
            <param name="content">内容</param>
            <param name="c_from">来自什么邮件如果有from时，此为代发邮件</param>
            <param name="c_fromname">邮件的显示名称，此为代发邮件显示名称</param>
            <param name="c_username">登录用户</param>
            <param name="c_password">登录密码</param>
            <param name="server">登录验证地址</param>
            <param name="IsBodyHtml">是否html</param>
            <param name="FileList">要发送的附件</param>
        </member>
        <member name="M:Base.Mail.SendMail.sendemail(System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="from">要显示的信箱</param>
            <param name="fromname">要显示的名字</param>
            <param name="to">去到那数组，不要超过50个一次</param>
            <param name="subject">标题</param>
            <param name="content">内容</param>
            <param name="c_from">来自什么邮件如果有from时，此为代发邮件</param>
            <param name="c_fromname">邮件的显示名称，此为代发邮件显示名称</param>
            <param name="c_username">登录用户</param>
            <param name="c_password">登录密码</param>
            <param name="server">登录验证地址</param>
            <param name="IsBodyHtml">是否html</param>
            <param name="FileList">要发送的附件</param>
        </member>
        <member name="M:Base.Mail.SendMail.sendemail(System.String,System.String,System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Int32)">
            <summary>
            发送邮件
            </summary>
            <param name="from">要显示的信箱</param>
            <param name="fromname">要显示的名字</param>
            <param name="to">去到那数组，不要超过50个一次</param>
            <param name="subject">标题</param>
            <param name="content">内容</param>
            <param name="c_from">来自什么邮件如果有from时，此为代发邮件</param>
            <param name="c_fromname">邮件的显示名称，此为代发邮件显示名称</param>
            <param name="c_username">登录用户</param>
            <param name="c_password">登录密码</param>
            <param name="server">登录验证地址</param>
            <param name="IsBodyHtml">是否html</param>
            <param name="FileList">要发送的附件</param>
            <param name="IsSSL">是否加密传输</param>
            <param name="server_Port">发送端口</param>
        </member>
        <member name="M:Base.Mail.SendMail.sendemail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            单人发送
            </summary>
            <param name="to">去到那</param>
            <param name="subject">标题</param>
            <param name="content">内容</param>
            <param name="from">来自什么信箱</param>
            <param name="c_username">登录用户</param>
            <param name="c_password">登录密码</param>
            <param name="server">登录验证地址</param>
            <param name="IsBodyHtml">是否html</param>
        </member>
        <member name="M:Base.Mail.SendMail.sendemail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            单人发送
            </summary>
            <param name="to">去到那</param>
            <param name="subject">标题</param>
            <param name="content">内容</param>
            <param name="from">来自什么信箱</param>
            <param name="c_username">登录用户</param>
            <param name="c_password">登录密码</param>
            <param name="server">登录验证地址</param>
            <param name="IsBodyHtml">是否html</param>
            <param name="isSSL">是否加密传输</param>
            <param name="server_Port">端口号</param>
        </member>
        <member name="M:Base.Mail.SendMail.sendemail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            单人发送
            </summary>
            <param name="to">去到那</param>
            <param name="subject">标题</param>
            <param name="content">内容</param>
            <param name="from">来自什么信箱</param>
            <param name="fromname">邮箱名称</param>
            <param name="c_username">登录用户</param>
            <param name="c_password">登录密码</param>
            <param name="server">登录验证地址</param>
            <param name="IsBodyHtml">是否html</param>
        </member>
        <member name="M:Base.Mail.SendMail.sendemail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            单人发送
            </summary>
            <param name="to">去到那</param>
            <param name="subject">标题</param>
            <param name="content">内容</param>
            <param name="from">来自什么信箱</param>
            <param name="fromname">邮箱名称</param>
            <param name="c_username">登录用户</param>
            <param name="c_password">登录密码</param>
            <param name="server">登录验证地址</param>
            <param name="IsBodyHtml">是否html</param>
            <param name="isSSL">是否加密传送</param>
            <param name="server_Port">端口号</param>
        </member>
        <member name="M:Base.Mail.SendMail.sendemail(System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            多人接受发送
            </summary>
            <param name="to">去到那</param>
            <param name="subject">标题</param>
            <param name="content">内容</param>
            <param name="from">来自什么信箱</param>
            <param name="fromname">信箱中文名字</param>
            <param name="c_username">登录用户</param>
            <param name="c_password">登录密码</param>
            <param name="server">登录验证地址</param>
            <param name="IsBodyHtml">是否html</param>
        </member>
        <member name="M:Base.Mail.SendMail.sendemail(System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            多人接受发送
            </summary>
            <param name="to">去到那</param>
            <param name="subject">标题</param>
            <param name="content">内容</param>
            <param name="from">来自什么信箱</param>
            <param name="fromname">信箱中文名字</param>
            <param name="c_username">登录用户</param>
            <param name="c_password">登录密码</param>
            <param name="server">登录验证地址</param>
            <param name="IsBodyHtml">是否html</param>
            <param name="isSSL">是否加密传送</param>
            <param name="server_Port">端口号</param>
        </member>
        <member name="M:Base.Mail.SendMail.SendSMTPEMail(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            通过smtp发送邮件
            </summary>
            <param name="strSmtpServer">smtp服务器</param>
            <param name="strFrom">邮件</param>
            <param name="strFromPass">密码</param>
            <param name="strto">接受人</param>
            <param name="strSubject">标题</param>
            <param name="strBody">内容</param>
        </member>
        <member name="M:Base.Mail.SendMail.TestSendMail(System.String[],System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="To"></param>
            <param name="From"></param>
            <param name="Subject"></param>
            <param name="Body"></param>
            <param name="FileList"></param>
            <param name="ServerName"></param>
            <param name="UserName"></param>
            <param name="Password"></param>
            <param name="Port"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Page.Pagination">
            <summary>
            存储过程分页
            </summary>
        </member>
        <member name="M:Base.Page.Pagination.PageData(System.Int32@,System.Int32@)">
            <summary>
            返回TABLE值
            </summary>
            <param name="MaxPage"></param>
            <param name="Count"></param>
            <returns></returns>
        </member>
        <member name="P:Base.Page.Pagination.Page">
            <summary>
            分页
            </summary>
        </member>
        <member name="P:Base.Page.Pagination.SqlStr">
            <summary>
            SQL语句
            </summary>
        </member>
        <member name="P:Base.Page.Pagination.PageSize">
            <summary>
            分页大小
            </summary>
        </member>
        <member name="P:Base.Page.Pagination.TableName">
            <summary>
            数据表名
            </summary>
        </member>
        <member name="P:Base.Page.Pagination.Field">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:Base.Page.Pagination.Index">
            <summary>
            关键索引列
            </summary>
        </member>
        <member name="P:Base.Page.Pagination.OrderBy">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Base.Page.Pagination.Filter">
            <summary>
            条件
            </summary>
        </member>
        <member name="T:Base.UpFiles.FilesManage">
            <summary>
            上传文件
            </summary>
        </member>
        <member name="M:Base.UpFiles.FilesManage.BuildFolder">
            <summary>
            建立目录
            </summary>
        </member>
        <member name="M:Base.UpFiles.FilesManage.DeleteFile">
            <summary>
            删除文件
            </summary>
        </member>
        <member name="M:Base.UpFiles.FilesManage.DeleteFolder">
            <summary>
            删除目录
            </summary>
        </member>
        <member name="M:Base.UpFiles.FilesManage.ReaderFileContent">
            <summary>
            读取文件内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.UpFiles.FilesManage.WriteFileContent(System.String)">
            <summary>
            写文件内容
            </summary>
            <param name="strContent"></param>
        </member>
        <member name="P:Base.UpFiles.FilesManage.PathDepth">
            <summary>
            目录深度
            </summary>
        </member>
        <member name="P:Base.UpFiles.FilesManage.FileName">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:Base.UpFiles.FilesManage.FolderName">
            <summary>
            目录名称
            </summary>
        </member>
        <member name="P:Base.UpFiles.FilesManage.IsExistsFile">
            <summary>
            是否有文件
            </summary>
        </member>
        <member name="P:Base.UpFiles.FilesManage.IsExistsFolder">
            <summary>
            是否有目录
            </summary>
        </member>
        <member name="T:Base.WebSearch.WebSearch">
            <summary>
            判断搜索来源
            </summary>
        </member>
        <member name="F:Base.WebSearch.WebSearch._WebSearchList">
            <summary>
            搜索引擎来源判断
            </summary>
        </member>
        <member name="M:Base.WebSearch.WebSearch.IsWebSearch">
            <summary>
            是否Web搜索
            </summary>
            <returns></returns>
        </member>
        <member name="P:Base.WebSearch.WebSearch.IsRobots">
            <summary>
            是否被判断为机器人 
            </summary>
        </member>
        <member name="T:Base.Web.WebContent">
            <summary>
            读取网页
            </summary>
        </member>
        <member name="M:Base.Web.WebContent.getPage(System.String,System.String)">
            <summary>
            数据网页post方式
            </summary>
            <param name="url">地址</param>
            <param name="payload">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebContent.getPage(System.String,System.String,System.String,System.String)">
            <summary>
            数据网页post方式
            </summary>
            <param name="url">地址</param>
            <param name="payload">参数（值请url编码）</param>
            <param name="ContentType">编码类型</param>
            <param name="EnCode">网页编码</param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebContent.PostWebRequest(System.String,System.String)">
            <summary>
            提交POST数据
            </summary>
            <param name="postUrl"></param>
            <param name="menuInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebContent.PostWebRequest(System.String,System.String,System.Text.Encoding)">
            <summary>
            提交POST数据
            </summary>
            <param name="postUrl"></param>
            <param name="menuInfo"></param>
            <param name="EnCode"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebContent.Read(System.String)">
            <summary>
            读取网页内容
            </summary>
            <param name="web_url">读取地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebContent.Read(System.String,System.Net.CookieCollection@)">
            <summary>
            读取网页内容
            </summary>
            <param name="web_url">读取地址</param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebContent.Read(System.String,System.Boolean)">
            <summary>
            读取网页内容
            </summary>
            <param name="web_url">读取地址</param>
            <param name="IsPhone">是否手机读取</param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebContent.Read(System.String,System.String)">
            <summary>
            读取网页内容
            </summary>
            <param name="web_url">读取地址</param>
            <param name="RefererUrl">上级页面</param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebContent.Read(System.String,System.String,System.Boolean)">
            <summary>
            读取网页内容
            </summary>
            <param name="web_url">读取地址</param>
            <param name="RefererUrl">上级页面</param>
            <param name="IsPhone">是否手机读取</param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebContent.Read(System.String,System.String,System.String@)">
            <summary>
            读取网页内容
            </summary>
            <param name="web_url">读取地址</param>
            <param name="RefererUrl">上级页面</param>
            <param name="EncodingStr">编码</param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebContent.Read(System.String,System.String,System.Boolean,System.String@)">
            <summary>
            读取网页内容
            </summary>
            <param name="web_url">读取地址</param>
            <param name="RefererUrl">上级页面</param>
            <param name="IsPhone">是否Iphone读取</param>
            <param name="EncodingStr">编码</param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebContent.Read(System.String,System.String,System.String@,System.Int32)">
            <summary>
            读取网页内容
            </summary>
            <param name="web_url">读取地址</param>
            <param name="RefererUrl">上级页面</param>
            <param name="EncodingStr">编码</param>
            <param name="RunI">次数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebContent.Read(System.String,System.String,System.Boolean,System.String@,System.Int32)">
            <summary>
            读取网页内容
            </summary>
            <param name="web_url">读取的地址</param>
            <param name="RefererUrl">上级页面地址</param>
            <param name="IsPhone">是否苹果手机</param>
            <param name="EncodingStr">返回编码</param>
            <param name="RunI">次数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebContent.ReadTime(System.String,System.String)">
            <summary>
            获得网页的最后修改时间
            </summary>
            <param name="web_url">网页地址</param>
            <param name="RefererUrl">上级页面</param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebContent.Read(System.String,System.String,System.Boolean,System.String@,System.String@,System.Net.CookieCollection@,System.Int32)">
            <summary>
            读取网页内容
            </summary>
            <param name="web_url">读取的地址</param>
            <param name="RefererUrl">上级页面地址</param>
            <param name="IsPhone">是否苹果手机</param>
            <param name="EncodingStr">返回编码</param>
            <param name="ModiTime">返回页面最后时间</param>
            <param name="RunI">次数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebContent.isLuan(System.String)">
            <summary>
            是否
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebContent.SendFileName(System.String,System.String)">
            <summary>
            提交数据过去
            </summary>
            <param name="WebUrl"></param>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Web.WebService">
            <summary>
            WebService调用服务
            </summary>
        </member>
        <member name="M:Base.Web.WebService.InvokeWebService(System.String,System.String,System.Object[])">
            <summary>    
            动态调用web服务    
            </summary>    
            <param name="url">WSDL服务地址</param>
            <param name="methodname">方法名</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebService.InvokeWebService(System.String,System.String,System.String,System.Object[])">
            <summary>    
            动态调用web服务    
            </summary>    
            <param name="url">WSDL服务地址</param>
            <param name="classname">类名</param>
            <param name="methodname">方法名</param>
            <param name="args">参数</param>
            <returns></returns>    
        </member>
        <member name="M:Base.Web.WebService.GetWsClassName(System.String)">
            <summary>
            获取类名
            </summary>
            <param name="wsUrl"></param>
            <returns></returns>
        </member>
        <member name="T:Base.Web.WebSvcCaller">
            <summary>
             利用WebRequest/WebResponse进行WebService调用的类
            </summary>
        </member>
        <member name="M:Base.Web.WebSvcCaller.QueryPostWebService(System.String,System.String,System.Collections.Hashtable)">
            <summary>
            需要WebService支持Post调用
            </summary>
            <param name="URL">地址</param>
            <param name="MethodName">方法名</param>
            <param name="Pars">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebSvcCaller.QueryGetWebService(System.String,System.String,System.Collections.Hashtable)">
            <summary>
            需要WebService支持Get调用
            </summary>
            <param name="URL">地址</param>
            <param name="MethodName">方法名</param>
            <param name="Pars">参数</param>
            <returns></returns>
        </member>
        <member name="M:Base.Web.WebSvcCaller.QuerySoapWebService(System.String,System.String,System.Collections.Hashtable)">
            <summary>
            通用WebService调用(Soap),参数Pars为String类型的参数名、参数值
            </summary>
            <param name="URL">地址</param>
            <param name="MethodName">方法名</param>
            <param name="Pars">参数</param>
            <returns></returns>
        </member>
        <member name="T:Base.Xml.Config">
            <summary>
            RWConfig 的摘要说明
            </summary>
        </member>
        <member name="F:Base.Xml.Config.docName">
            <summary>
            WEB.CONFIG路径
            </summary>
        </member>
        <member name="M:Base.Xml.Config.#ctor">
            <summary>
            初始化（不调入文件）需自行调入
            </summary>
        </member>
        <member name="M:Base.Xml.Config.#ctor(System.Int32)">
            <summary>
            初始化（调入文件）
            </summary>
            <param name="_configType"> 0为WEB.CONFIG 1是APP.CONFIG</param>
        </member>
        <member name="M:Base.Xml.Config.#ctor(System.String)">
            <summary>
            初始化（调入文件）
            </summary>
        </member>
        <member name="M:Base.Xml.Config.GetValue(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            读取值
            </summary>
            <param name="Path">路径</param>
            <param name="AddName">节点名</param>
            <param name="KeyName">关键字值</param>
            <param name="KeyValue">关键字值的内容</param>
            <param name="ReturnValue">要返回的关键字值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Xml.Config.GetValue(System.String)">
            <summary>
            获得 appSettings 里key值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Xml.Config.AddValue(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            增加 一个节点
            </summary>
            <param name="path">路径</param>
            <param name="AddName">节点名称</param>
            <param name="SelectKeyName">搜索的关键字</param>
            <param name="SelectKeyValue">搜索的关键字值</param>
            <param name="KeyList">属性名称及值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Xml.Config.AddValue(System.String,System.String)">
            <summary>
            增加 appSettings add
            </summary>
            <param name="key">key的键值</param>
            <param name="value">value的键值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Xml.Config.removeElement(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            删除
            </summary>
            <param name="path">路径</param>
            <param name="AddName">节点名称</param>
            <param name="KeyList">键属性名称及值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Xml.Config.removeElement(System.String)">
            <summary>
            删除 appSettings key
            </summary>
            <param name="elementKey">add  key 健值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Xml.Config.modifyElement(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            修改
            </summary>
            <param name="path">路径</param>
            <param name="AddName">添加的名字节点名称</param>
            <param name="SelectKeyName">查找键名称</param>
            <param name="SelectKeyValue">查找键值</param>
            <param name="KeyList">要添加的属性名称及值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Xml.Config.modifyElement(System.String,System.String)">
            <summary>
            修改
            </summary>
            <param name="elementKey">键名称</param>
            <param name="elementValue">键值</param>
            <returns></returns>
        </member>
        <member name="M:Base.Xml.Config.loadConfigDoc">
            <summary>
            调入Webconfig
            </summary>
            <returns></returns>
        </member>
        <member name="M:Base.Xml.Config.saveConfigDoc">
            <summary>
            保存节点修改信息
            </summary>
        </member>
        <member name="P:Base.Xml.Config.Message">
            <summary>
            返回信息
            </summary>
        </member>
        <member name="P:Base.Xml.Config.ConfigType">
            <summary>
            配置类型  0为WEB.CONFIG 1是APP.CONFIG
            </summary>
        </member>
        <member name="P:Base.Xml.Config.ConfigFilePath">
            <summary>
            配置文件目标，为空使用_configType
            </summary>
        </member>
        <member name="T:Base.Xml.XmlHelper">
            <summary> 
            Xml的操作类 
            </summary>     
        </member>
        <member name="F:Base.Xml.XmlHelper._filePath">
            <summary> 
            XML文件的物理路径 
            </summary> 
        </member>
        <member name="F:Base.Xml.XmlHelper._xml">
            <summary> 
            Xml文档 
            </summary> 
        </member>
        <member name="F:Base.Xml.XmlHelper._element">
            <summary> 
            XML的根节点 
            </summary> 
        </member>
        <member name="M:Base.Xml.XmlHelper.ReplaceLowOrderASCIICharacters(System.String)">
            <summary>
            把一个字符串中的 低序位 ASCII 字符 替换掉
            </summary>
            <param name="tmp"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Xml.XmlHelper.#ctor(System.String,System.String)">
            <summary> 
            实例化XmlHelper对象 （可以是一个地址，也可以是内容）
            </summary> 
            <param name="xmlFilePath">Xml文件的相对路径</param> 
            <param name="Content">Xml内容</param> 
        </member>
        <member name="M:Base.Xml.XmlHelper.GetNode(System.String)">
            <summary> 
            获取指定XPath表达式的节点对象 
            </summary>         
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
        </member>
        <member name="M:Base.Xml.XmlHelper.GetNodeList(System.String)">
            <summary>
            查找节点
            </summary>
            <param name="xPath"></param>
            <returns></returns>
        </member>
        <member name="M:Base.Xml.XmlHelper.GetNodeLength(System.String)">
            <summary> 
            获取指定XPath表达式的子节点对象 
            </summary>         
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
        </member>
        <member name="M:Base.Xml.XmlHelper.GetNodeListLength(System.String)">
            <summary> 
            获取指定XPath表达式数量 
            </summary>         
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
        </member>
        <member name="M:Base.Xml.XmlHelper.GetValue(System.String,System.Int32)">
            <summary> 
            获取指定XPath表达式的节点对象 
            </summary>         
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
            <param name="i">顺序号</param> 
        </member>
        <member name="M:Base.Xml.XmlHelper.GetValue(System.String,System.Int32,System.String,System.Int32)">
            <summary> 
            获取指定XPath表达式的节点对象 
            </summary>         
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
            <param name="i">顺序号</param> 
            <param name="NodeName">子节点名称</param>
            <param name="i1">顺序号</param>
        </member>
        <member name="M:Base.Xml.XmlHelper.GetValue(System.String,System.Int32,System.String)">
            <summary> 
            获取指定XPath表达式的节点对象 
            </summary>         
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
            <param name="i">顺序号</param> 
            <param name="NodeName">子节点名称</param>
        </member>
        <member name="M:Base.Xml.XmlHelper.GetValue(System.String)">
            <summary> 
            获取指定XPath表达式节点的值 
            </summary> 
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
        </member>
        <member name="M:Base.Xml.XmlHelper.SetValue(System.String,System.Int32,System.String)">
            <summary> 
            设置指定XPath表达式的节点对象 
            </summary>         
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
            <param name="i">顺序号</param> 
            <param name="NodeValue">值</param>
        </member>
        <member name="M:Base.Xml.XmlHelper.SetValue(System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary> 
            设置指定XPath表达式的节点对象 
            </summary>         
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
            <param name="i">顺序号</param> 
            <param name="NodeValue">值</param>
            <param name="i1">节点位置</param>
            <param name="NodeName">节点名称</param>
        </member>
        <member name="M:Base.Xml.XmlHelper.SetValue(System.String,System.String)">
            <summary> 
            设置指定XPath表达式节点的值 
            </summary> 
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            <param name="NodeValue">要设置的值</param>
            </param> 
        </member>
        <member name="M:Base.Xml.XmlHelper.GetAttributeValue(System.String,System.String)">
            <summary> 
            获取指定XPath表达式节点的属性值 
            </summary> 
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
            <param name="attributeName">属性名</param> 
        </member>
        <member name="M:Base.Xml.XmlHelper.GetAttributeValue(System.String,System.Int32,System.String)">
            <summary> 
            获取指定XPath表达式节点的属性值 
            </summary> 
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
            <param name="i">位置</param> 
            <param name="attributeName">属性名</param> 
        </member>
        <member name="M:Base.Xml.XmlHelper.GetAttributeValue(System.String,System.Int32,System.String,System.String)">
            <summary> 
            获取指定XPath表达式节点的属性值 
            </summary> 
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
            <param name="i">位置</param> 
            <param name="NodeName">子节点名称</param>
            <param name="attributeName">属性名</param> 
        </member>
        <member name="M:Base.Xml.XmlHelper.GetAttributeValue(System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary> 
            获取指定XPath表达式节点的属性值 
            </summary> 
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
            <param name="i">位置</param> 
            <param name="NodeName">子节点名称</param>
            <param name="i1">子节点位置</param>
            <param name="attributeName">属性名</param> 
        </member>
        <member name="M:Base.Xml.XmlHelper.SetAttributeValue(System.String,System.String,System.String)">
            <summary> 
            获取指定XPath表达式节点的属性值 
            </summary> 
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
            <param name="AddNodeName">属性名</param> 
            <param name="attributeValue">值</param>
        </member>
        <member name="M:Base.Xml.XmlHelper.SetAttributeValue(System.String,System.Int32,System.String,System.String)">
            <summary> 
            获取指定XPath表达式节点的属性值 
            </summary> 
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
            <param name="i">顺序号</param>
            <param name="AddNodeName">属性名</param> 
            <param name="attributeValue">值</param>
        </member>
        <member name="M:Base.Xml.XmlHelper.SetAttributeValue(System.String,System.Int32,System.String,System.String,System.String)">
            <summary> 
            获取指定XPath表达式节点的属性值 
            </summary> 
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
            <param name="i">顺序号</param>
            <param name="NodeName">子节点名称</param>
            <param name="AddNodeName">属性名</param> 
            <param name="attributeValue">值</param>
        </member>
        <member name="M:Base.Xml.XmlHelper.SetAttributeValue(System.String,System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary> 
            获取指定XPath表达式节点的属性值 
            </summary> 
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
            <param name="i">顺序号</param>
            <param name="NodeName">子节点名称</param>
            <param name="i1">子节点顺序号</param>
            <param name="AddNodeName">属性名</param> 
            <param name="attributeValue">值</param>
        </member>
        <member name="M:Base.Xml.XmlHelper.AppendNode(System.Xml.XmlNode)">
            <summary> 
            1. 功能：新增节点。 
            2. 使用条件：将任意节点插入到当前Xml文件中。 
            </summary>         
            <param name="xmlNode">要插入的Xml节点</param> 
        </member>
        <member name="M:Base.Xml.XmlHelper.AppendNode(System.Data.DataSet)">
            <summary> 
            1. 功能：新增节点。 
            2. 使用条件：将DataSet中的第一条记录插入Xml文件中。 
            </summary>         
            <param name="ds">DataSet的实例，该DataSet中应该只有一条记录</param> 
        </member>
        <member name="M:Base.Xml.XmlHelper.RemoveNode(System.String)">
            <summary> 
            删除指定XPath表达式的节点 
            </summary>         
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
        </member>
        <member name="M:Base.Xml.XmlHelper.Save">
            <summary> 
            保存XML文件 
            </summary>         
        </member>
        <member name="M:Base.Xml.XmlHelper.Dispose">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:Base.Xml.XmlHelper.CreateRootElement(System.String)">
            <summary> 
            创建根节点对象 
            </summary> 
            <param name="xmlFilePath">Xml文件的相对路径</param>         
        </member>
        <member name="M:Base.Xml.XmlHelper.GetValue(System.String,System.String)">
            <summary> 
            获取指定XPath表达式节点的值 
            </summary> 
            <param name="xmlFilePath">Xml文件的相对路径</param> 
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
        </member>
        <member name="M:Base.Xml.XmlHelper.GetAttributeValue(System.String,System.String,System.String)">
            <summary> 
            获取指定XPath表达式节点的属性值 
            </summary> 
            <param name="xmlFilePath">Xml文件的相对路径</param> 
            <param name="xPath">XPath表达式, 
            范例1: @"Skill/First/SkillItem", 等效于 @"//Skill/First/SkillItem" 
            范例2: @"Table[USERNAME='a']" , []表示筛选,USERNAME是Table下的一个子节点. 
            范例3: @"ApplyPost/Item[@itemName='岗位编号']",@itemName是Item节点的属性. 
            </param> 
            <param name="attributeName">属性名</param> 
        </member>
    </members>
</doc>
